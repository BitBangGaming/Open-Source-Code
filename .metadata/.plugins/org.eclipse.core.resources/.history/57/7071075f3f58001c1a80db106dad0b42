#ifndef SHARED_ENUMS_H_
#define SHARED_ENUMS_H_


typedef enum
{
	MCO1_OFF = 0,
	MCO1_ON = 1
} Mco1State_t;

typedef enum
{
	PUSHED = 0,
	RELEASED = 1
} ButtonState_t;

typedef enum
{
	CHANNEL_1 = 1,
	CHANNEL_2 = 2
} ExpansionPortChannel_t;

typedef enum
{
	LED_ON = 0,
	LED_OFF = 1,
	LED_TOGGLE = 2
} LedState_t;

typedef enum
{
	// PC
	PROTOCOL_PC_XINPUT = 0,
	PROTOCOL_PC_DINPUT = 1,
	PROTOCOL_PC_GENERIC = 2,

	// NINTENDO
	PROTOCOL_NES = 20,
	PROTOCOL_SNES = 21,
	PROTOCOL_VIRTUAL_BOY = 22,
	PROTOCOL_N64 = 23,
	PROTOCOL_GC = 24,
	PROTOCOL_WII = 25,
	PROTOCOL_WIIU = 26,
	PROTOCOL_NES_CLASSIC = 27,
	PROTOCOL_SWITCH = 28,
	PROTOCOL_SNES_CLASSIC = 29,

	// SEGA
	PROTOCOL_GENESIS = 40,
	PROTOCOL_SATURN = 41,
	PROTOCOL_DREAMCAST = 42,
	PROTOCOL_GENESIS_MINI = 43,

	// SONY
	PROTOCOL_PS_PS2 = 60,
	PROTOCOL_PS3 = 61,
	PROTOCOL_PS4 = 62,
	PROTOCOL_PS_CLASSIC = 63,
	PROTOCOL_PS5= 64,

	// MICROSOFT
	PROTOCOL_XBOX = 80,
	PROTOCOL_XBOX_360 = 81,
	PROTOCOL_XBOX_ONE = 82,
	PROTOCOL_XBOX_SERIES_X = 83,
} EmulationProtocol_t;

typedef enum
{
	LED_RED = 0,
	LED_ROSE = 1,
	LED_MAGENTA = 2,
	LED_VIOLET = 3,
	LED_BLUE = 4,
	LED_AZURE = 5,
	LED_CYAN = 6,
	LED_SPRING_GREEN = 7,
	LED_GREEN = 8,
	LED_CHARTREUSE= 9,
	LED_YELLOW = 10,
	LED_ORANGE = 11,
	LED_WHITE = 12
} LedColor_t;

typedef enum
{
	ACRYLIC_SWITCH_RED = 7,
	ACRYLIC_SWITCH_GREEN = 11,
	ACRYLIC_SWITCH_BLUE = 13,
	ACRYLIC_SWITCH_MAGENTA = 5,
	ACRYLIC_SWITCH_CYAN = 9,
	ACRYLIC_SWITCH_YELLOW = 3,
	ACRYLIC_SWITCH_WHITE = 1
} AcrylicSwitchSetting_t;

typedef enum
{
	SOCD_SWITCH_STANDARD = 0,
	SOCD_SWITCH_LAST_INPUT_PRIORITY = 1,
	SOCD_SWITCH_REMOTE = 2
} SocdSwitchSetting_t;

typedef enum
{
	MODEL_DOUBLEKO = 0,
	MODEL_NOSTALGIA = 1,
	MODEL_ZEROKO = 2
} PcbModel_t;

typedef enum
{
	REV_A = 0,
	REV_B = 1,
	REV_C = 2,
	REV_D = 3,
	RED_E = 4
} PcbRevision_t;

typedef enum
{
	BAUD_9600 = 9600,
	BAUD_19200 = 19200,
	BAUD_115200 = 115200,
	BAUD_921600 = 921600
} Baudrate_t;

typedef enum
{
	READ_MSI = 0x40,
	READ_SSI = 0x41,
	READ_PL = 0x42,
	READ_LS_XAXIS = 0x43,
	READ_LS_YAXIS = 0x44,
	READ_EP = 0x45,
	READ_ALC = 0x46,
	READ_CPM = 0x47,
	READ_CPR = 0x48,
	WRITE_BS_9600 = 0x20,
	WRITE_BS_19200 = 0x21,
	WRITE_BS_115200 = 0x22,
	WRITE_BS_921600 = 0x23
} ApiCommand_t;

typedef enum
{
	P1 = 0,
	P2 = 1,
	P3 = 2,
	P4 = 3,
	K1 = 4,
	K2 = 5,
	K3 = 6,
	K4 = 7,
	LEFT = 8,
	RIGHT = 9,
	DOWN = 10,
	UP = 11,
	START = 12,
	SELECT = 13,
	HOME = 14,
	MSI_BIT_15 = 15
} MainSwitchInput_t;

typedef enum
{
	LS = 0,
	RS = 1,
	DP = 2,
	LOCK = 3,
	TBKEY = 4,
	TPKEY = 5,
	L3 = 6,
	R3 = 7
} SecondarySwitchInput_t;

typedef enum
{
	SOCD_NEUTRAL = 0,
	SOCD_MIN_CARDINAL = 1,
	SOCD_MAX_CARDINAL = 2,
	SOCD_LAST_INPUT_PRIORITY = 3
} SocdCleaner_t;

typedef enum
{
	EEPROM_BYTE_SOCD_REMOTE_CLEANER_X = 0,
	EEPROM_BYTE_SOCD_REMOTE_CLEANER_Y = 1,
} EepromByteAdress_t;

typedef enum
{
	EEPROM_PAGE_SOCD = 0,
	EEPROM_PAGE_BUTTON_MAP = 1
} EepromPageAdress_t;

typedef enum
{
	SOCD_X_AXIS = 0,
	SOCD_Y_AXIS = 1
} SocdAxis_t;

typedef enum
{
	P1_LED = 0,
	P2_LED = 1,
	P3_LED = 2,
	P4_LED = 3
} PlayerLed_t;

typedef enum
{
	CONTROL_MODE_READ_ONLY = 0,
	CONTROL_MODE_POSSESS = 1,
	CONTROL_MODE_ANALOG_JOYSTICK = 2,
	CONTROL_MODE_COPILOT = 3
} InputControlMode_t;

typedef enum
{
	EXPANSION_PORT_COMMAND_RECEIVED = 0,
	EXPANSION_PORT_NO_COMMAND = 1,
} ExpansionPortStatus_t;

#endif
