
GC_Anti-Pad_Hack Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020cc  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002264  08002264  00012264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800227c  0800227c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800227c  0800227c  0001227c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002284  08002284  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002284  08002284  00012284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002288  08002288  00012288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800228c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  2000000c  08002298  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  08002298  00020088  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000063b7  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000011d9  00000000  00000000  000263f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003148  00000000  00000000  000275cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000518  00000000  00000000  0002a718  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000558  00000000  00000000  0002ac30  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000126e  00000000  00000000  0002b188  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00005287  00000000  00000000  0002c3f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00083eef  00000000  00000000  0003167d  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000b556c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000d00  00000000  00000000  000b55e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800224c 	.word	0x0800224c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	0800224c 	.word	0x0800224c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80004d8:	4770      	bx	lr
	...

080004dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004dc:	b510      	push	{r4, lr}
 80004de:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004e0:	4b0e      	ldr	r3, [pc, #56]	; (800051c <HAL_InitTick+0x40>)
 80004e2:	7818      	ldrb	r0, [r3, #0]
 80004e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e8:	fbb3 f3f0 	udiv	r3, r3, r0
 80004ec:	4a0c      	ldr	r2, [pc, #48]	; (8000520 <HAL_InitTick+0x44>)
 80004ee:	6810      	ldr	r0, [r2, #0]
 80004f0:	fbb0 f0f3 	udiv	r0, r0, r3
 80004f4:	f000 f888 	bl	8000608 <HAL_SYSTICK_Config>
 80004f8:	b968      	cbnz	r0, 8000516 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004fa:	2c0f      	cmp	r4, #15
 80004fc:	d901      	bls.n	8000502 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80004fe:	2001      	movs	r0, #1
 8000500:	e00a      	b.n	8000518 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000502:	2200      	movs	r2, #0
 8000504:	4621      	mov	r1, r4
 8000506:	f04f 30ff 	mov.w	r0, #4294967295
 800050a:	f000 f84b 	bl	80005a4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800050e:	4b05      	ldr	r3, [pc, #20]	; (8000524 <HAL_InitTick+0x48>)
 8000510:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000512:	2000      	movs	r0, #0
 8000514:	e000      	b.n	8000518 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000516:	2001      	movs	r0, #1
}
 8000518:	bd10      	pop	{r4, pc}
 800051a:	bf00      	nop
 800051c:	20000000 	.word	0x20000000
 8000520:	20000008 	.word	0x20000008
 8000524:	20000004 	.word	0x20000004

08000528 <HAL_Init>:
{
 8000528:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800052a:	4b0b      	ldr	r3, [pc, #44]	; (8000558 <HAL_Init+0x30>)
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000532:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800053a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000542:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000544:	2003      	movs	r0, #3
 8000546:	f000 f81b 	bl	8000580 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800054a:	200f      	movs	r0, #15
 800054c:	f7ff ffc6 	bl	80004dc <HAL_InitTick>
  HAL_MspInit();
 8000550:	f7ff ffc2 	bl	80004d8 <HAL_MspInit>
}
 8000554:	2000      	movs	r0, #0
 8000556:	bd08      	pop	{r3, pc}
 8000558:	40023c00 	.word	0x40023c00

0800055c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800055c:	4a03      	ldr	r2, [pc, #12]	; (800056c <HAL_IncTick+0x10>)
 800055e:	6811      	ldr	r1, [r2, #0]
 8000560:	4b03      	ldr	r3, [pc, #12]	; (8000570 <HAL_IncTick+0x14>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	440b      	add	r3, r1
 8000566:	6013      	str	r3, [r2, #0]
}
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	20000084 	.word	0x20000084
 8000570:	20000000 	.word	0x20000000

08000574 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000574:	4b01      	ldr	r3, [pc, #4]	; (800057c <HAL_GetTick+0x8>)
 8000576:	6818      	ldr	r0, [r3, #0]
}
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	20000084 	.word	0x20000084

08000580 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000580:	4a07      	ldr	r2, [pc, #28]	; (80005a0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000582:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000584:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000588:	041b      	lsls	r3, r3, #16
 800058a:	0c1b      	lsrs	r3, r3, #16
 800058c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000594:	0200      	lsls	r0, r0, #8
 8000596:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800059a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800059c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800059e:	4770      	bx	lr
 80005a0:	e000ed00 	.word	0xe000ed00

080005a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005a4:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005a6:	4b16      	ldr	r3, [pc, #88]	; (8000600 <HAL_NVIC_SetPriority+0x5c>)
 80005a8:	68db      	ldr	r3, [r3, #12]
 80005aa:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005ae:	f1c3 0407 	rsb	r4, r3, #7
 80005b2:	2c04      	cmp	r4, #4
 80005b4:	bf28      	it	cs
 80005b6:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005b8:	1d1d      	adds	r5, r3, #4
 80005ba:	2d06      	cmp	r5, #6
 80005bc:	bf8c      	ite	hi
 80005be:	3b03      	subhi	r3, #3
 80005c0:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005c2:	f04f 35ff 	mov.w	r5, #4294967295
 80005c6:	fa05 f404 	lsl.w	r4, r5, r4
 80005ca:	ea21 0104 	bic.w	r1, r1, r4
 80005ce:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005d0:	fa05 f303 	lsl.w	r3, r5, r3
 80005d4:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d8:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80005da:	2800      	cmp	r0, #0
 80005dc:	db09      	blt.n	80005f2 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005de:	0109      	lsls	r1, r1, #4
 80005e0:	b2c9      	uxtb	r1, r1
 80005e2:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80005e6:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80005ea:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80005ee:	bc30      	pop	{r4, r5}
 80005f0:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f2:	f000 000f 	and.w	r0, r0, #15
 80005f6:	0109      	lsls	r1, r1, #4
 80005f8:	b2c9      	uxtb	r1, r1
 80005fa:	4b02      	ldr	r3, [pc, #8]	; (8000604 <HAL_NVIC_SetPriority+0x60>)
 80005fc:	5419      	strb	r1, [r3, r0]
 80005fe:	e7f6      	b.n	80005ee <HAL_NVIC_SetPriority+0x4a>
 8000600:	e000ed00 	.word	0xe000ed00
 8000604:	e000ed14 	.word	0xe000ed14

08000608 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000608:	3801      	subs	r0, #1
 800060a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800060e:	d20a      	bcs.n	8000626 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000610:	4b06      	ldr	r3, [pc, #24]	; (800062c <HAL_SYSTICK_Config+0x24>)
 8000612:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000614:	4a06      	ldr	r2, [pc, #24]	; (8000630 <HAL_SYSTICK_Config+0x28>)
 8000616:	21f0      	movs	r1, #240	; 0xf0
 8000618:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800061c:	2000      	movs	r0, #0
 800061e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000620:	2207      	movs	r2, #7
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000626:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	e000e010 	.word	0xe000e010
 8000630:	e000ed00 	.word	0xe000ed00

08000634 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000638:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800063a:	2400      	movs	r4, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800063c:	2601      	movs	r6, #1
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800063e:	f8df c1c8 	ldr.w	ip, [pc, #456]	; 8000808 <HAL_GPIO_Init+0x1d4>

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000642:	f8df e1c8 	ldr.w	lr, [pc, #456]	; 800080c <HAL_GPIO_Init+0x1d8>
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000646:	4d6e      	ldr	r5, [pc, #440]	; (8000800 <HAL_GPIO_Init+0x1cc>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000648:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8000810 <HAL_GPIO_Init+0x1dc>
 800064c:	e04a      	b.n	80006e4 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 800064e:	6882      	ldr	r2, [r0, #8]
 8000650:	ea4f 0b44 	mov.w	fp, r4, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000654:	2703      	movs	r7, #3
 8000656:	fa07 fa0b 	lsl.w	sl, r7, fp
 800065a:	ea22 0a0a 	bic.w	sl, r2, sl
        temp |= (GPIO_Init->Speed << (position * 2U));
 800065e:	68ca      	ldr	r2, [r1, #12]
 8000660:	fa02 f20b 	lsl.w	r2, r2, fp
 8000664:	ea42 020a 	orr.w	r2, r2, sl
        GPIOx->OSPEEDR = temp;
 8000668:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 800066a:	6842      	ldr	r2, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800066c:	ea22 0808 	bic.w	r8, r2, r8
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000670:	684a      	ldr	r2, [r1, #4]
 8000672:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8000676:	40a2      	lsls	r2, r4
 8000678:	ea42 0208 	orr.w	r2, r2, r8
        GPIOx->OTYPER = temp;
 800067c:	6042      	str	r2, [r0, #4]
 800067e:	e03e      	b.n	80006fe <HAL_GPIO_Init+0xca>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000680:	f04f 0800 	mov.w	r8, #0
 8000684:	fa08 f80b 	lsl.w	r8, r8, fp
 8000688:	ea48 080a 	orr.w	r8, r8, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 800068c:	f8c2 8008 	str.w	r8, [r2, #8]
        temp = EXTI->IMR;
 8000690:	682a      	ldr	r2, [r5, #0]
        temp &= ~((uint32_t)iocurrent);
 8000692:	ea6f 0803 	mvn.w	r8, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000696:	684f      	ldr	r7, [r1, #4]
 8000698:	f417 3f80 	tst.w	r7, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800069c:	bf0c      	ite	eq
 800069e:	ea08 0202 	andeq.w	r2, r8, r2
        {
          temp |= iocurrent;
 80006a2:	431a      	orrne	r2, r3
        }
        EXTI->IMR = temp;
 80006a4:	602a      	str	r2, [r5, #0]

        temp = EXTI->EMR;
 80006a6:	686a      	ldr	r2, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006a8:	684f      	ldr	r7, [r1, #4]
 80006aa:	f417 3f00 	tst.w	r7, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80006ae:	bf0c      	ite	eq
 80006b0:	ea08 0202 	andeq.w	r2, r8, r2
        {
          temp |= iocurrent;
 80006b4:	431a      	orrne	r2, r3
        }
        EXTI->EMR = temp;
 80006b6:	606a      	str	r2, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80006b8:	68aa      	ldr	r2, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006ba:	684f      	ldr	r7, [r1, #4]
 80006bc:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80006c0:	bf0c      	ite	eq
 80006c2:	ea08 0202 	andeq.w	r2, r8, r2
        {
          temp |= iocurrent;
 80006c6:	431a      	orrne	r2, r3
        }
        EXTI->RTSR = temp;
 80006c8:	60aa      	str	r2, [r5, #8]

        temp = EXTI->FTSR;
 80006ca:	68ea      	ldr	r2, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006cc:	684f      	ldr	r7, [r1, #4]
 80006ce:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 80006d2:	bf0c      	ite	eq
 80006d4:	ea08 0302 	andeq.w	r3, r8, r2
        {
          temp |= iocurrent;
 80006d8:	4313      	orrne	r3, r2
        }
        EXTI->FTSR = temp;
 80006da:	60eb      	str	r3, [r5, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80006dc:	3401      	adds	r4, #1
 80006de:	2c10      	cmp	r4, #16
 80006e0:	f000 808a 	beq.w	80007f8 <HAL_GPIO_Init+0x1c4>
    ioposition = 0x01U << position;
 80006e4:	fa06 f804 	lsl.w	r8, r6, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006e8:	680b      	ldr	r3, [r1, #0]
 80006ea:	ea08 0303 	and.w	r3, r8, r3
    if(iocurrent == ioposition)
 80006ee:	4598      	cmp	r8, r3
 80006f0:	d1f4      	bne.n	80006dc <HAL_GPIO_Init+0xa8>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80006f2:	684a      	ldr	r2, [r1, #4]
 80006f4:	f002 0203 	and.w	r2, r2, #3
 80006f8:	3a01      	subs	r2, #1
 80006fa:	2a01      	cmp	r2, #1
 80006fc:	d9a7      	bls.n	800064e <HAL_GPIO_Init+0x1a>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80006fe:	684a      	ldr	r2, [r1, #4]
 8000700:	f002 0203 	and.w	r2, r2, #3
 8000704:	2a03      	cmp	r2, #3
 8000706:	d027      	beq.n	8000758 <HAL_GPIO_Init+0x124>
        temp = GPIOx->PUPDR;
 8000708:	68c2      	ldr	r2, [r0, #12]
 800070a:	ea4f 0a44 	mov.w	sl, r4, lsl #1
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800070e:	2703      	movs	r7, #3
 8000710:	fa07 f80a 	lsl.w	r8, r7, sl
 8000714:	ea22 0808 	bic.w	r8, r2, r8
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000718:	688a      	ldr	r2, [r1, #8]
 800071a:	fa02 f20a 	lsl.w	r2, r2, sl
 800071e:	ea42 0208 	orr.w	r2, r2, r8
        GPIOx->PUPDR = temp;
 8000722:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000724:	684a      	ldr	r2, [r1, #4]
 8000726:	403a      	ands	r2, r7
 8000728:	2a02      	cmp	r2, #2
 800072a:	d115      	bne.n	8000758 <HAL_GPIO_Init+0x124>
        temp = GPIOx->AFR[position >> 3U];
 800072c:	fa24 f807 	lsr.w	r8, r4, r7
 8000730:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8000734:	f8d8 a020 	ldr.w	sl, [r8, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000738:	f004 0207 	and.w	r2, r4, #7
 800073c:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8000740:	220f      	movs	r2, #15
 8000742:	fa02 f20b 	lsl.w	r2, r2, fp
 8000746:	ea2a 0a02 	bic.w	sl, sl, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800074a:	690a      	ldr	r2, [r1, #16]
 800074c:	fa02 f20b 	lsl.w	r2, r2, fp
 8000750:	ea42 020a 	orr.w	r2, r2, sl
        GPIOx->AFR[position >> 3U] = temp;
 8000754:	f8c8 2020 	str.w	r2, [r8, #32]
      temp = GPIOx->MODER;
 8000758:	6802      	ldr	r2, [r0, #0]
 800075a:	ea4f 0a44 	mov.w	sl, r4, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800075e:	2703      	movs	r7, #3
 8000760:	fa07 f80a 	lsl.w	r8, r7, sl
 8000764:	ea22 0808 	bic.w	r8, r2, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000768:	684a      	ldr	r2, [r1, #4]
 800076a:	403a      	ands	r2, r7
 800076c:	fa02 f20a 	lsl.w	r2, r2, sl
 8000770:	ea42 0208 	orr.w	r2, r2, r8
      GPIOx->MODER = temp;
 8000774:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000776:	684a      	ldr	r2, [r1, #4]
 8000778:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 800077c:	d0ae      	beq.n	80006dc <HAL_GPIO_Init+0xa8>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077e:	2200      	movs	r2, #0
 8000780:	9201      	str	r2, [sp, #4]
 8000782:	f8dc 2044 	ldr.w	r2, [ip, #68]	; 0x44
 8000786:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800078a:	f8cc 2044 	str.w	r2, [ip, #68]	; 0x44
 800078e:	f8dc 2044 	ldr.w	r2, [ip, #68]	; 0x44
 8000792:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000796:	9201      	str	r2, [sp, #4]
 8000798:	9a01      	ldr	r2, [sp, #4]
 800079a:	f024 0203 	bic.w	r2, r4, #3
 800079e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80007a2:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
        temp = SYSCFG->EXTICR[position >> 2U];
 80007a6:	f8d2 a008 	ldr.w	sl, [r2, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007aa:	ea04 0807 	and.w	r8, r4, r7
 80007ae:	ea4f 0b88 	mov.w	fp, r8, lsl #2
 80007b2:	f04f 080f 	mov.w	r8, #15
 80007b6:	fa08 f80b 	lsl.w	r8, r8, fp
 80007ba:	ea2a 0a08 	bic.w	sl, sl, r8
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007be:	4570      	cmp	r0, lr
 80007c0:	f43f af5e 	beq.w	8000680 <HAL_GPIO_Init+0x4c>
 80007c4:	4548      	cmp	r0, r9
 80007c6:	d00f      	beq.n	80007e8 <HAL_GPIO_Init+0x1b4>
 80007c8:	4f0e      	ldr	r7, [pc, #56]	; (8000804 <HAL_GPIO_Init+0x1d0>)
 80007ca:	42b8      	cmp	r0, r7
 80007cc:	d00e      	beq.n	80007ec <HAL_GPIO_Init+0x1b8>
 80007ce:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80007d2:	42b8      	cmp	r0, r7
 80007d4:	d00d      	beq.n	80007f2 <HAL_GPIO_Init+0x1be>
 80007d6:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80007da:	42b8      	cmp	r0, r7
 80007dc:	bf0c      	ite	eq
 80007de:	f04f 0804 	moveq.w	r8, #4
 80007e2:	f04f 0807 	movne.w	r8, #7
 80007e6:	e74d      	b.n	8000684 <HAL_GPIO_Init+0x50>
 80007e8:	46b0      	mov	r8, r6
 80007ea:	e74b      	b.n	8000684 <HAL_GPIO_Init+0x50>
 80007ec:	f04f 0802 	mov.w	r8, #2
 80007f0:	e748      	b.n	8000684 <HAL_GPIO_Init+0x50>
 80007f2:	f04f 0803 	mov.w	r8, #3
 80007f6:	e745      	b.n	8000684 <HAL_GPIO_Init+0x50>
      }
    }
  }
}
 80007f8:	b003      	add	sp, #12
 80007fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80007fe:	bf00      	nop
 8000800:	40013c00 	.word	0x40013c00
 8000804:	40020800 	.word	0x40020800
 8000808:	40023800 	.word	0x40023800
 800080c:	40020000 	.word	0x40020000
 8000810:	40020400 	.word	0x40020400

08000814 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000814:	6903      	ldr	r3, [r0, #16]
 8000816:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000818:	bf14      	ite	ne
 800081a:	2001      	movne	r0, #1
 800081c:	2000      	moveq	r0, #0
 800081e:	4770      	bx	lr

08000820 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000820:	b912      	cbnz	r2, 8000828 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000822:	0409      	lsls	r1, r1, #16
 8000824:	6181      	str	r1, [r0, #24]
  }
}
 8000826:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8000828:	6181      	str	r1, [r0, #24]
 800082a:	4770      	bx	lr

0800082c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800082c:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800082e:	ea01 0203 	and.w	r2, r1, r3
 8000832:	ea21 0103 	bic.w	r1, r1, r3
 8000836:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800083a:	6181      	str	r1, [r0, #24]
}
 800083c:	4770      	bx	lr
	...

08000840 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000840:	2800      	cmp	r0, #0
 8000842:	f000 81ec 	beq.w	8000c1e <HAL_RCC_OscConfig+0x3de>
{
 8000846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800084e:	6803      	ldr	r3, [r0, #0]
 8000850:	f013 0f01 	tst.w	r3, #1
 8000854:	d03b      	beq.n	80008ce <HAL_RCC_OscConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000856:	4ba8      	ldr	r3, [pc, #672]	; (8000af8 <HAL_RCC_OscConfig+0x2b8>)
 8000858:	689b      	ldr	r3, [r3, #8]
 800085a:	f003 030c 	and.w	r3, r3, #12
 800085e:	2b04      	cmp	r3, #4
 8000860:	d02c      	beq.n	80008bc <HAL_RCC_OscConfig+0x7c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000862:	4ba5      	ldr	r3, [pc, #660]	; (8000af8 <HAL_RCC_OscConfig+0x2b8>)
 8000864:	689b      	ldr	r3, [r3, #8]
 8000866:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800086a:	2b08      	cmp	r3, #8
 800086c:	d021      	beq.n	80008b2 <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800086e:	6863      	ldr	r3, [r4, #4]
 8000870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000874:	d04f      	beq.n	8000916 <HAL_RCC_OscConfig+0xd6>
 8000876:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800087a:	d052      	beq.n	8000922 <HAL_RCC_OscConfig+0xe2>
 800087c:	4b9e      	ldr	r3, [pc, #632]	; (8000af8 <HAL_RCC_OscConfig+0x2b8>)
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800088c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800088e:	6863      	ldr	r3, [r4, #4]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d050      	beq.n	8000936 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000894:	f7ff fe6e 	bl	8000574 <HAL_GetTick>
 8000898:	4606      	mov	r6, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800089a:	4d97      	ldr	r5, [pc, #604]	; (8000af8 <HAL_RCC_OscConfig+0x2b8>)
 800089c:	682b      	ldr	r3, [r5, #0]
 800089e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80008a2:	d114      	bne.n	80008ce <HAL_RCC_OscConfig+0x8e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008a4:	f7ff fe66 	bl	8000574 <HAL_GetTick>
 80008a8:	1b80      	subs	r0, r0, r6
 80008aa:	2864      	cmp	r0, #100	; 0x64
 80008ac:	d9f6      	bls.n	800089c <HAL_RCC_OscConfig+0x5c>
          {
            return HAL_TIMEOUT;
 80008ae:	2003      	movs	r0, #3
 80008b0:	e1ba      	b.n	8000c28 <HAL_RCC_OscConfig+0x3e8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80008b2:	4b91      	ldr	r3, [pc, #580]	; (8000af8 <HAL_RCC_OscConfig+0x2b8>)
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80008ba:	d0d8      	beq.n	800086e <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008bc:	4b8e      	ldr	r3, [pc, #568]	; (8000af8 <HAL_RCC_OscConfig+0x2b8>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80008c4:	d003      	beq.n	80008ce <HAL_RCC_OscConfig+0x8e>
 80008c6:	6863      	ldr	r3, [r4, #4]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	f000 81aa 	beq.w	8000c22 <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008ce:	6823      	ldr	r3, [r4, #0]
 80008d0:	f013 0f02 	tst.w	r3, #2
 80008d4:	d055      	beq.n	8000982 <HAL_RCC_OscConfig+0x142>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80008d6:	4b88      	ldr	r3, [pc, #544]	; (8000af8 <HAL_RCC_OscConfig+0x2b8>)
 80008d8:	689b      	ldr	r3, [r3, #8]
 80008da:	f013 0f0c 	tst.w	r3, #12
 80008de:	d03e      	beq.n	800095e <HAL_RCC_OscConfig+0x11e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80008e0:	4b85      	ldr	r3, [pc, #532]	; (8000af8 <HAL_RCC_OscConfig+0x2b8>)
 80008e2:	689b      	ldr	r3, [r3, #8]
 80008e4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80008e8:	2b08      	cmp	r3, #8
 80008ea:	d033      	beq.n	8000954 <HAL_RCC_OscConfig+0x114>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80008ec:	68e3      	ldr	r3, [r4, #12]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d068      	beq.n	80009c4 <HAL_RCC_OscConfig+0x184>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80008f2:	4b82      	ldr	r3, [pc, #520]	; (8000afc <HAL_RCC_OscConfig+0x2bc>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80008f8:	f7ff fe3c 	bl	8000574 <HAL_GetTick>
 80008fc:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008fe:	4d7e      	ldr	r5, [pc, #504]	; (8000af8 <HAL_RCC_OscConfig+0x2b8>)
 8000900:	682b      	ldr	r3, [r5, #0]
 8000902:	f013 0f02 	tst.w	r3, #2
 8000906:	d154      	bne.n	80009b2 <HAL_RCC_OscConfig+0x172>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000908:	f7ff fe34 	bl	8000574 <HAL_GetTick>
 800090c:	1b80      	subs	r0, r0, r6
 800090e:	2802      	cmp	r0, #2
 8000910:	d9f6      	bls.n	8000900 <HAL_RCC_OscConfig+0xc0>
          {
            return HAL_TIMEOUT;
 8000912:	2003      	movs	r0, #3
 8000914:	e188      	b.n	8000c28 <HAL_RCC_OscConfig+0x3e8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000916:	4a78      	ldr	r2, [pc, #480]	; (8000af8 <HAL_RCC_OscConfig+0x2b8>)
 8000918:	6813      	ldr	r3, [r2, #0]
 800091a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800091e:	6013      	str	r3, [r2, #0]
 8000920:	e7b5      	b.n	800088e <HAL_RCC_OscConfig+0x4e>
 8000922:	4b75      	ldr	r3, [pc, #468]	; (8000af8 <HAL_RCC_OscConfig+0x2b8>)
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	e7ab      	b.n	800088e <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 8000936:	f7ff fe1d 	bl	8000574 <HAL_GetTick>
 800093a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800093c:	4d6e      	ldr	r5, [pc, #440]	; (8000af8 <HAL_RCC_OscConfig+0x2b8>)
 800093e:	682b      	ldr	r3, [r5, #0]
 8000940:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000944:	d0c3      	beq.n	80008ce <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000946:	f7ff fe15 	bl	8000574 <HAL_GetTick>
 800094a:	1b80      	subs	r0, r0, r6
 800094c:	2864      	cmp	r0, #100	; 0x64
 800094e:	d9f6      	bls.n	800093e <HAL_RCC_OscConfig+0xfe>
            return HAL_TIMEOUT;
 8000950:	2003      	movs	r0, #3
 8000952:	e169      	b.n	8000c28 <HAL_RCC_OscConfig+0x3e8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000954:	4b68      	ldr	r3, [pc, #416]	; (8000af8 <HAL_RCC_OscConfig+0x2b8>)
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800095c:	d1c6      	bne.n	80008ec <HAL_RCC_OscConfig+0xac>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800095e:	4b66      	ldr	r3, [pc, #408]	; (8000af8 <HAL_RCC_OscConfig+0x2b8>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f013 0f02 	tst.w	r3, #2
 8000966:	d004      	beq.n	8000972 <HAL_RCC_OscConfig+0x132>
 8000968:	68e3      	ldr	r3, [r4, #12]
 800096a:	2b01      	cmp	r3, #1
 800096c:	d001      	beq.n	8000972 <HAL_RCC_OscConfig+0x132>
        return HAL_ERROR;
 800096e:	2001      	movs	r0, #1
 8000970:	e15a      	b.n	8000c28 <HAL_RCC_OscConfig+0x3e8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000972:	4a61      	ldr	r2, [pc, #388]	; (8000af8 <HAL_RCC_OscConfig+0x2b8>)
 8000974:	6813      	ldr	r3, [r2, #0]
 8000976:	6921      	ldr	r1, [r4, #16]
 8000978:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800097c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000980:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000982:	6823      	ldr	r3, [r4, #0]
 8000984:	f013 0f08 	tst.w	r3, #8
 8000988:	d040      	beq.n	8000a0c <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800098a:	6963      	ldr	r3, [r4, #20]
 800098c:	b363      	cbz	r3, 80009e8 <HAL_RCC_OscConfig+0x1a8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800098e:	4b5c      	ldr	r3, [pc, #368]	; (8000b00 <HAL_RCC_OscConfig+0x2c0>)
 8000990:	2201      	movs	r2, #1
 8000992:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000994:	f7ff fdee 	bl	8000574 <HAL_GetTick>
 8000998:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800099a:	4d57      	ldr	r5, [pc, #348]	; (8000af8 <HAL_RCC_OscConfig+0x2b8>)
 800099c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800099e:	f013 0f02 	tst.w	r3, #2
 80009a2:	d133      	bne.n	8000a0c <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009a4:	f7ff fde6 	bl	8000574 <HAL_GetTick>
 80009a8:	1b80      	subs	r0, r0, r6
 80009aa:	2802      	cmp	r0, #2
 80009ac:	d9f6      	bls.n	800099c <HAL_RCC_OscConfig+0x15c>
        {
          return HAL_TIMEOUT;
 80009ae:	2003      	movs	r0, #3
 80009b0:	e13a      	b.n	8000c28 <HAL_RCC_OscConfig+0x3e8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009b2:	4a51      	ldr	r2, [pc, #324]	; (8000af8 <HAL_RCC_OscConfig+0x2b8>)
 80009b4:	6813      	ldr	r3, [r2, #0]
 80009b6:	6921      	ldr	r1, [r4, #16]
 80009b8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80009bc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80009c0:	6013      	str	r3, [r2, #0]
 80009c2:	e7de      	b.n	8000982 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI_DISABLE();
 80009c4:	4b4d      	ldr	r3, [pc, #308]	; (8000afc <HAL_RCC_OscConfig+0x2bc>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009ca:	f7ff fdd3 	bl	8000574 <HAL_GetTick>
 80009ce:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009d0:	4d49      	ldr	r5, [pc, #292]	; (8000af8 <HAL_RCC_OscConfig+0x2b8>)
 80009d2:	682b      	ldr	r3, [r5, #0]
 80009d4:	f013 0f02 	tst.w	r3, #2
 80009d8:	d0d3      	beq.n	8000982 <HAL_RCC_OscConfig+0x142>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009da:	f7ff fdcb 	bl	8000574 <HAL_GetTick>
 80009de:	1b80      	subs	r0, r0, r6
 80009e0:	2802      	cmp	r0, #2
 80009e2:	d9f6      	bls.n	80009d2 <HAL_RCC_OscConfig+0x192>
            return HAL_TIMEOUT;
 80009e4:	2003      	movs	r0, #3
 80009e6:	e11f      	b.n	8000c28 <HAL_RCC_OscConfig+0x3e8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80009e8:	4b45      	ldr	r3, [pc, #276]	; (8000b00 <HAL_RCC_OscConfig+0x2c0>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009ee:	f7ff fdc1 	bl	8000574 <HAL_GetTick>
 80009f2:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009f4:	4d40      	ldr	r5, [pc, #256]	; (8000af8 <HAL_RCC_OscConfig+0x2b8>)
 80009f6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80009f8:	f013 0f02 	tst.w	r3, #2
 80009fc:	d006      	beq.n	8000a0c <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009fe:	f7ff fdb9 	bl	8000574 <HAL_GetTick>
 8000a02:	1b80      	subs	r0, r0, r6
 8000a04:	2802      	cmp	r0, #2
 8000a06:	d9f6      	bls.n	80009f6 <HAL_RCC_OscConfig+0x1b6>
        {
          return HAL_TIMEOUT;
 8000a08:	2003      	movs	r0, #3
 8000a0a:	e10d      	b.n	8000c28 <HAL_RCC_OscConfig+0x3e8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a0c:	6823      	ldr	r3, [r4, #0]
 8000a0e:	f013 0f04 	tst.w	r3, #4
 8000a12:	d07a      	beq.n	8000b0a <HAL_RCC_OscConfig+0x2ca>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a14:	4b38      	ldr	r3, [pc, #224]	; (8000af8 <HAL_RCC_OscConfig+0x2b8>)
 8000a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a18:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000a1c:	d134      	bne.n	8000a88 <HAL_RCC_OscConfig+0x248>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	9301      	str	r3, [sp, #4]
 8000a22:	4b35      	ldr	r3, [pc, #212]	; (8000af8 <HAL_RCC_OscConfig+0x2b8>)
 8000a24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a26:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a2a:	641a      	str	r2, [r3, #64]	; 0x40
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a32:	9301      	str	r3, [sp, #4]
 8000a34:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000a36:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a38:	4b32      	ldr	r3, [pc, #200]	; (8000b04 <HAL_RCC_OscConfig+0x2c4>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000a40:	d024      	beq.n	8000a8c <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a42:	68a3      	ldr	r3, [r4, #8]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d035      	beq.n	8000ab4 <HAL_RCC_OscConfig+0x274>
 8000a48:	2b05      	cmp	r3, #5
 8000a4a:	d039      	beq.n	8000ac0 <HAL_RCC_OscConfig+0x280>
 8000a4c:	4b2a      	ldr	r3, [pc, #168]	; (8000af8 <HAL_RCC_OscConfig+0x2b8>)
 8000a4e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000a50:	f022 0201 	bic.w	r2, r2, #1
 8000a54:	671a      	str	r2, [r3, #112]	; 0x70
 8000a56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000a58:	f022 0204 	bic.w	r2, r2, #4
 8000a5c:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000a5e:	68a3      	ldr	r3, [r4, #8]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d037      	beq.n	8000ad4 <HAL_RCC_OscConfig+0x294>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000a64:	f7ff fd86 	bl	8000574 <HAL_GetTick>
 8000a68:	4680      	mov	r8, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a6a:	4e23      	ldr	r6, [pc, #140]	; (8000af8 <HAL_RCC_OscConfig+0x2b8>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a6c:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a70:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8000a72:	f013 0f02 	tst.w	r3, #2
 8000a76:	d147      	bne.n	8000b08 <HAL_RCC_OscConfig+0x2c8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a78:	f7ff fd7c 	bl	8000574 <HAL_GetTick>
 8000a7c:	eba0 0008 	sub.w	r0, r0, r8
 8000a80:	42b8      	cmp	r0, r7
 8000a82:	d9f5      	bls.n	8000a70 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8000a84:	2003      	movs	r0, #3
 8000a86:	e0cf      	b.n	8000c28 <HAL_RCC_OscConfig+0x3e8>
    FlagStatus       pwrclkchanged = RESET;
 8000a88:	2500      	movs	r5, #0
 8000a8a:	e7d5      	b.n	8000a38 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a8c:	4a1d      	ldr	r2, [pc, #116]	; (8000b04 <HAL_RCC_OscConfig+0x2c4>)
 8000a8e:	6813      	ldr	r3, [r2, #0]
 8000a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a94:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000a96:	f7ff fd6d 	bl	8000574 <HAL_GetTick>
 8000a9a:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a9c:	4e19      	ldr	r6, [pc, #100]	; (8000b04 <HAL_RCC_OscConfig+0x2c4>)
 8000a9e:	6833      	ldr	r3, [r6, #0]
 8000aa0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000aa4:	d1cd      	bne.n	8000a42 <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000aa6:	f7ff fd65 	bl	8000574 <HAL_GetTick>
 8000aaa:	1bc0      	subs	r0, r0, r7
 8000aac:	2802      	cmp	r0, #2
 8000aae:	d9f6      	bls.n	8000a9e <HAL_RCC_OscConfig+0x25e>
          return HAL_TIMEOUT;
 8000ab0:	2003      	movs	r0, #3
 8000ab2:	e0b9      	b.n	8000c28 <HAL_RCC_OscConfig+0x3e8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ab4:	4a10      	ldr	r2, [pc, #64]	; (8000af8 <HAL_RCC_OscConfig+0x2b8>)
 8000ab6:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6713      	str	r3, [r2, #112]	; 0x70
 8000abe:	e7ce      	b.n	8000a5e <HAL_RCC_OscConfig+0x21e>
 8000ac0:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <HAL_RCC_OscConfig+0x2b8>)
 8000ac2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000ac4:	f042 0204 	orr.w	r2, r2, #4
 8000ac8:	671a      	str	r2, [r3, #112]	; 0x70
 8000aca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000acc:	f042 0201 	orr.w	r2, r2, #1
 8000ad0:	671a      	str	r2, [r3, #112]	; 0x70
 8000ad2:	e7c4      	b.n	8000a5e <HAL_RCC_OscConfig+0x21e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ad4:	f7ff fd4e 	bl	8000574 <HAL_GetTick>
 8000ad8:	4680      	mov	r8, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ada:	4e07      	ldr	r6, [pc, #28]	; (8000af8 <HAL_RCC_OscConfig+0x2b8>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000adc:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ae0:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8000ae2:	f013 0f02 	tst.w	r3, #2
 8000ae6:	d00f      	beq.n	8000b08 <HAL_RCC_OscConfig+0x2c8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ae8:	f7ff fd44 	bl	8000574 <HAL_GetTick>
 8000aec:	eba0 0008 	sub.w	r0, r0, r8
 8000af0:	42b8      	cmp	r0, r7
 8000af2:	d9f5      	bls.n	8000ae0 <HAL_RCC_OscConfig+0x2a0>
        {
          return HAL_TIMEOUT;
 8000af4:	2003      	movs	r0, #3
 8000af6:	e097      	b.n	8000c28 <HAL_RCC_OscConfig+0x3e8>
 8000af8:	40023800 	.word	0x40023800
 8000afc:	42470000 	.word	0x42470000
 8000b00:	42470e80 	.word	0x42470e80
 8000b04:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000b08:	b9ed      	cbnz	r5, 8000b46 <HAL_RCC_OscConfig+0x306>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b0a:	69a3      	ldr	r3, [r4, #24]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	f000 808a 	beq.w	8000c26 <HAL_RCC_OscConfig+0x3e6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000b12:	4a48      	ldr	r2, [pc, #288]	; (8000c34 <HAL_RCC_OscConfig+0x3f4>)
 8000b14:	6892      	ldr	r2, [r2, #8]
 8000b16:	f002 020c 	and.w	r2, r2, #12
 8000b1a:	2a08      	cmp	r2, #8
 8000b1c:	d051      	beq.n	8000bc2 <HAL_RCC_OscConfig+0x382>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b1e:	2b02      	cmp	r3, #2
 8000b20:	d017      	beq.n	8000b52 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b22:	4b45      	ldr	r3, [pc, #276]	; (8000c38 <HAL_RCC_OscConfig+0x3f8>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b28:	f7ff fd24 	bl	8000574 <HAL_GetTick>
 8000b2c:	4605      	mov	r5, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b2e:	4c41      	ldr	r4, [pc, #260]	; (8000c34 <HAL_RCC_OscConfig+0x3f4>)
 8000b30:	6823      	ldr	r3, [r4, #0]
 8000b32:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000b36:	d042      	beq.n	8000bbe <HAL_RCC_OscConfig+0x37e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b38:	f7ff fd1c 	bl	8000574 <HAL_GetTick>
 8000b3c:	1b40      	subs	r0, r0, r5
 8000b3e:	2802      	cmp	r0, #2
 8000b40:	d9f6      	bls.n	8000b30 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8000b42:	2003      	movs	r0, #3
 8000b44:	e070      	b.n	8000c28 <HAL_RCC_OscConfig+0x3e8>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b46:	4a3b      	ldr	r2, [pc, #236]	; (8000c34 <HAL_RCC_OscConfig+0x3f4>)
 8000b48:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000b4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b50:	e7db      	b.n	8000b0a <HAL_RCC_OscConfig+0x2ca>
        __HAL_RCC_PLL_DISABLE();
 8000b52:	4b39      	ldr	r3, [pc, #228]	; (8000c38 <HAL_RCC_OscConfig+0x3f8>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b58:	f7ff fd0c 	bl	8000574 <HAL_GetTick>
 8000b5c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b5e:	4d35      	ldr	r5, [pc, #212]	; (8000c34 <HAL_RCC_OscConfig+0x3f4>)
 8000b60:	682b      	ldr	r3, [r5, #0]
 8000b62:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000b66:	d006      	beq.n	8000b76 <HAL_RCC_OscConfig+0x336>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b68:	f7ff fd04 	bl	8000574 <HAL_GetTick>
 8000b6c:	1b80      	subs	r0, r0, r6
 8000b6e:	2802      	cmp	r0, #2
 8000b70:	d9f6      	bls.n	8000b60 <HAL_RCC_OscConfig+0x320>
            return HAL_TIMEOUT;
 8000b72:	2003      	movs	r0, #3
 8000b74:	e058      	b.n	8000c28 <HAL_RCC_OscConfig+0x3e8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b76:	69e3      	ldr	r3, [r4, #28]
 8000b78:	6a22      	ldr	r2, [r4, #32]
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b7e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000b82:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000b84:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000b88:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000b8a:	0852      	lsrs	r2, r2, #1
 8000b8c:	3a01      	subs	r2, #1
 8000b8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b92:	4a28      	ldr	r2, [pc, #160]	; (8000c34 <HAL_RCC_OscConfig+0x3f4>)
 8000b94:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b96:	4b28      	ldr	r3, [pc, #160]	; (8000c38 <HAL_RCC_OscConfig+0x3f8>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b9c:	f7ff fcea 	bl	8000574 <HAL_GetTick>
 8000ba0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ba2:	4c24      	ldr	r4, [pc, #144]	; (8000c34 <HAL_RCC_OscConfig+0x3f4>)
 8000ba4:	6823      	ldr	r3, [r4, #0]
 8000ba6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000baa:	d106      	bne.n	8000bba <HAL_RCC_OscConfig+0x37a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bac:	f7ff fce2 	bl	8000574 <HAL_GetTick>
 8000bb0:	1b40      	subs	r0, r0, r5
 8000bb2:	2802      	cmp	r0, #2
 8000bb4:	d9f6      	bls.n	8000ba4 <HAL_RCC_OscConfig+0x364>
            return HAL_TIMEOUT;
 8000bb6:	2003      	movs	r0, #3
 8000bb8:	e036      	b.n	8000c28 <HAL_RCC_OscConfig+0x3e8>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000bba:	2000      	movs	r0, #0
 8000bbc:	e034      	b.n	8000c28 <HAL_RCC_OscConfig+0x3e8>
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	e032      	b.n	8000c28 <HAL_RCC_OscConfig+0x3e8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d033      	beq.n	8000c2e <HAL_RCC_OscConfig+0x3ee>
        pll_config = RCC->PLLCFGR;
 8000bc6:	4b1b      	ldr	r3, [pc, #108]	; (8000c34 <HAL_RCC_OscConfig+0x3f4>)
 8000bc8:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000bca:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000bce:	69e2      	ldr	r2, [r4, #28]
 8000bd0:	4291      	cmp	r1, r2
 8000bd2:	d001      	beq.n	8000bd8 <HAL_RCC_OscConfig+0x398>
          return HAL_ERROR;
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	e027      	b.n	8000c28 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000bd8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000bdc:	6a21      	ldr	r1, [r4, #32]
 8000bde:	428a      	cmp	r2, r1
 8000be0:	d001      	beq.n	8000be6 <HAL_RCC_OscConfig+0x3a6>
          return HAL_ERROR;
 8000be2:	2001      	movs	r0, #1
 8000be4:	e020      	b.n	8000c28 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000be6:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000be8:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8000bec:	401a      	ands	r2, r3
 8000bee:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8000bf2:	d001      	beq.n	8000bf8 <HAL_RCC_OscConfig+0x3b8>
          return HAL_ERROR;
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	e017      	b.n	8000c28 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000bf8:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8000bfc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000bfe:	0852      	lsrs	r2, r2, #1
 8000c00:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000c02:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8000c06:	d001      	beq.n	8000c0c <HAL_RCC_OscConfig+0x3cc>
          return HAL_ERROR;
 8000c08:	2001      	movs	r0, #1
 8000c0a:	e00d      	b.n	8000c28 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000c0c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000c0e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000c12:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
    return HAL_ERROR;
 8000c16:	bf14      	ite	ne
 8000c18:	2001      	movne	r0, #1
 8000c1a:	2000      	moveq	r0, #0
 8000c1c:	e004      	b.n	8000c28 <HAL_RCC_OscConfig+0x3e8>
 8000c1e:	2001      	movs	r0, #1
}
 8000c20:	4770      	bx	lr
        return HAL_ERROR;
 8000c22:	2001      	movs	r0, #1
 8000c24:	e000      	b.n	8000c28 <HAL_RCC_OscConfig+0x3e8>
  return HAL_OK;
 8000c26:	2000      	movs	r0, #0
}
 8000c28:	b002      	add	sp, #8
 8000c2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8000c2e:	2001      	movs	r0, #1
 8000c30:	e7fa      	b.n	8000c28 <HAL_RCC_OscConfig+0x3e8>
 8000c32:	bf00      	nop
 8000c34:	40023800 	.word	0x40023800
 8000c38:	42470060 	.word	0x42470060

08000c3c <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8000c3c:	b570      	push	{r4, r5, r6, lr}
 8000c3e:	b088      	sub	sp, #32
 8000c40:	460e      	mov	r6, r1
 8000c42:	4615      	mov	r5, r2
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8000c44:	b308      	cbz	r0, 8000c8a <HAL_RCC_MCOConfig+0x4e>
  else
  {
    assert_param(IS_RCC_MCO2SOURCE(RCC_MCOSource));

    /* MCO2 Clock Enable */
    __MCO2_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	9302      	str	r3, [sp, #8]
 8000c4a:	4c20      	ldr	r4, [pc, #128]	; (8000ccc <HAL_RCC_MCOConfig+0x90>)
 8000c4c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000c4e:	f042 0204 	orr.w	r2, r2, #4
 8000c52:	6322      	str	r2, [r4, #48]	; 0x30
 8000c54:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000c56:	f002 0204 	and.w	r2, r2, #4
 8000c5a:	9202      	str	r2, [sp, #8]
 8000c5c:	9a02      	ldr	r2, [sp, #8]

    /* Configure the MCO2 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO2_PIN;
 8000c5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c62:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2202      	movs	r2, #2
 8000c66:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c68:	2203      	movs	r2, #3
 8000c6a:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000c6e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8000c70:	a903      	add	r1, sp, #12
 8000c72:	4817      	ldr	r0, [pc, #92]	; (8000cd0 <HAL_RCC_MCOConfig+0x94>)
 8000c74:	f7ff fcde 	bl	8000634 <HAL_GPIO_Init>

    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8000c78:	68a2      	ldr	r2, [r4, #8]
 8000c7a:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 8000c7e:	4332      	orrs	r2, r6
 8000c80:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
 8000c84:	60a2      	str	r2, [r4, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8000c86:	b008      	add	sp, #32
 8000c88:	bd70      	pop	{r4, r5, r6, pc}
    __MCO1_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	9301      	str	r3, [sp, #4]
 8000c8e:	4c0f      	ldr	r4, [pc, #60]	; (8000ccc <HAL_RCC_MCOConfig+0x90>)
 8000c90:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000c92:	f042 0201 	orr.w	r2, r2, #1
 8000c96:	6322      	str	r2, [r4, #48]	; 0x30
 8000c98:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000c9a:	f002 0201 	and.w	r2, r2, #1
 8000c9e:	9201      	str	r2, [sp, #4]
 8000ca0:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Pin = MCO1_PIN;
 8000ca2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ca6:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca8:	2202      	movs	r2, #2
 8000caa:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cac:	2203      	movs	r2, #3
 8000cae:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000cb2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8000cb4:	a903      	add	r1, sp, #12
 8000cb6:	4807      	ldr	r0, [pc, #28]	; (8000cd4 <HAL_RCC_MCOConfig+0x98>)
 8000cb8:	f7ff fcbc 	bl	8000634 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8000cbc:	68a2      	ldr	r2, [r4, #8]
 8000cbe:	f022 62ec 	bic.w	r2, r2, #123731968	; 0x7600000
 8000cc2:	4332      	orrs	r2, r6
 8000cc4:	432a      	orrs	r2, r5
 8000cc6:	60a2      	str	r2, [r4, #8]
 8000cc8:	e7dd      	b.n	8000c86 <HAL_RCC_MCOConfig+0x4a>
 8000cca:	bf00      	nop
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40020800 	.word	0x40020800
 8000cd4:	40020000 	.word	0x40020000

08000cd8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000cd8:	4b26      	ldr	r3, [pc, #152]	; (8000d74 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	f003 030c 	and.w	r3, r3, #12
 8000ce0:	2b04      	cmp	r3, #4
 8000ce2:	d003      	beq.n	8000cec <HAL_RCC_GetSysClockFreq+0x14>
 8000ce4:	2b08      	cmp	r3, #8
 8000ce6:	d003      	beq.n	8000cf0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000ce8:	4823      	ldr	r0, [pc, #140]	; (8000d78 <HAL_RCC_GetSysClockFreq+0xa0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000cea:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8000cec:	4823      	ldr	r0, [pc, #140]	; (8000d7c <HAL_RCC_GetSysClockFreq+0xa4>)
 8000cee:	4770      	bx	lr
{
 8000cf0:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000cf4:	4b1f      	ldr	r3, [pc, #124]	; (8000d74 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000cf6:	685a      	ldr	r2, [r3, #4]
 8000cf8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000d02:	d013      	beq.n	8000d2c <HAL_RCC_GetSysClockFreq+0x54>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d04:	4b1b      	ldr	r3, [pc, #108]	; (8000d74 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000d06:	6859      	ldr	r1, [r3, #4]
 8000d08:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	481b      	ldr	r0, [pc, #108]	; (8000d7c <HAL_RCC_GetSysClockFreq+0xa4>)
 8000d10:	fba1 0100 	umull	r0, r1, r1, r0
 8000d14:	f7ff fa60 	bl	80001d8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000d18:	4b16      	ldr	r3, [pc, #88]	; (8000d74 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000d20:	3301      	adds	r3, #1
 8000d22:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000d24:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000d28:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d2c:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8000d34:	461e      	mov	r6, r3
 8000d36:	2700      	movs	r7, #0
 8000d38:	015c      	lsls	r4, r3, #5
 8000d3a:	2500      	movs	r5, #0
 8000d3c:	1ae4      	subs	r4, r4, r3
 8000d3e:	eb65 0507 	sbc.w	r5, r5, r7
 8000d42:	01a9      	lsls	r1, r5, #6
 8000d44:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8000d48:	01a0      	lsls	r0, r4, #6
 8000d4a:	1b00      	subs	r0, r0, r4
 8000d4c:	eb61 0105 	sbc.w	r1, r1, r5
 8000d50:	00cb      	lsls	r3, r1, #3
 8000d52:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000d56:	00c4      	lsls	r4, r0, #3
 8000d58:	19a0      	adds	r0, r4, r6
 8000d5a:	eb43 0107 	adc.w	r1, r3, r7
 8000d5e:	028b      	lsls	r3, r1, #10
 8000d60:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8000d64:	0284      	lsls	r4, r0, #10
 8000d66:	4620      	mov	r0, r4
 8000d68:	4619      	mov	r1, r3
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	f7ff fa34 	bl	80001d8 <__aeabi_uldivmod>
 8000d70:	e7d2      	b.n	8000d18 <HAL_RCC_GetSysClockFreq+0x40>
 8000d72:	bf00      	nop
 8000d74:	40023800 	.word	0x40023800
 8000d78:	00f42400 	.word	0x00f42400
 8000d7c:	017d7840 	.word	0x017d7840

08000d80 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8000d80:	2800      	cmp	r0, #0
 8000d82:	f000 80a1 	beq.w	8000ec8 <HAL_RCC_ClockConfig+0x148>
{
 8000d86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d8a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000d8c:	4b50      	ldr	r3, [pc, #320]	; (8000ed0 <HAL_RCC_ClockConfig+0x150>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f003 0307 	and.w	r3, r3, #7
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d20a      	bcs.n	8000dae <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d98:	b2cb      	uxtb	r3, r1
 8000d9a:	4a4d      	ldr	r2, [pc, #308]	; (8000ed0 <HAL_RCC_ClockConfig+0x150>)
 8000d9c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d9e:	6813      	ldr	r3, [r2, #0]
 8000da0:	f003 0307 	and.w	r3, r3, #7
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d002      	beq.n	8000dae <HAL_RCC_ClockConfig+0x2e>
      return HAL_ERROR;
 8000da8:	2001      	movs	r0, #1
}
 8000daa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000dae:	6823      	ldr	r3, [r4, #0]
 8000db0:	f013 0f02 	tst.w	r3, #2
 8000db4:	d017      	beq.n	8000de6 <HAL_RCC_ClockConfig+0x66>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000db6:	f013 0f04 	tst.w	r3, #4
 8000dba:	d004      	beq.n	8000dc6 <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000dbc:	4a45      	ldr	r2, [pc, #276]	; (8000ed4 <HAL_RCC_ClockConfig+0x154>)
 8000dbe:	6893      	ldr	r3, [r2, #8]
 8000dc0:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000dc4:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000dc6:	6823      	ldr	r3, [r4, #0]
 8000dc8:	f013 0f08 	tst.w	r3, #8
 8000dcc:	d004      	beq.n	8000dd8 <HAL_RCC_ClockConfig+0x58>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000dce:	4a41      	ldr	r2, [pc, #260]	; (8000ed4 <HAL_RCC_ClockConfig+0x154>)
 8000dd0:	6893      	ldr	r3, [r2, #8]
 8000dd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000dd6:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000dd8:	4a3e      	ldr	r2, [pc, #248]	; (8000ed4 <HAL_RCC_ClockConfig+0x154>)
 8000dda:	6893      	ldr	r3, [r2, #8]
 8000ddc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000de0:	68a0      	ldr	r0, [r4, #8]
 8000de2:	4303      	orrs	r3, r0
 8000de4:	6093      	str	r3, [r2, #8]
 8000de6:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000de8:	6823      	ldr	r3, [r4, #0]
 8000dea:	f013 0f01 	tst.w	r3, #1
 8000dee:	d033      	beq.n	8000e58 <HAL_RCC_ClockConfig+0xd8>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000df0:	6862      	ldr	r2, [r4, #4]
 8000df2:	2a01      	cmp	r2, #1
 8000df4:	d022      	beq.n	8000e3c <HAL_RCC_ClockConfig+0xbc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000df6:	1e93      	subs	r3, r2, #2
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d926      	bls.n	8000e4a <HAL_RCC_ClockConfig+0xca>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dfc:	4b35      	ldr	r3, [pc, #212]	; (8000ed4 <HAL_RCC_ClockConfig+0x154>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f013 0f02 	tst.w	r3, #2
 8000e04:	d062      	beq.n	8000ecc <HAL_RCC_ClockConfig+0x14c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e06:	4933      	ldr	r1, [pc, #204]	; (8000ed4 <HAL_RCC_ClockConfig+0x154>)
 8000e08:	688b      	ldr	r3, [r1, #8]
 8000e0a:	f023 0303 	bic.w	r3, r3, #3
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8000e12:	f7ff fbaf 	bl	8000574 <HAL_GetTick>
 8000e16:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e18:	4e2e      	ldr	r6, [pc, #184]	; (8000ed4 <HAL_RCC_ClockConfig+0x154>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e1a:	f241 3788 	movw	r7, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e1e:	68b3      	ldr	r3, [r6, #8]
 8000e20:	f003 030c 	and.w	r3, r3, #12
 8000e24:	6862      	ldr	r2, [r4, #4]
 8000e26:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000e2a:	d015      	beq.n	8000e58 <HAL_RCC_ClockConfig+0xd8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e2c:	f7ff fba2 	bl	8000574 <HAL_GetTick>
 8000e30:	eba0 0008 	sub.w	r0, r0, r8
 8000e34:	42b8      	cmp	r0, r7
 8000e36:	d9f2      	bls.n	8000e1e <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 8000e38:	2003      	movs	r0, #3
 8000e3a:	e7b6      	b.n	8000daa <HAL_RCC_ClockConfig+0x2a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e3c:	4b25      	ldr	r3, [pc, #148]	; (8000ed4 <HAL_RCC_ClockConfig+0x154>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000e44:	d1df      	bne.n	8000e06 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8000e46:	2001      	movs	r0, #1
 8000e48:	e7af      	b.n	8000daa <HAL_RCC_ClockConfig+0x2a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e4a:	4b22      	ldr	r3, [pc, #136]	; (8000ed4 <HAL_RCC_ClockConfig+0x154>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000e52:	d1d8      	bne.n	8000e06 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8000e54:	2001      	movs	r0, #1
 8000e56:	e7a8      	b.n	8000daa <HAL_RCC_ClockConfig+0x2a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000e58:	4b1d      	ldr	r3, [pc, #116]	; (8000ed0 <HAL_RCC_ClockConfig+0x150>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f003 0307 	and.w	r3, r3, #7
 8000e60:	42ab      	cmp	r3, r5
 8000e62:	d909      	bls.n	8000e78 <HAL_RCC_ClockConfig+0xf8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e64:	b2ea      	uxtb	r2, r5
 8000e66:	4b1a      	ldr	r3, [pc, #104]	; (8000ed0 <HAL_RCC_ClockConfig+0x150>)
 8000e68:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f003 0307 	and.w	r3, r3, #7
 8000e70:	42ab      	cmp	r3, r5
 8000e72:	d001      	beq.n	8000e78 <HAL_RCC_ClockConfig+0xf8>
      return HAL_ERROR;
 8000e74:	2001      	movs	r0, #1
 8000e76:	e798      	b.n	8000daa <HAL_RCC_ClockConfig+0x2a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e78:	6823      	ldr	r3, [r4, #0]
 8000e7a:	f013 0f04 	tst.w	r3, #4
 8000e7e:	d006      	beq.n	8000e8e <HAL_RCC_ClockConfig+0x10e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e80:	4a14      	ldr	r2, [pc, #80]	; (8000ed4 <HAL_RCC_ClockConfig+0x154>)
 8000e82:	6893      	ldr	r3, [r2, #8]
 8000e84:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000e88:	68e1      	ldr	r1, [r4, #12]
 8000e8a:	430b      	orrs	r3, r1
 8000e8c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e8e:	6823      	ldr	r3, [r4, #0]
 8000e90:	f013 0f08 	tst.w	r3, #8
 8000e94:	d007      	beq.n	8000ea6 <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000e96:	4a0f      	ldr	r2, [pc, #60]	; (8000ed4 <HAL_RCC_ClockConfig+0x154>)
 8000e98:	6893      	ldr	r3, [r2, #8]
 8000e9a:	6921      	ldr	r1, [r4, #16]
 8000e9c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000ea0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000ea4:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000ea6:	f7ff ff17 	bl	8000cd8 <HAL_RCC_GetSysClockFreq>
 8000eaa:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <HAL_RCC_ClockConfig+0x154>)
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000eb2:	4a09      	ldr	r2, [pc, #36]	; (8000ed8 <HAL_RCC_ClockConfig+0x158>)
 8000eb4:	5cd3      	ldrb	r3, [r2, r3]
 8000eb6:	40d8      	lsrs	r0, r3
 8000eb8:	4b08      	ldr	r3, [pc, #32]	; (8000edc <HAL_RCC_ClockConfig+0x15c>)
 8000eba:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000ebc:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <HAL_RCC_ClockConfig+0x160>)
 8000ebe:	6818      	ldr	r0, [r3, #0]
 8000ec0:	f7ff fb0c 	bl	80004dc <HAL_InitTick>
  return HAL_OK;
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	e770      	b.n	8000daa <HAL_RCC_ClockConfig+0x2a>
    return HAL_ERROR;
 8000ec8:	2001      	movs	r0, #1
}
 8000eca:	4770      	bx	lr
        return HAL_ERROR;
 8000ecc:	2001      	movs	r0, #1
 8000ece:	e76c      	b.n	8000daa <HAL_RCC_ClockConfig+0x2a>
 8000ed0:	40023c00 	.word	0x40023c00
 8000ed4:	40023800 	.word	0x40023800
 8000ed8:	08002264 	.word	0x08002264
 8000edc:	20000008 	.word	0x20000008
 8000ee0:	20000004 	.word	0x20000004

08000ee4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000ee4:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000eec:	4a03      	ldr	r2, [pc, #12]	; (8000efc <HAL_RCC_GetPCLK1Freq+0x18>)
 8000eee:	5cd3      	ldrb	r3, [r2, r3]
 8000ef0:	4a03      	ldr	r2, [pc, #12]	; (8000f00 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000ef2:	6810      	ldr	r0, [r2, #0]
}
 8000ef4:	40d8      	lsrs	r0, r3
 8000ef6:	4770      	bx	lr
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	08002274 	.word	0x08002274
 8000f00:	20000008 	.word	0x20000008

08000f04 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000f04:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000f0c:	4a03      	ldr	r2, [pc, #12]	; (8000f1c <HAL_RCC_GetPCLK2Freq+0x18>)
 8000f0e:	5cd3      	ldrb	r3, [r2, r3]
 8000f10:	4a03      	ldr	r2, [pc, #12]	; (8000f20 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000f12:	6810      	ldr	r0, [r2, #0]
}
 8000f14:	40d8      	lsrs	r0, r3
 8000f16:	4770      	bx	lr
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	08002274 	.word	0x08002274
 8000f20:	20000008 	.word	0x20000008

08000f24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000f24:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8000f28:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000f2a:	6802      	ldr	r2, [r0, #0]
 8000f2c:	6913      	ldr	r3, [r2, #16]
 8000f2e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f32:	68c1      	ldr	r1, [r0, #12]
 8000f34:	430b      	orrs	r3, r1
 8000f36:	6113      	str	r3, [r2, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
 8000f38:	6801      	ldr	r1, [r0, #0]
 8000f3a:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000f3c:	6883      	ldr	r3, [r0, #8]
 8000f3e:	6900      	ldr	r0, [r0, #16]
 8000f40:	4303      	orrs	r3, r0
 8000f42:	6960      	ldr	r0, [r4, #20]
 8000f44:	4303      	orrs	r3, r0
 8000f46:	69e0      	ldr	r0, [r4, #28]
 8000f48:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8000f4a:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 8000f4e:	f022 020c 	bic.w	r2, r2, #12
 8000f52:	4313      	orrs	r3, r2
 8000f54:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000f56:	6822      	ldr	r2, [r4, #0]
 8000f58:	6953      	ldr	r3, [r2, #20]
 8000f5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f5e:	69a1      	ldr	r1, [r4, #24]
 8000f60:	430b      	orrs	r3, r1
 8000f62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000f64:	6823      	ldr	r3, [r4, #0]
 8000f66:	4a38      	ldr	r2, [pc, #224]	; (8001048 <UART_SetConfig+0x124>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d006      	beq.n	8000f7a <UART_SetConfig+0x56>
 8000f6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d002      	beq.n	8000f7a <UART_SetConfig+0x56>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8000f74:	f7ff ffb6 	bl	8000ee4 <HAL_RCC_GetPCLK1Freq>
 8000f78:	e001      	b.n	8000f7e <UART_SetConfig+0x5a>
      pclk = HAL_RCC_GetPCLK2Freq();
 8000f7a:	f7ff ffc3 	bl	8000f04 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000f7e:	69e3      	ldr	r3, [r4, #28]
 8000f80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f84:	d02c      	beq.n	8000fe0 <UART_SetConfig+0xbc>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000f86:	f04f 0900 	mov.w	r9, #0
 8000f8a:	1806      	adds	r6, r0, r0
 8000f8c:	eb49 0709 	adc.w	r7, r9, r9
 8000f90:	eb16 0b00 	adds.w	fp, r6, r0
 8000f94:	eb47 0c09 	adc.w	ip, r7, r9
 8000f98:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8000f9c:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 8000fa0:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 8000fa4:	4693      	mov	fp, r2
 8000fa6:	469c      	mov	ip, r3
 8000fa8:	6863      	ldr	r3, [r4, #4]
 8000faa:	009a      	lsls	r2, r3, #2
 8000fac:	0f9b      	lsrs	r3, r3, #30
 8000fae:	eb10 000b 	adds.w	r0, r0, fp
 8000fb2:	eb49 010c 	adc.w	r1, r9, ip
 8000fb6:	f7ff f90f 	bl	80001d8 <__aeabi_uldivmod>
 8000fba:	6824      	ldr	r4, [r4, #0]
 8000fbc:	4923      	ldr	r1, [pc, #140]	; (800104c <UART_SetConfig+0x128>)
 8000fbe:	fba1 3200 	umull	r3, r2, r1, r0
 8000fc2:	0952      	lsrs	r2, r2, #5
 8000fc4:	2364      	movs	r3, #100	; 0x64
 8000fc6:	fb03 0312 	mls	r3, r3, r2, r0
 8000fca:	011b      	lsls	r3, r3, #4
 8000fcc:	3332      	adds	r3, #50	; 0x32
 8000fce:	fba1 1303 	umull	r1, r3, r1, r3
 8000fd2:	f3c3 1347 	ubfx	r3, r3, #5, #8
 8000fd6:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8000fda:	60a3      	str	r3, [r4, #8]
  }
}
 8000fdc:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8000fe0:	4683      	mov	fp, r0
 8000fe2:	f04f 0c00 	mov.w	ip, #0
 8000fe6:	1806      	adds	r6, r0, r0
 8000fe8:	eb4c 070c 	adc.w	r7, ip, ip
 8000fec:	eb16 0800 	adds.w	r8, r6, r0
 8000ff0:	eb47 090c 	adc.w	r9, r7, ip
 8000ff4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000ff8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000ffc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001000:	4690      	mov	r8, r2
 8001002:	4699      	mov	r9, r3
 8001004:	6862      	ldr	r2, [r4, #4]
 8001006:	2100      	movs	r1, #0
 8001008:	1892      	adds	r2, r2, r2
 800100a:	eb41 0301 	adc.w	r3, r1, r1
 800100e:	eb1b 0008 	adds.w	r0, fp, r8
 8001012:	eb4c 0109 	adc.w	r1, ip, r9
 8001016:	f7ff f8df 	bl	80001d8 <__aeabi_uldivmod>
 800101a:	4d0c      	ldr	r5, [pc, #48]	; (800104c <UART_SetConfig+0x128>)
 800101c:	fba5 3200 	umull	r3, r2, r5, r0
 8001020:	0951      	lsrs	r1, r2, #5
 8001022:	2364      	movs	r3, #100	; 0x64
 8001024:	fb03 0311 	mls	r3, r3, r1, r0
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	3332      	adds	r3, #50	; 0x32
 800102c:	fba5 2303 	umull	r2, r3, r5, r3
 8001030:	095b      	lsrs	r3, r3, #5
 8001032:	6820      	ldr	r0, [r4, #0]
 8001034:	f003 0207 	and.w	r2, r3, #7
 8001038:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001042:	4413      	add	r3, r2
 8001044:	6083      	str	r3, [r0, #8]
 8001046:	e7c9      	b.n	8000fdc <UART_SetConfig+0xb8>
 8001048:	40011000 	.word	0x40011000
 800104c:	51eb851f 	.word	0x51eb851f

08001050 <HAL_UART_MspInit>:
}
 8001050:	4770      	bx	lr

08001052 <HAL_UART_Init>:
  if (huart == NULL)
 8001052:	b358      	cbz	r0, 80010ac <HAL_UART_Init+0x5a>
{
 8001054:	b510      	push	{r4, lr}
 8001056:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001058:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800105c:	b30b      	cbz	r3, 80010a2 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800105e:	2324      	movs	r3, #36	; 0x24
 8001060:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8001064:	6822      	ldr	r2, [r4, #0]
 8001066:	68d3      	ldr	r3, [r2, #12]
 8001068:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800106c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800106e:	4620      	mov	r0, r4
 8001070:	f7ff ff58 	bl	8000f24 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001074:	6822      	ldr	r2, [r4, #0]
 8001076:	6913      	ldr	r3, [r2, #16]
 8001078:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800107c:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800107e:	6822      	ldr	r2, [r4, #0]
 8001080:	6953      	ldr	r3, [r2, #20]
 8001082:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001086:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001088:	6822      	ldr	r2, [r4, #0]
 800108a:	68d3      	ldr	r3, [r2, #12]
 800108c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001090:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001092:	2000      	movs	r0, #0
 8001094:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001096:	2320      	movs	r3, #32
 8001098:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800109c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80010a0:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80010a2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80010a6:	f7ff ffd3 	bl	8001050 <HAL_UART_MspInit>
 80010aa:	e7d8      	b.n	800105e <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80010ac:	2001      	movs	r0, #1
}
 80010ae:	4770      	bx	lr

080010b0 <GCControllerEmulation_Init>:
inline static void GCControllerEmulation_SendControllerState(GCCommand_t);

// Function Implementations //
/* Initializes this module to properly emulate a GC controller */
void GCControllerEmulation_Init()
{
 80010b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010b4:	b08b      	sub	sp, #44	; 0x2c
	/* Setup GC communication */
	// Clocks
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80010b6:	2400      	movs	r4, #0
 80010b8:	9400      	str	r4, [sp, #0]
 80010ba:	4e9a      	ldr	r6, [pc, #616]	; (8001324 <GCControllerEmulation_Init+0x274>)
 80010bc:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80010be:	f043 0302 	orr.w	r3, r3, #2
 80010c2:	6333      	str	r3, [r6, #48]	; 0x30
 80010c4:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	9b00      	ldr	r3, [sp, #0]
	__HAL_RCC_USART1_CLK_ENABLE();
 80010ce:	9401      	str	r4, [sp, #4]
 80010d0:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80010d2:	f043 0310 	orr.w	r3, r3, #16
 80010d6:	6473      	str	r3, [r6, #68]	; 0x44
 80010d8:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80010da:	f003 0310 	and.w	r3, r3, #16
 80010de:	9301      	str	r3, [sp, #4]
 80010e0:	9b01      	ldr	r3, [sp, #4]

	// Init structure
	GPIO_InitTypeDef GPIO_InitStruct_GCControllerEmulation = {0};
 80010e2:	9407      	str	r4, [sp, #28]
 80010e4:	9409      	str	r4, [sp, #36]	; 0x24

	// Stop bit control
	GPIO_InitStruct_GCControllerEmulation.Pin = GC_STOP_PIN_HAL;
 80010e6:	f04f 0a20 	mov.w	sl, #32
 80010ea:	f8cd a014 	str.w	sl, [sp, #20]
	GPIO_InitStruct_GCControllerEmulation.Mode = GPIO_MODE_OUTPUT_OD;
 80010ee:	2311      	movs	r3, #17
 80010f0:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct_GCControllerEmulation.Pull = GPIO_NOPULL;
	GPIO_InitStruct_GCControllerEmulation.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f2:	2503      	movs	r5, #3
 80010f4:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(GC_STOP_PORT, &GPIO_InitStruct_GCControllerEmulation);
 80010f6:	f8df 8240 	ldr.w	r8, [pc, #576]	; 8001338 <GCControllerEmulation_Init+0x288>
 80010fa:	a905      	add	r1, sp, #20
 80010fc:	4640      	mov	r0, r8
 80010fe:	f7ff fa99 	bl	8000634 <HAL_GPIO_Init>
	GC_STOP_PORT->BSRR = GC_STOP_SET;
 8001102:	f8c8 a018 	str.w	sl, [r8, #24]

	// USART1 TX/RX
	GPIO_InitStruct_GCControllerEmulation.Pin = GC_TX_PIN_HAL | GC_RX_PIN_HAL;
 8001106:	23c0      	movs	r3, #192	; 0xc0
 8001108:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct_GCControllerEmulation.Mode = GPIO_MODE_AF_OD;
 800110a:	2312      	movs	r3, #18
 800110c:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct_GCControllerEmulation.Alternate = GPIO_AF7_USART1;
 800110e:	2307      	movs	r3, #7
 8001110:	9309      	str	r3, [sp, #36]	; 0x24
	GPIO_InitStruct_GCControllerEmulation.Pull = GPIO_NOPULL;
 8001112:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct_GCControllerEmulation.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001114:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(GC_TX_PORT, &GPIO_InitStruct_GCControllerEmulation);
 8001116:	a905      	add	r1, sp, #20
 8001118:	4640      	mov	r0, r8
 800111a:	f7ff fa8b 	bl	8000634 <HAL_GPIO_Init>

	// Configure USART1
	huart1.Instance = USART1;
 800111e:	4882      	ldr	r0, [pc, #520]	; (8001328 <GCControllerEmulation_Init+0x278>)
 8001120:	4b82      	ldr	r3, [pc, #520]	; (800132c <GCControllerEmulation_Init+0x27c>)
 8001122:	6003      	str	r3, [r0, #0]
	huart1.Init.BaudRate = 1100000; // 1100000 works
 8001124:	4b82      	ldr	r3, [pc, #520]	; (8001330 <GCControllerEmulation_Init+0x280>)
 8001126:	6043      	str	r3, [r0, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001128:	6084      	str	r4, [r0, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800112a:	60c4      	str	r4, [r0, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800112c:	6104      	str	r4, [r0, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800112e:	230c      	movs	r3, #12
 8001130:	6143      	str	r3, [r0, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001132:	6184      	str	r4, [r0, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001134:	f44f 4900 	mov.w	r9, #32768	; 0x8000
 8001138:	f8c0 901c 	str.w	r9, [r0, #28]
	HAL_UART_Init(&huart1);
 800113c:	f7ff ff89 	bl	8001052 <HAL_UART_Init>

	// Default command state from console
	command = GC_COMMAND_UNKNOWN;

	/* Setup buttons */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001140:	9402      	str	r4, [sp, #8]
 8001142:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	6333      	str	r3, [r6, #48]	; 0x30
 800114a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800114c:	f003 0301 	and.w	r3, r3, #1
 8001150:	9302      	str	r3, [sp, #8]
 8001152:	9b02      	ldr	r3, [sp, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001154:	9403      	str	r4, [sp, #12]
 8001156:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001158:	f043 0302 	orr.w	r3, r3, #2
 800115c:	6333      	str	r3, [r6, #48]	; 0x30
 800115e:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001160:	f003 0302 	and.w	r3, r3, #2
 8001164:	9303      	str	r3, [sp, #12]
 8001166:	9b03      	ldr	r3, [sp, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001168:	9404      	str	r4, [sp, #16]
 800116a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800116c:	f043 0304 	orr.w	r3, r3, #4
 8001170:	6333      	str	r3, [r6, #48]	; 0x30
 8001172:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001174:	f003 0304 	and.w	r3, r3, #4
 8001178:	9304      	str	r3, [sp, #16]
 800117a:	9b04      	ldr	r3, [sp, #16]

	// A Button
	GPIO_InitStruct_GCControllerEmulation.Pin = BUTTON_A_PIN_HAL;
 800117c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001180:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct_GCControllerEmulation.Mode = GPIO_MODE_INPUT;
 8001182:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct_GCControllerEmulation.Pull = GPIO_PULLUP;
 8001184:	2601      	movs	r6, #1
 8001186:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct_GCControllerEmulation.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001188:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(BUTTON_A_PORT, &GPIO_InitStruct_GCControllerEmulation);
 800118a:	a905      	add	r1, sp, #20
 800118c:	4640      	mov	r0, r8
 800118e:	f7ff fa51 	bl	8000634 <HAL_GPIO_Init>

	// B Button
	GPIO_InitStruct_GCControllerEmulation.Pin = BUTTON_B_PIN_HAL;
 8001192:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001196:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct_GCControllerEmulation.Mode = GPIO_MODE_INPUT;
 8001198:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct_GCControllerEmulation.Pull = GPIO_PULLUP;
 800119a:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct_GCControllerEmulation.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119c:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(BUTTON_B_PORT, &GPIO_InitStruct_GCControllerEmulation);
 800119e:	a905      	add	r1, sp, #20
 80011a0:	4640      	mov	r0, r8
 80011a2:	f7ff fa47 	bl	8000634 <HAL_GPIO_Init>

	// X Button
	GPIO_InitStruct_GCControllerEmulation.Pin = BUTTON_X_PIN_HAL;
 80011a6:	f44f 4780 	mov.w	r7, #16384	; 0x4000
 80011aa:	9705      	str	r7, [sp, #20]
	GPIO_InitStruct_GCControllerEmulation.Mode = GPIO_MODE_INPUT;
 80011ac:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct_GCControllerEmulation.Pull = GPIO_PULLUP;
 80011ae:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct_GCControllerEmulation.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b0:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(BUTTON_X_PORT, &GPIO_InitStruct_GCControllerEmulation);
 80011b2:	a905      	add	r1, sp, #20
 80011b4:	4640      	mov	r0, r8
 80011b6:	f7ff fa3d 	bl	8000634 <HAL_GPIO_Init>

	// Y Button
	GPIO_InitStruct_GCControllerEmulation.Pin = BUTTON_Y_PIN_HAL;
 80011ba:	f8cd 9014 	str.w	r9, [sp, #20]
	GPIO_InitStruct_GCControllerEmulation.Mode = GPIO_MODE_INPUT;
 80011be:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct_GCControllerEmulation.Pull = GPIO_PULLUP;
 80011c0:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct_GCControllerEmulation.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c2:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(BUTTON_Y_PORT, &GPIO_InitStruct_GCControllerEmulation);
 80011c4:	a905      	add	r1, sp, #20
 80011c6:	4640      	mov	r0, r8
 80011c8:	f7ff fa34 	bl	8000634 <HAL_GPIO_Init>

	// L Button
	GPIO_InitStruct_GCControllerEmulation.Pin = BUTTON_L_PIN_HAL;
 80011cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011d0:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct_GCControllerEmulation.Mode = GPIO_MODE_INPUT;
 80011d2:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct_GCControllerEmulation.Pull = GPIO_PULLUP;
 80011d4:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct_GCControllerEmulation.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d6:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(BUTTON_L_PORT, &GPIO_InitStruct_GCControllerEmulation);
 80011d8:	a905      	add	r1, sp, #20
 80011da:	4856      	ldr	r0, [pc, #344]	; (8001334 <GCControllerEmulation_Init+0x284>)
 80011dc:	f7ff fa2a 	bl	8000634 <HAL_GPIO_Init>

	// R Button
	GPIO_InitStruct_GCControllerEmulation.Pin = BUTTON_R_PIN_HAL;
 80011e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011e4:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct_GCControllerEmulation.Mode = GPIO_MODE_INPUT;
 80011e6:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct_GCControllerEmulation.Pull = GPIO_PULLUP;
 80011e8:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct_GCControllerEmulation.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ea:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(BUTTON_R_PORT, &GPIO_InitStruct_GCControllerEmulation);
 80011ec:	a905      	add	r1, sp, #20
 80011ee:	4851      	ldr	r0, [pc, #324]	; (8001334 <GCControllerEmulation_Init+0x284>)
 80011f0:	f7ff fa20 	bl	8000634 <HAL_GPIO_Init>

	// Z Button
	GPIO_InitStruct_GCControllerEmulation.Pin = BUTTON_Z_PIN_HAL;
 80011f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011f8:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct_GCControllerEmulation.Mode = GPIO_MODE_INPUT;
 80011fa:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct_GCControllerEmulation.Pull = GPIO_PULLUP;
 80011fc:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct_GCControllerEmulation.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fe:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(BUTTON_Z_PORT, &GPIO_InitStruct_GCControllerEmulation);
 8001200:	a905      	add	r1, sp, #20
 8001202:	484c      	ldr	r0, [pc, #304]	; (8001334 <GCControllerEmulation_Init+0x284>)
 8001204:	f7ff fa16 	bl	8000634 <HAL_GPIO_Init>

	// START Button
	GPIO_InitStruct_GCControllerEmulation.Pin = BUTTON_START_PIN_HAL;
 8001208:	f44f 6b00 	mov.w	fp, #2048	; 0x800
 800120c:	f8cd b014 	str.w	fp, [sp, #20]
	GPIO_InitStruct_GCControllerEmulation.Mode = GPIO_MODE_INPUT;
 8001210:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct_GCControllerEmulation.Pull = GPIO_PULLUP;
 8001212:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct_GCControllerEmulation.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001214:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(BUTTON_START_PORT, &GPIO_InitStruct_GCControllerEmulation);
 8001216:	a905      	add	r1, sp, #20
 8001218:	4846      	ldr	r0, [pc, #280]	; (8001334 <GCControllerEmulation_Init+0x284>)
 800121a:	f7ff fa0b 	bl	8000634 <HAL_GPIO_Init>

	// DU Button
	GPIO_InitStruct_GCControllerEmulation.Pin = BUTTON_DU_PIN_HAL;
 800121e:	f8cd a014 	str.w	sl, [sp, #20]
	GPIO_InitStruct_GCControllerEmulation.Mode = GPIO_MODE_INPUT;
 8001222:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct_GCControllerEmulation.Pull = GPIO_PULLUP;
 8001224:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct_GCControllerEmulation.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001226:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(BUTTON_DU_PORT, &GPIO_InitStruct_GCControllerEmulation);
 8001228:	a905      	add	r1, sp, #20
 800122a:	4842      	ldr	r0, [pc, #264]	; (8001334 <GCControllerEmulation_Init+0x284>)
 800122c:	f7ff fa02 	bl	8000634 <HAL_GPIO_Init>

	// DD Button
	GPIO_InitStruct_GCControllerEmulation.Pin = BUTTON_DD_PIN_HAL;
 8001230:	2310      	movs	r3, #16
 8001232:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct_GCControllerEmulation.Mode = GPIO_MODE_INPUT;
 8001234:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct_GCControllerEmulation.Pull = GPIO_PULLUP;
 8001236:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct_GCControllerEmulation.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001238:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(BUTTON_DD_PORT, &GPIO_InitStruct_GCControllerEmulation);
 800123a:	a905      	add	r1, sp, #20
 800123c:	483d      	ldr	r0, [pc, #244]	; (8001334 <GCControllerEmulation_Init+0x284>)
 800123e:	f7ff f9f9 	bl	8000634 <HAL_GPIO_Init>

	// DL Button
	GPIO_InitStruct_GCControllerEmulation.Pin = BUTTON_DL_PIN_HAL;
 8001242:	f04f 0a02 	mov.w	sl, #2
 8001246:	f8cd a014 	str.w	sl, [sp, #20]
	GPIO_InitStruct_GCControllerEmulation.Mode = GPIO_MODE_INPUT;
 800124a:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct_GCControllerEmulation.Pull = GPIO_PULLUP;
 800124c:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct_GCControllerEmulation.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124e:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(BUTTON_DL_PORT, &GPIO_InitStruct_GCControllerEmulation);
 8001250:	a905      	add	r1, sp, #20
 8001252:	4838      	ldr	r0, [pc, #224]	; (8001334 <GCControllerEmulation_Init+0x284>)
 8001254:	f7ff f9ee 	bl	8000634 <HAL_GPIO_Init>

	// DR Button
	GPIO_InitStruct_GCControllerEmulation.Pin = BUTTON_DR_PIN_HAL;
 8001258:	9605      	str	r6, [sp, #20]
	GPIO_InitStruct_GCControllerEmulation.Mode = GPIO_MODE_INPUT;
 800125a:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct_GCControllerEmulation.Pull = GPIO_PULLUP;
 800125c:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct_GCControllerEmulation.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125e:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(BUTTON_DR_PORT, &GPIO_InitStruct_GCControllerEmulation);
 8001260:	a905      	add	r1, sp, #20
 8001262:	4834      	ldr	r0, [pc, #208]	; (8001334 <GCControllerEmulation_Init+0x284>)
 8001264:	f7ff f9e6 	bl	8000634 <HAL_GPIO_Init>

	// LSU Button
	GPIO_InitStruct_GCControllerEmulation.Pin = BUTTON_LSU_PIN_HAL;
 8001268:	f8cd a014 	str.w	sl, [sp, #20]
	GPIO_InitStruct_GCControllerEmulation.Mode = GPIO_MODE_INPUT;
 800126c:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct_GCControllerEmulation.Pull = GPIO_PULLUP;
 800126e:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct_GCControllerEmulation.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001270:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(BUTTON_LSU_PORT, &GPIO_InitStruct_GCControllerEmulation);
 8001272:	a905      	add	r1, sp, #20
 8001274:	4640      	mov	r0, r8
 8001276:	f7ff f9dd 	bl	8000634 <HAL_GPIO_Init>

	// LSD Button
	GPIO_InitStruct_GCControllerEmulation.Pin = BUTTON_LSD_PIN_HAL;
 800127a:	9605      	str	r6, [sp, #20]
	GPIO_InitStruct_GCControllerEmulation.Mode = GPIO_MODE_INPUT;
 800127c:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct_GCControllerEmulation.Pull = GPIO_PULLUP;
 800127e:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct_GCControllerEmulation.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001280:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(BUTTON_LSD_PORT, &GPIO_InitStruct_GCControllerEmulation);
 8001282:	a905      	add	r1, sp, #20
 8001284:	4640      	mov	r0, r8
 8001286:	f7ff f9d5 	bl	8000634 <HAL_GPIO_Init>

	// LSL Button
	GPIO_InitStruct_GCControllerEmulation.Pin = BUTTON_LSL_PIN_HAL;
 800128a:	2380      	movs	r3, #128	; 0x80
 800128c:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct_GCControllerEmulation.Mode = GPIO_MODE_INPUT;
 800128e:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct_GCControllerEmulation.Pull = GPIO_PULLUP;
 8001290:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct_GCControllerEmulation.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001292:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(BUTTON_LSL_PORT, &GPIO_InitStruct_GCControllerEmulation);
 8001294:	a905      	add	r1, sp, #20
 8001296:	4827      	ldr	r0, [pc, #156]	; (8001334 <GCControllerEmulation_Init+0x284>)
 8001298:	f7ff f9cc 	bl	8000634 <HAL_GPIO_Init>

	// LSR Button
	GPIO_InitStruct_GCControllerEmulation.Pin = BUTTON_LSR_PIN_HAL;
 800129c:	2340      	movs	r3, #64	; 0x40
 800129e:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct_GCControllerEmulation.Mode = GPIO_MODE_INPUT;
 80012a0:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct_GCControllerEmulation.Pull = GPIO_PULLUP;
 80012a2:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct_GCControllerEmulation.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a4:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(BUTTON_LSR_PORT, &GPIO_InitStruct_GCControllerEmulation);
 80012a6:	a905      	add	r1, sp, #20
 80012a8:	4822      	ldr	r0, [pc, #136]	; (8001334 <GCControllerEmulation_Init+0x284>)
 80012aa:	f7ff f9c3 	bl	8000634 <HAL_GPIO_Init>

	// CU Button
	GPIO_InitStruct_GCControllerEmulation.Pin = BUTTON_CU_PIN_HAL;
 80012ae:	f8cd b014 	str.w	fp, [sp, #20]
	GPIO_InitStruct_GCControllerEmulation.Mode = GPIO_MODE_INPUT;
 80012b2:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct_GCControllerEmulation.Pull = GPIO_PULLUP;
 80012b4:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct_GCControllerEmulation.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b6:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(BUTTON_CU_PORT, &GPIO_InitStruct_GCControllerEmulation);
 80012b8:	a905      	add	r1, sp, #20
 80012ba:	481e      	ldr	r0, [pc, #120]	; (8001334 <GCControllerEmulation_Init+0x284>)
 80012bc:	f7ff f9ba 	bl	8000634 <HAL_GPIO_Init>

	// CD Button
	GPIO_InitStruct_GCControllerEmulation.Pin = BUTTON_CD_PIN_HAL;
 80012c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c4:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct_GCControllerEmulation.Mode = GPIO_MODE_INPUT;
 80012c6:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct_GCControllerEmulation.Pull = GPIO_PULLUP;
 80012c8:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct_GCControllerEmulation.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ca:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(BUTTON_CD_PORT, &GPIO_InitStruct_GCControllerEmulation);
 80012cc:	a905      	add	r1, sp, #20
 80012ce:	4819      	ldr	r0, [pc, #100]	; (8001334 <GCControllerEmulation_Init+0x284>)
 80012d0:	f7ff f9b0 	bl	8000634 <HAL_GPIO_Init>

	// CL Button
	GPIO_InitStruct_GCControllerEmulation.Pin = BUTTON_CL_PIN_HAL;
 80012d4:	2308      	movs	r3, #8
 80012d6:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct_GCControllerEmulation.Mode = GPIO_MODE_INPUT;
 80012d8:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct_GCControllerEmulation.Pull = GPIO_PULLUP;
 80012da:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct_GCControllerEmulation.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012dc:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(BUTTON_CL_PORT, &GPIO_InitStruct_GCControllerEmulation);
 80012de:	a905      	add	r1, sp, #20
 80012e0:	4640      	mov	r0, r8
 80012e2:	f7ff f9a7 	bl	8000634 <HAL_GPIO_Init>

	// CR Button
	GPIO_InitStruct_GCControllerEmulation.Pin = BUTTON_CR_PIN_HAL;
 80012e6:	2310      	movs	r3, #16
 80012e8:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct_GCControllerEmulation.Mode = GPIO_MODE_INPUT;
 80012ea:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct_GCControllerEmulation.Pull = GPIO_PULLUP;
 80012ec:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct_GCControllerEmulation.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ee:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(BUTTON_CR_PORT, &GPIO_InitStruct_GCControllerEmulation);
 80012f0:	a905      	add	r1, sp, #20
 80012f2:	4640      	mov	r0, r8
 80012f4:	f7ff f99e 	bl	8000634 <HAL_GPIO_Init>

	// MACRO Button
	GPIO_InitStruct_GCControllerEmulation.Pin = BUTTON_MACRO_PIN_HAL;
 80012f8:	f8cd 9014 	str.w	r9, [sp, #20]
	GPIO_InitStruct_GCControllerEmulation.Mode = GPIO_MODE_INPUT;
 80012fc:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct_GCControllerEmulation.Pull = GPIO_PULLUP;
 80012fe:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct_GCControllerEmulation.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001300:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(BUTTON_MACRO_PORT, &GPIO_InitStruct_GCControllerEmulation);
 8001302:	f508 6880 	add.w	r8, r8, #1024	; 0x400
 8001306:	a905      	add	r1, sp, #20
 8001308:	4640      	mov	r0, r8
 800130a:	f7ff f993 	bl	8000634 <HAL_GPIO_Init>

	// TILT_X Button
	GPIO_InitStruct_GCControllerEmulation.Pin = BUTTON_TILT_X_PIN_HAL;
 800130e:	9705      	str	r7, [sp, #20]
	GPIO_InitStruct_GCControllerEmulation.Mode = GPIO_MODE_INPUT;
 8001310:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct_GCControllerEmulation.Pull = GPIO_PULLUP;
 8001312:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct_GCControllerEmulation.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001314:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(BUTTON_TILT_X_PORT, &GPIO_InitStruct_GCControllerEmulation);
 8001316:	a905      	add	r1, sp, #20
 8001318:	4640      	mov	r0, r8
 800131a:	f7ff f98b 	bl	8000634 <HAL_GPIO_Init>
//	GPIO_InitStruct_GCControllerEmulation.Pin = BUTTON_TILT_Y_PIN_HAL;
//	GPIO_InitStruct_GCControllerEmulation.Mode = GPIO_MODE_INPUT;
//	GPIO_InitStruct_GCControllerEmulation.Pull = GPIO_PULLUP;
//	GPIO_InitStruct_GCControllerEmulation.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
//	HAL_GPIO_Init(BUTTON_TILT_Y_PORT, &GPIO_InitStruct_GCControllerEmulation);
}
 800131e:	b00b      	add	sp, #44	; 0x2c
 8001320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001324:	40023800 	.word	0x40023800
 8001328:	20000040 	.word	0x20000040
 800132c:	40011000 	.word	0x40011000
 8001330:	0010c8e0 	.word	0x0010c8e0
 8001334:	40020000 	.word	0x40020000
 8001338:	40020400 	.word	0x40020400

0800133c <GCControllerEmulation_GetButtonState>:
	}
}

// Private Function Implementations //
ButtonState_t GCControllerEmulation_GetButtonState(GCButtonInput_t gcButton)
{
 800133c:	b508      	push	{r3, lr}
	ButtonState_t gcButtonState = RELEASED;

	switch(gcButton)
 800133e:	2816      	cmp	r0, #22
 8001340:	f200 808e 	bhi.w	8001460 <GCControllerEmulation_GetButtonState+0x124>
 8001344:	e8df f000 	tbb	[pc, r0]
 8001348:	1e18120c 	.word	0x1e18120c
 800134c:	36302a24 	.word	0x36302a24
 8001350:	4b46413c 	.word	0x4b46413c
 8001354:	5f5a5550 	.word	0x5f5a5550
 8001358:	75706a64 	.word	0x75706a64
 800135c:	807a      	.short	0x807a
 800135e:	86          	.byte	0x86
 800135f:	00          	.byte	0x00
	{
		case GC_A:
			gcButtonState = (ButtonState_t)HAL_GPIO_ReadPin(BUTTON_A_PORT, BUTTON_A_PIN_HAL);
 8001360:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001364:	483f      	ldr	r0, [pc, #252]	; (8001464 <GCControllerEmulation_GetButtonState+0x128>)
 8001366:	f7ff fa55 	bl	8000814 <HAL_GPIO_ReadPin>
		default:
			break;
	}

	return gcButtonState;
}
 800136a:	bd08      	pop	{r3, pc}
			gcButtonState = (ButtonState_t)HAL_GPIO_ReadPin(BUTTON_B_PORT, BUTTON_B_PIN_HAL);
 800136c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001370:	483c      	ldr	r0, [pc, #240]	; (8001464 <GCControllerEmulation_GetButtonState+0x128>)
 8001372:	f7ff fa4f 	bl	8000814 <HAL_GPIO_ReadPin>
			break;
 8001376:	e7f8      	b.n	800136a <GCControllerEmulation_GetButtonState+0x2e>
			gcButtonState = (ButtonState_t)HAL_GPIO_ReadPin(BUTTON_X_PORT, BUTTON_X_PIN_HAL);
 8001378:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800137c:	4839      	ldr	r0, [pc, #228]	; (8001464 <GCControllerEmulation_GetButtonState+0x128>)
 800137e:	f7ff fa49 	bl	8000814 <HAL_GPIO_ReadPin>
			break;
 8001382:	e7f2      	b.n	800136a <GCControllerEmulation_GetButtonState+0x2e>
			gcButtonState = (ButtonState_t)HAL_GPIO_ReadPin(BUTTON_Y_PORT, BUTTON_Y_PIN_HAL);
 8001384:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001388:	4836      	ldr	r0, [pc, #216]	; (8001464 <GCControllerEmulation_GetButtonState+0x128>)
 800138a:	f7ff fa43 	bl	8000814 <HAL_GPIO_ReadPin>
			break;
 800138e:	e7ec      	b.n	800136a <GCControllerEmulation_GetButtonState+0x2e>
			gcButtonState = (ButtonState_t)HAL_GPIO_ReadPin(BUTTON_L_PORT, BUTTON_L_PIN_HAL);
 8001390:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001394:	4834      	ldr	r0, [pc, #208]	; (8001468 <GCControllerEmulation_GetButtonState+0x12c>)
 8001396:	f7ff fa3d 	bl	8000814 <HAL_GPIO_ReadPin>
			break;
 800139a:	e7e6      	b.n	800136a <GCControllerEmulation_GetButtonState+0x2e>
			gcButtonState = (ButtonState_t)HAL_GPIO_ReadPin(BUTTON_R_PORT, BUTTON_R_PIN_HAL);
 800139c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013a0:	4831      	ldr	r0, [pc, #196]	; (8001468 <GCControllerEmulation_GetButtonState+0x12c>)
 80013a2:	f7ff fa37 	bl	8000814 <HAL_GPIO_ReadPin>
			break;
 80013a6:	e7e0      	b.n	800136a <GCControllerEmulation_GetButtonState+0x2e>
			gcButtonState = (ButtonState_t)HAL_GPIO_ReadPin(BUTTON_Z_PORT, BUTTON_Z_PIN_HAL);
 80013a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013ac:	482e      	ldr	r0, [pc, #184]	; (8001468 <GCControllerEmulation_GetButtonState+0x12c>)
 80013ae:	f7ff fa31 	bl	8000814 <HAL_GPIO_ReadPin>
			break;
 80013b2:	e7da      	b.n	800136a <GCControllerEmulation_GetButtonState+0x2e>
			gcButtonState = (ButtonState_t)HAL_GPIO_ReadPin(BUTTON_START_PORT, BUTTON_START_PIN_HAL);
 80013b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013b8:	482b      	ldr	r0, [pc, #172]	; (8001468 <GCControllerEmulation_GetButtonState+0x12c>)
 80013ba:	f7ff fa2b 	bl	8000814 <HAL_GPIO_ReadPin>
			break;
 80013be:	e7d4      	b.n	800136a <GCControllerEmulation_GetButtonState+0x2e>
			gcButtonState = (ButtonState_t)HAL_GPIO_ReadPin(BUTTON_DU_PORT, BUTTON_DU_PIN_HAL);
 80013c0:	2120      	movs	r1, #32
 80013c2:	4829      	ldr	r0, [pc, #164]	; (8001468 <GCControllerEmulation_GetButtonState+0x12c>)
 80013c4:	f7ff fa26 	bl	8000814 <HAL_GPIO_ReadPin>
			break;
 80013c8:	e7cf      	b.n	800136a <GCControllerEmulation_GetButtonState+0x2e>
			gcButtonState = (ButtonState_t)HAL_GPIO_ReadPin(BUTTON_DD_PORT, BUTTON_DD_PIN_HAL);
 80013ca:	2110      	movs	r1, #16
 80013cc:	4826      	ldr	r0, [pc, #152]	; (8001468 <GCControllerEmulation_GetButtonState+0x12c>)
 80013ce:	f7ff fa21 	bl	8000814 <HAL_GPIO_ReadPin>
			break;
 80013d2:	e7ca      	b.n	800136a <GCControllerEmulation_GetButtonState+0x2e>
			gcButtonState = (ButtonState_t)HAL_GPIO_ReadPin(BUTTON_DL_PORT, BUTTON_DL_PIN_HAL);
 80013d4:	2102      	movs	r1, #2
 80013d6:	4824      	ldr	r0, [pc, #144]	; (8001468 <GCControllerEmulation_GetButtonState+0x12c>)
 80013d8:	f7ff fa1c 	bl	8000814 <HAL_GPIO_ReadPin>
			break;
 80013dc:	e7c5      	b.n	800136a <GCControllerEmulation_GetButtonState+0x2e>
			gcButtonState = (ButtonState_t)HAL_GPIO_ReadPin(BUTTON_DR_PORT, BUTTON_DR_PIN_HAL);
 80013de:	2101      	movs	r1, #1
 80013e0:	4821      	ldr	r0, [pc, #132]	; (8001468 <GCControllerEmulation_GetButtonState+0x12c>)
 80013e2:	f7ff fa17 	bl	8000814 <HAL_GPIO_ReadPin>
			break;
 80013e6:	e7c0      	b.n	800136a <GCControllerEmulation_GetButtonState+0x2e>
			gcButtonState = (ButtonState_t)HAL_GPIO_ReadPin(BUTTON_LSU_PORT, BUTTON_LSU_PIN_HAL);
 80013e8:	2102      	movs	r1, #2
 80013ea:	481e      	ldr	r0, [pc, #120]	; (8001464 <GCControllerEmulation_GetButtonState+0x128>)
 80013ec:	f7ff fa12 	bl	8000814 <HAL_GPIO_ReadPin>
			break;
 80013f0:	e7bb      	b.n	800136a <GCControllerEmulation_GetButtonState+0x2e>
			gcButtonState = (ButtonState_t)HAL_GPIO_ReadPin(BUTTON_LSD_PORT, BUTTON_LSD_PIN_HAL);
 80013f2:	2101      	movs	r1, #1
 80013f4:	481b      	ldr	r0, [pc, #108]	; (8001464 <GCControllerEmulation_GetButtonState+0x128>)
 80013f6:	f7ff fa0d 	bl	8000814 <HAL_GPIO_ReadPin>
			break;
 80013fa:	e7b6      	b.n	800136a <GCControllerEmulation_GetButtonState+0x2e>
			gcButtonState = (ButtonState_t)HAL_GPIO_ReadPin(BUTTON_LSL_PORT, BUTTON_LSL_PIN_HAL);
 80013fc:	2180      	movs	r1, #128	; 0x80
 80013fe:	481a      	ldr	r0, [pc, #104]	; (8001468 <GCControllerEmulation_GetButtonState+0x12c>)
 8001400:	f7ff fa08 	bl	8000814 <HAL_GPIO_ReadPin>
			break;
 8001404:	e7b1      	b.n	800136a <GCControllerEmulation_GetButtonState+0x2e>
			gcButtonState = (ButtonState_t)HAL_GPIO_ReadPin(BUTTON_LSR_PORT, BUTTON_LSR_PIN_HAL);
 8001406:	2140      	movs	r1, #64	; 0x40
 8001408:	4817      	ldr	r0, [pc, #92]	; (8001468 <GCControllerEmulation_GetButtonState+0x12c>)
 800140a:	f7ff fa03 	bl	8000814 <HAL_GPIO_ReadPin>
			break;
 800140e:	e7ac      	b.n	800136a <GCControllerEmulation_GetButtonState+0x2e>
			gcButtonState = (ButtonState_t)HAL_GPIO_ReadPin(BUTTON_CU_PORT, BUTTON_CU_PIN_HAL);
 8001410:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001414:	4814      	ldr	r0, [pc, #80]	; (8001468 <GCControllerEmulation_GetButtonState+0x12c>)
 8001416:	f7ff f9fd 	bl	8000814 <HAL_GPIO_ReadPin>
			break;
 800141a:	e7a6      	b.n	800136a <GCControllerEmulation_GetButtonState+0x2e>
			gcButtonState = (ButtonState_t)HAL_GPIO_ReadPin(BUTTON_CD_PORT, BUTTON_CD_PIN_HAL);
 800141c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001420:	4811      	ldr	r0, [pc, #68]	; (8001468 <GCControllerEmulation_GetButtonState+0x12c>)
 8001422:	f7ff f9f7 	bl	8000814 <HAL_GPIO_ReadPin>
			break;
 8001426:	e7a0      	b.n	800136a <GCControllerEmulation_GetButtonState+0x2e>
			gcButtonState = (ButtonState_t)HAL_GPIO_ReadPin(BUTTON_CL_PORT, BUTTON_CL_PIN_HAL);
 8001428:	2108      	movs	r1, #8
 800142a:	480e      	ldr	r0, [pc, #56]	; (8001464 <GCControllerEmulation_GetButtonState+0x128>)
 800142c:	f7ff f9f2 	bl	8000814 <HAL_GPIO_ReadPin>
			break;
 8001430:	e79b      	b.n	800136a <GCControllerEmulation_GetButtonState+0x2e>
			gcButtonState = (ButtonState_t)HAL_GPIO_ReadPin(BUTTON_CR_PORT, BUTTON_CR_PIN_HAL);
 8001432:	2110      	movs	r1, #16
 8001434:	480b      	ldr	r0, [pc, #44]	; (8001464 <GCControllerEmulation_GetButtonState+0x128>)
 8001436:	f7ff f9ed 	bl	8000814 <HAL_GPIO_ReadPin>
			break;
 800143a:	e796      	b.n	800136a <GCControllerEmulation_GetButtonState+0x2e>
			gcButtonState = (ButtonState_t)HAL_GPIO_ReadPin(BUTTON_MACRO_PORT, BUTTON_MACRO_PIN_HAL);
 800143c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001440:	480a      	ldr	r0, [pc, #40]	; (800146c <GCControllerEmulation_GetButtonState+0x130>)
 8001442:	f7ff f9e7 	bl	8000814 <HAL_GPIO_ReadPin>
			break;
 8001446:	e790      	b.n	800136a <GCControllerEmulation_GetButtonState+0x2e>
			gcButtonState = (ButtonState_t)HAL_GPIO_ReadPin(BUTTON_TILT_X_PORT, BUTTON_TILT_X_PIN_HAL);
 8001448:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800144c:	4807      	ldr	r0, [pc, #28]	; (800146c <GCControllerEmulation_GetButtonState+0x130>)
 800144e:	f7ff f9e1 	bl	8000814 <HAL_GPIO_ReadPin>
			break;
 8001452:	e78a      	b.n	800136a <GCControllerEmulation_GetButtonState+0x2e>
			gcButtonState = (ButtonState_t)HAL_GPIO_ReadPin(BUTTON_TILT_Y_PORT, BUTTON_TILT_Y_PIN_HAL);
 8001454:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001458:	4804      	ldr	r0, [pc, #16]	; (800146c <GCControllerEmulation_GetButtonState+0x130>)
 800145a:	f7ff f9db 	bl	8000814 <HAL_GPIO_ReadPin>
			break;
 800145e:	e784      	b.n	800136a <GCControllerEmulation_GetButtonState+0x2e>
	ButtonState_t gcButtonState = RELEASED;
 8001460:	2001      	movs	r0, #1
 8001462:	e782      	b.n	800136a <GCControllerEmulation_GetButtonState+0x2e>
 8001464:	40020400 	.word	0x40020400
 8001468:	40020000 	.word	0x40020000
 800146c:	40020800 	.word	0x40020800

08001470 <GCControllerEmulation_GetSwitchSnapshot>:

void GCControllerEmulation_GetSwitchSnapshot()
{
 8001470:	b510      	push	{r4, lr}
	/* Update all button input states */
	gcButtonInputSnapShot[GC_A] = GCControllerEmulation_GetButtonState(GC_A);
 8001472:	2000      	movs	r0, #0
 8001474:	f7ff ff62 	bl	800133c <GCControllerEmulation_GetButtonState>
 8001478:	4c2d      	ldr	r4, [pc, #180]	; (8001530 <GCControllerEmulation_GetSwitchSnapshot+0xc0>)
 800147a:	7020      	strb	r0, [r4, #0]
	gcButtonInputSnapShot[GC_B] = GCControllerEmulation_GetButtonState(GC_B);
 800147c:	2001      	movs	r0, #1
 800147e:	f7ff ff5d 	bl	800133c <GCControllerEmulation_GetButtonState>
 8001482:	7060      	strb	r0, [r4, #1]
	gcButtonInputSnapShot[GC_X] = GCControllerEmulation_GetButtonState(GC_X);
 8001484:	2002      	movs	r0, #2
 8001486:	f7ff ff59 	bl	800133c <GCControllerEmulation_GetButtonState>
 800148a:	70a0      	strb	r0, [r4, #2]
	gcButtonInputSnapShot[GC_Y] = GCControllerEmulation_GetButtonState(GC_Y);
 800148c:	2003      	movs	r0, #3
 800148e:	f7ff ff55 	bl	800133c <GCControllerEmulation_GetButtonState>
 8001492:	70e0      	strb	r0, [r4, #3]
	gcButtonInputSnapShot[GC_L] = GCControllerEmulation_GetButtonState(GC_L);
 8001494:	2004      	movs	r0, #4
 8001496:	f7ff ff51 	bl	800133c <GCControllerEmulation_GetButtonState>
 800149a:	7120      	strb	r0, [r4, #4]
	gcButtonInputSnapShot[GC_R] = GCControllerEmulation_GetButtonState(GC_R);
 800149c:	2005      	movs	r0, #5
 800149e:	f7ff ff4d 	bl	800133c <GCControllerEmulation_GetButtonState>
 80014a2:	7160      	strb	r0, [r4, #5]
	gcButtonInputSnapShot[GC_Z] = GCControllerEmulation_GetButtonState(GC_Z);
 80014a4:	2006      	movs	r0, #6
 80014a6:	f7ff ff49 	bl	800133c <GCControllerEmulation_GetButtonState>
 80014aa:	71a0      	strb	r0, [r4, #6]
	gcButtonInputSnapShot[GC_START] = GCControllerEmulation_GetButtonState(GC_START);
 80014ac:	2007      	movs	r0, #7
 80014ae:	f7ff ff45 	bl	800133c <GCControllerEmulation_GetButtonState>
 80014b2:	71e0      	strb	r0, [r4, #7]
	gcButtonInputSnapShot[GC_DPAD_UP] = GCControllerEmulation_GetButtonState(GC_DPAD_UP);
 80014b4:	2008      	movs	r0, #8
 80014b6:	f7ff ff41 	bl	800133c <GCControllerEmulation_GetButtonState>
 80014ba:	7220      	strb	r0, [r4, #8]
	gcButtonInputSnapShot[GC_DPAD_DOWN] = GCControllerEmulation_GetButtonState(GC_DPAD_DOWN);
 80014bc:	2009      	movs	r0, #9
 80014be:	f7ff ff3d 	bl	800133c <GCControllerEmulation_GetButtonState>
 80014c2:	7260      	strb	r0, [r4, #9]
	gcButtonInputSnapShot[GC_DPAD_LEFT] = GCControllerEmulation_GetButtonState(GC_DPAD_LEFT);
 80014c4:	200a      	movs	r0, #10
 80014c6:	f7ff ff39 	bl	800133c <GCControllerEmulation_GetButtonState>
 80014ca:	72a0      	strb	r0, [r4, #10]
	gcButtonInputSnapShot[GC_DPAD_RIGHT] = GCControllerEmulation_GetButtonState(GC_DPAD_RIGHT);
 80014cc:	200b      	movs	r0, #11
 80014ce:	f7ff ff35 	bl	800133c <GCControllerEmulation_GetButtonState>
 80014d2:	72e0      	strb	r0, [r4, #11]
	gcButtonInputSnapShot[GC_MAIN_STICK_UP] = GCControllerEmulation_GetButtonState(GC_MAIN_STICK_UP);
 80014d4:	200c      	movs	r0, #12
 80014d6:	f7ff ff31 	bl	800133c <GCControllerEmulation_GetButtonState>
 80014da:	7320      	strb	r0, [r4, #12]
	gcButtonInputSnapShot[GC_MAIN_STICK_DOWN] = GCControllerEmulation_GetButtonState(GC_MAIN_STICK_DOWN);
 80014dc:	200d      	movs	r0, #13
 80014de:	f7ff ff2d 	bl	800133c <GCControllerEmulation_GetButtonState>
 80014e2:	7360      	strb	r0, [r4, #13]
	gcButtonInputSnapShot[GC_MAIN_STICK_LEFT] = GCControllerEmulation_GetButtonState(GC_MAIN_STICK_LEFT);
 80014e4:	200e      	movs	r0, #14
 80014e6:	f7ff ff29 	bl	800133c <GCControllerEmulation_GetButtonState>
 80014ea:	73a0      	strb	r0, [r4, #14]
	gcButtonInputSnapShot[GC_MAIN_STICK_RIGHT] = GCControllerEmulation_GetButtonState(GC_MAIN_STICK_RIGHT);
 80014ec:	200f      	movs	r0, #15
 80014ee:	f7ff ff25 	bl	800133c <GCControllerEmulation_GetButtonState>
 80014f2:	73e0      	strb	r0, [r4, #15]
	gcButtonInputSnapShot[GC_C_STICK_UP] = GCControllerEmulation_GetButtonState(GC_C_STICK_UP);
 80014f4:	2010      	movs	r0, #16
 80014f6:	f7ff ff21 	bl	800133c <GCControllerEmulation_GetButtonState>
 80014fa:	7420      	strb	r0, [r4, #16]
	gcButtonInputSnapShot[GC_C_STICK_DOWN] = GCControllerEmulation_GetButtonState(GC_C_STICK_DOWN);
 80014fc:	2011      	movs	r0, #17
 80014fe:	f7ff ff1d 	bl	800133c <GCControllerEmulation_GetButtonState>
 8001502:	7460      	strb	r0, [r4, #17]
	gcButtonInputSnapShot[GC_C_STICK_LEFT] = GCControllerEmulation_GetButtonState(GC_C_STICK_LEFT);
 8001504:	2012      	movs	r0, #18
 8001506:	f7ff ff19 	bl	800133c <GCControllerEmulation_GetButtonState>
 800150a:	74a0      	strb	r0, [r4, #18]
	gcButtonInputSnapShot[GC_C_STICK_RIGHT] = GCControllerEmulation_GetButtonState(GC_C_STICK_RIGHT);
 800150c:	2013      	movs	r0, #19
 800150e:	f7ff ff15 	bl	800133c <GCControllerEmulation_GetButtonState>
 8001512:	74e0      	strb	r0, [r4, #19]
	gcButtonInputSnapShot[GC_MACRO] = GCControllerEmulation_GetButtonState(GC_MACRO);
 8001514:	2014      	movs	r0, #20
 8001516:	f7ff ff11 	bl	800133c <GCControllerEmulation_GetButtonState>
 800151a:	7520      	strb	r0, [r4, #20]
	gcButtonInputSnapShot[GC_TILT_X] = GCControllerEmulation_GetButtonState(GC_TILT_X);
 800151c:	2015      	movs	r0, #21
 800151e:	f7ff ff0d 	bl	800133c <GCControllerEmulation_GetButtonState>
 8001522:	7560      	strb	r0, [r4, #21]
	gcButtonInputSnapShot[GC_TILT_Y] = GCControllerEmulation_GetButtonState(GC_TILT_Y);
 8001524:	2016      	movs	r0, #22
 8001526:	f7ff ff09 	bl	800133c <GCControllerEmulation_GetButtonState>
 800152a:	75a0      	strb	r0, [r4, #22]
}
 800152c:	bd10      	pop	{r4, pc}
 800152e:	bf00      	nop
 8001530:	20000028 	.word	0x20000028

08001534 <GCControllerEmulation_Run>:
{
 8001534:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001538:	b087      	sub	sp, #28
	/* Variable to hold return value */
	GCCommand_t command;

	/* Below is grabbing a response from the console */
	// Enable the UART receiver
	USART1->CR1 |= USART_CR1_RE;
 800153a:	4caa      	ldr	r4, [pc, #680]	; (80017e4 <GCControllerEmulation_Run+0x2b0>)

void GCControllerEmulation_SendStopBit()
{
	/* The timing of the stop bit does not need to be so precise. But
	 * it has been optimized for this uC to be 1us. */
	GC_STOP_PORT->BSRR = GC_STOP_CLEAR;
 800153c:	4faa      	ldr	r7, [pc, #680]	; (80017e8 <GCControllerEmulation_Run+0x2b4>)
 800153e:	e0e6      	b.n	800170e <GCControllerEmulation_Run+0x1da>
		if( ( (gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT7_BIT6] == GC_BITS_00_CASE1) || (gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT7_BIT6] == GC_BITS_00_CASE2) ) &&
 8001540:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 8001544:	2b08      	cmp	r3, #8
 8001546:	d007      	beq.n	8001558 <GCControllerEmulation_Run+0x24>
		else if( ( (gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT7_BIT6] == GC_BITS_01_CASE1) || (gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT7_BIT6] == GC_BITS_01_CASE2) ) &&
 8001548:	2ae8      	cmp	r2, #232	; 0xe8
 800154a:	d115      	bne.n	8001578 <GCControllerEmulation_Run+0x44>
 800154c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8001550:	2908      	cmp	r1, #8
 8001552:	d01b      	beq.n	800158c <GCControllerEmulation_Run+0x58>
			command = GC_COMMAND_UNKNOWN;
 8001554:	2304      	movs	r3, #4
 8001556:	e004      	b.n	8001562 <GCControllerEmulation_Run+0x2e>
		if( ( (gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT7_BIT6] == GC_BITS_00_CASE1) || (gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT7_BIT6] == GC_BITS_00_CASE2) ) &&
 8001558:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800155c:	2b08      	cmp	r3, #8
 800155e:	d005      	beq.n	800156c <GCControllerEmulation_Run+0x38>
			command = GC_COMMAND_UNKNOWN;
 8001560:	2304      	movs	r3, #4
		USART1->CR1 &= ~USART_CR1_RE;
 8001562:	68e2      	ldr	r2, [r4, #12]
 8001564:	f022 0204 	bic.w	r2, r2, #4
 8001568:	60e2      	str	r2, [r4, #12]
 800156a:	e12e      	b.n	80017ca <GCControllerEmulation_Run+0x296>
			( (gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT5_BIT4] == GC_BITS_00_CASE1) || (gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT5_BIT4] == GC_BITS_00_CASE2) ) &&
 800156c:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8001570:	2b08      	cmp	r3, #8
 8001572:	d005      	beq.n	8001580 <GCControllerEmulation_Run+0x4c>
		else if( ( (gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT7_BIT6] == GC_BITS_01_CASE1) || (gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT7_BIT6] == GC_BITS_01_CASE2) ) &&
 8001574:	2ae8      	cmp	r2, #232	; 0xe8
 8001576:	d009      	beq.n	800158c <GCControllerEmulation_Run+0x58>
 8001578:	2ac8      	cmp	r2, #200	; 0xc8
 800157a:	d0e7      	beq.n	800154c <GCControllerEmulation_Run+0x18>
			command = GC_COMMAND_UNKNOWN;
 800157c:	2304      	movs	r3, #4
 800157e:	e7f0      	b.n	8001562 <GCControllerEmulation_Run+0x2e>
			( (gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT3_BIT2] == GC_BITS_00_CASE1) || (gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT3_BIT2] == GC_BITS_00_CASE2) ) &&
 8001580:	f006 037f 	and.w	r3, r6, #127	; 0x7f
 8001584:	2b08      	cmp	r3, #8
 8001586:	d1f5      	bne.n	8001574 <GCControllerEmulation_Run+0x40>
			command = GC_COMMAND_PROBE;
 8001588:	2300      	movs	r3, #0
 800158a:	e7ea      	b.n	8001562 <GCControllerEmulation_Run+0x2e>
				 ( (gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT5_BIT4] == GC_BITS_00_CASE1) || (gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT5_BIT4] == GC_BITS_00_CASE2) ) &&
 800158c:	f005 057f 	and.w	r5, r5, #127	; 0x7f
 8001590:	2d08      	cmp	r5, #8
 8001592:	d001      	beq.n	8001598 <GCControllerEmulation_Run+0x64>
			command = GC_COMMAND_UNKNOWN;
 8001594:	2304      	movs	r3, #4
 8001596:	e7e4      	b.n	8001562 <GCControllerEmulation_Run+0x2e>
				 ( (gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT1_BIT0] == GC_BITS_01_CASE1) || (gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT1_BIT0] == GC_BITS_01_CASE2) )    )
 8001598:	f006 06df 	and.w	r6, r6, #223	; 0xdf
			command = GC_COMMAND_PROBE_ORIGIN;
 800159c:	2ec8      	cmp	r6, #200	; 0xc8
 800159e:	bf14      	ite	ne
 80015a0:	2304      	movne	r3, #4
 80015a2:	2301      	moveq	r3, #1
 80015a4:	e7dd      	b.n	8001562 <GCControllerEmulation_Run+0x2e>
	if( ( (gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT7_BIT6] == GC_BITS_01_CASE1) || (gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT7_BIT6] == GC_BITS_01_CASE2) ) &&
 80015a6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80015aa:	2908      	cmp	r1, #8
 80015ac:	d001      	beq.n	80015b2 <GCControllerEmulation_Run+0x7e>
		command = GC_COMMAND_UNKNOWN;
 80015ae:	2304      	movs	r3, #4
 80015b0:	e107      	b.n	80017c2 <GCControllerEmulation_Run+0x28e>
		( (gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT5_BIT4] == GC_BITS_00_CASE1) || (gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT5_BIT4] == GC_BITS_00_CASE2) ) &&
 80015b2:	f005 057f 	and.w	r5, r5, #127	; 0x7f
 80015b6:	2d08      	cmp	r5, #8
 80015b8:	d001      	beq.n	80015be <GCControllerEmulation_Run+0x8a>
		command = GC_COMMAND_UNKNOWN;
 80015ba:	2304      	movs	r3, #4
 80015bc:	e101      	b.n	80017c2 <GCControllerEmulation_Run+0x28e>
		( (gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT3_BIT2] == GC_BITS_00_CASE1) || (gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT3_BIT2] == GC_BITS_00_CASE2) ) &&
 80015be:	f006 067f 	and.w	r6, r6, #127	; 0x7f
 80015c2:	2e08      	cmp	r6, #8
 80015c4:	d001      	beq.n	80015ca <GCControllerEmulation_Run+0x96>
		command = GC_COMMAND_UNKNOWN;
 80015c6:	2304      	movs	r3, #4
 80015c8:	e0fb      	b.n	80017c2 <GCControllerEmulation_Run+0x28e>
		if( ( (gcConsoleResponse[GC_CONSOLE_BYTE_1_BIT7_BIT6] == GC_BITS_00_CASE1) || (gcConsoleResponse[GC_CONSOLE_BYTE_1_BIT7_BIT6] == GC_BITS_00_CASE2) ) &&
 80015ca:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80015ce:	2808      	cmp	r0, #8
 80015d0:	d001      	beq.n	80015d6 <GCControllerEmulation_Run+0xa2>
			command = GC_COMMAND_UNKNOWN;
 80015d2:	2304      	movs	r3, #4
 80015d4:	e0f5      	b.n	80017c2 <GCControllerEmulation_Run+0x28e>
		if( ( (gcConsoleResponse[GC_CONSOLE_BYTE_1_BIT7_BIT6] == GC_BITS_00_CASE1) || (gcConsoleResponse[GC_CONSOLE_BYTE_1_BIT7_BIT6] == GC_BITS_00_CASE2) ) &&
 80015d6:	f00c 0c7f 	and.w	ip, ip, #127	; 0x7f
 80015da:	f1bc 0f08 	cmp.w	ip, #8
 80015de:	d001      	beq.n	80015e4 <GCControllerEmulation_Run+0xb0>
			command = GC_COMMAND_UNKNOWN;
 80015e0:	2304      	movs	r3, #4
 80015e2:	e0ee      	b.n	80017c2 <GCControllerEmulation_Run+0x28e>
		    ( (gcConsoleResponse[GC_CONSOLE_BYTE_1_BIT5_BIT4] == GC_BITS_00_CASE1) || (gcConsoleResponse[GC_CONSOLE_BYTE_1_BIT5_BIT4] == GC_BITS_00_CASE2) ) &&
 80015e4:	f00e 0e7f 	and.w	lr, lr, #127	; 0x7f
 80015e8:	f1be 0f08 	cmp.w	lr, #8
 80015ec:	d001      	beq.n	80015f2 <GCControllerEmulation_Run+0xbe>
			command = GC_COMMAND_UNKNOWN;
 80015ee:	2304      	movs	r3, #4
 80015f0:	e0e7      	b.n	80017c2 <GCControllerEmulation_Run+0x28e>
		    ( (gcConsoleResponse[GC_CONSOLE_BYTE_1_BIT1_BIT0] == GC_BITS_11_CASE1) || (gcConsoleResponse[GC_CONSOLE_BYTE_1_BIT1_BIT0] == GC_BITS_11_CASE2) )    )
 80015f2:	f00b 0bdf 	and.w	fp, fp, #223	; 0xdf
 80015f6:	f1bb 0fcf 	cmp.w	fp, #207	; 0xcf
 80015fa:	d001      	beq.n	8001600 <GCControllerEmulation_Run+0xcc>
			command = GC_COMMAND_UNKNOWN;
 80015fc:	2304      	movs	r3, #4
 80015fe:	e0e0      	b.n	80017c2 <GCControllerEmulation_Run+0x28e>
	gcConsoleResponse[GC_CONSOLE_BYTE_2_BIT7_BIT6] = USART1->DR;
 8001600:	f89d 3004 	ldrb.w	r3, [sp, #4]
			if( ( (gcConsoleResponse[GC_CONSOLE_BYTE_2_BIT7_BIT6] == GC_BITS_00_CASE1) || (gcConsoleResponse[GC_CONSOLE_BYTE_2_BIT7_BIT6] == GC_BITS_00_CASE2) ) &&
 8001604:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001608:	2a08      	cmp	r2, #8
 800160a:	d001      	beq.n	8001610 <GCControllerEmulation_Run+0xdc>
				command = GC_COMMAND_UNKNOWN;
 800160c:	2304      	movs	r3, #4
 800160e:	e0d8      	b.n	80017c2 <GCControllerEmulation_Run+0x28e>
	gcConsoleResponse[GC_CONSOLE_BYTE_2_BIT3_BIT2] = USART1->DR;
 8001610:	fa5f f888 	uxtb.w	r8, r8
	gcConsoleResponse[GC_CONSOLE_BYTE_2_BIT1_BIT0] = USART1->DR;
 8001614:	fa5f f989 	uxtb.w	r9, r9
			if( ( (gcConsoleResponse[GC_CONSOLE_BYTE_2_BIT7_BIT6] == GC_BITS_00_CASE1) || (gcConsoleResponse[GC_CONSOLE_BYTE_2_BIT7_BIT6] == GC_BITS_00_CASE2) ) &&
 8001618:	f00a 0a7f 	and.w	sl, sl, #127	; 0x7f
 800161c:	f1ba 0f08 	cmp.w	sl, #8
 8001620:	d001      	beq.n	8001626 <GCControllerEmulation_Run+0xf2>
				command = GC_COMMAND_UNKNOWN;
 8001622:	2304      	movs	r3, #4
 8001624:	e0cd      	b.n	80017c2 <GCControllerEmulation_Run+0x28e>
				( (gcConsoleResponse[GC_CONSOLE_BYTE_2_BIT5_BIT4] == GC_BITS_00_CASE1) || (gcConsoleResponse[GC_CONSOLE_BYTE_2_BIT5_BIT4] == GC_BITS_00_CASE2) ) &&
 8001626:	f008 027f 	and.w	r2, r8, #127	; 0x7f
 800162a:	2a08      	cmp	r2, #8
 800162c:	d009      	beq.n	8001642 <GCControllerEmulation_Run+0x10e>
			else if( ( (gcConsoleResponse[GC_CONSOLE_BYTE_2_BIT7_BIT6] == GC_BITS_00_CASE1) || (gcConsoleResponse[GC_CONSOLE_BYTE_2_BIT7_BIT6] == GC_BITS_00_CASE2) ) &&
 800162e:	2b08      	cmp	r3, #8
 8001630:	f040 8514 	bne.w	800205c <GCControllerEmulation_Run+0xb28>
					( (gcConsoleResponse[GC_CONSOLE_BYTE_2_BIT5_BIT4] == GC_BITS_00_CASE1) || (gcConsoleResponse[GC_CONSOLE_BYTE_2_BIT5_BIT4] == GC_BITS_00_CASE2) ) &&
 8001634:	f008 087f 	and.w	r8, r8, #127	; 0x7f
 8001638:	f1b8 0f08 	cmp.w	r8, #8
 800163c:	d007      	beq.n	800164e <GCControllerEmulation_Run+0x11a>
				command = GC_COMMAND_UNKNOWN;
 800163e:	2304      	movs	r3, #4
 8001640:	e0bf      	b.n	80017c2 <GCControllerEmulation_Run+0x28e>
				( (gcConsoleResponse[GC_CONSOLE_BYTE_2_BIT3_BIT2] == GC_BITS_00_CASE1) || (gcConsoleResponse[GC_CONSOLE_BYTE_2_BIT3_BIT2] == GC_BITS_00_CASE2) ) &&
 8001642:	f009 027f 	and.w	r2, r9, #127	; 0x7f
 8001646:	2a08      	cmp	r2, #8
 8001648:	d1f1      	bne.n	800162e <GCControllerEmulation_Run+0xfa>
				command = GC_COMMAND_POLL_AND_TURN_RUMBLE_OFF;
 800164a:	2302      	movs	r3, #2
 800164c:	e0b9      	b.n	80017c2 <GCControllerEmulation_Run+0x28e>
					( (gcConsoleResponse[GC_CONSOLE_BYTE_2_BIT1_BIT0] == GC_BITS_01_CASE1) || (gcConsoleResponse[GC_CONSOLE_BYTE_2_BIT1_BIT0] == GC_BITS_01_CASE2) )    )
 800164e:	f009 09df 	and.w	r9, r9, #223	; 0xdf
				command = GC_COMMAND_POLL_AND_TURN_RUMBLE_ON;
 8001652:	f1b9 0fc8 	cmp.w	r9, #200	; 0xc8
 8001656:	bf14      	ite	ne
 8001658:	2304      	movne	r3, #4
 800165a:	2303      	moveq	r3, #3
 800165c:	e0b1      	b.n	80017c2 <GCControllerEmulation_Run+0x28e>

void GCControllerEmulation_SendProbeResponse()
{
	/* First byte to console - 0x09 */
	// Make sure the transmit data register is empty before sending next byte
	while(!(USART1->SR & USART_SR_TXE)){};
 800165e:	6823      	ldr	r3, [r4, #0]
 8001660:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001664:	d0fb      	beq.n	800165e <GCControllerEmulation_Run+0x12a>
	// Send states for A and B
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001666:	2308      	movs	r3, #8
 8001668:	6063      	str	r3, [r4, #4]

	// Make sure the transmit data register is empty before sending next byte
	while(!(USART1->SR & USART_SR_TXE)){};
 800166a:	6823      	ldr	r3, [r4, #0]
 800166c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001670:	d0fb      	beq.n	800166a <GCControllerEmulation_Run+0x136>
	//while(!(USART1->SR & USART_SR_TC)){};
	// Send states for Z and START
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001672:	2308      	movs	r3, #8
 8001674:	6063      	str	r3, [r4, #4]

	// Make sure the transmit data register is empty before sending next byte
	while(!(USART1->SR & USART_SR_TXE)){};
 8001676:	6823      	ldr	r3, [r4, #0]
 8001678:	f013 0f80 	tst.w	r3, #128	; 0x80
 800167c:	d0fb      	beq.n	8001676 <GCControllerEmulation_Run+0x142>
	// Send states for DU and DD
	USART1->DR = (GC_BITS_10_CASE1 & 0xFF);
 800167e:	230f      	movs	r3, #15
 8001680:	6063      	str	r3, [r4, #4]

	// Make sure the transmit data register is empty before sending next byte
	while(!(USART1->SR & USART_SR_TXE)){};
 8001682:	6823      	ldr	r3, [r4, #0]
 8001684:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001688:	d0fb      	beq.n	8001682 <GCControllerEmulation_Run+0x14e>
	// Send states for DL and DR
	USART1->DR = (GC_BITS_01_CASE1 & 0xFF);
 800168a:	23e8      	movs	r3, #232	; 0xe8
 800168c:	6063      	str	r3, [r4, #4]

	/* Second byte to console 0x00 */
	// Make sure the transmit data register is empty before sending next byte
	while(!(USART1->SR & USART_SR_TXE)){};
 800168e:	6823      	ldr	r3, [r4, #0]
 8001690:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001694:	d0fb      	beq.n	800168e <GCControllerEmulation_Run+0x15a>
	// Send states for RESET and RESERVED
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001696:	2308      	movs	r3, #8
 8001698:	6063      	str	r3, [r4, #4]

	// Make sure the transmit data register is empty before sending next byte
	while(!(USART1->SR & USART_SR_TXE)){};
 800169a:	6823      	ldr	r3, [r4, #0]
 800169c:	f013 0f80 	tst.w	r3, #128	; 0x80
 80016a0:	d0fb      	beq.n	800169a <GCControllerEmulation_Run+0x166>
	// Send states for L and R
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 80016a2:	2308      	movs	r3, #8
 80016a4:	6063      	str	r3, [r4, #4]

	// Make sure the transmit data register is empty before sending next byte
	while(!(USART1->SR & USART_SR_TXE)){};
 80016a6:	6823      	ldr	r3, [r4, #0]
 80016a8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80016ac:	d0fb      	beq.n	80016a6 <GCControllerEmulation_Run+0x172>
	// Send states for CU and CD
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 80016ae:	2308      	movs	r3, #8
 80016b0:	6063      	str	r3, [r4, #4]

	// Make sure the transmit data register is empty before sending next byte
	while(!(USART1->SR & USART_SR_TXE)){};
 80016b2:	6823      	ldr	r3, [r4, #0]
 80016b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80016b8:	d0fb      	beq.n	80016b2 <GCControllerEmulation_Run+0x17e>
	// Send states for CL and CR
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 80016ba:	2308      	movs	r3, #8
 80016bc:	6063      	str	r3, [r4, #4]

	/* Third byte to console - 0x03 */
	// Make sure the transmit data register is empty before sending next byte
	while(!(USART1->SR & USART_SR_TXE)){};
 80016be:	6823      	ldr	r3, [r4, #0]
 80016c0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80016c4:	d0fb      	beq.n	80016be <GCControllerEmulation_Run+0x18a>
	// Send states for X-AXIS BIT7 & BIT6
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 80016c6:	2308      	movs	r3, #8
 80016c8:	6063      	str	r3, [r4, #4]

	// Make sure the transmit data register is empty before sending next byte
	while(!(USART1->SR & USART_SR_TXE)){};
 80016ca:	6823      	ldr	r3, [r4, #0]
 80016cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80016d0:	d0fb      	beq.n	80016ca <GCControllerEmulation_Run+0x196>
	// Send states for X-AXIS BIT5 & BIT4
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 80016d2:	2308      	movs	r3, #8
 80016d4:	6063      	str	r3, [r4, #4]

	// Make sure the transmit data register is empty before sending next byte
	while(!(USART1->SR & USART_SR_TXE)){};
 80016d6:	6823      	ldr	r3, [r4, #0]
 80016d8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80016dc:	d0fb      	beq.n	80016d6 <GCControllerEmulation_Run+0x1a2>
	// Send states for X-AXIS BIT3 & BIT2
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 80016de:	2308      	movs	r3, #8
 80016e0:	6063      	str	r3, [r4, #4]

	// Make sure the transmit data register is empty before sending next byte
	while(!(USART1->SR & USART_SR_TXE)){};
 80016e2:	6823      	ldr	r3, [r4, #0]
 80016e4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80016e8:	d0fb      	beq.n	80016e2 <GCControllerEmulation_Run+0x1ae>
	// Send states for X-AXIS BIT1 & BIT0
	USART1->DR = (GC_BITS_11_CASE1 & 0xFF);
 80016ea:	23ef      	movs	r3, #239	; 0xef
 80016ec:	6063      	str	r3, [r4, #4]

	/* Stop bit to console */
	// Make sure the last UART byte transmission is complete before sending stop bit
	while(!(USART1->SR & USART_SR_TC)){};
 80016ee:	6823      	ldr	r3, [r4, #0]
 80016f0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80016f4:	d0fb      	beq.n	80016ee <GCControllerEmulation_Run+0x1ba>
	GC_STOP_PORT->BSRR = GC_STOP_CLEAR;
 80016f6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80016fa:	61bb      	str	r3, [r7, #24]
	volatile uint32_t counter = 17;
 80016fc:	2311      	movs	r3, #17
 80016fe:	9302      	str	r3, [sp, #8]
	while(counter--);
 8001700:	9b02      	ldr	r3, [sp, #8]
 8001702:	1e5a      	subs	r2, r3, #1
 8001704:	9202      	str	r2, [sp, #8]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1fa      	bne.n	8001700 <GCControllerEmulation_Run+0x1cc>
	GC_STOP_PORT->BSRR = GC_STOP_SET;
 800170a:	2320      	movs	r3, #32
 800170c:	61bb      	str	r3, [r7, #24]
	USART1->CR1 |= USART_CR1_RE;
 800170e:	68e3      	ldr	r3, [r4, #12]
 8001710:	f043 0304 	orr.w	r3, r3, #4
 8001714:	60e3      	str	r3, [r4, #12]
	while(!(USART1->SR & USART_SR_RXNE)){};
 8001716:	6823      	ldr	r3, [r4, #0]
 8001718:	f013 0f20 	tst.w	r3, #32
 800171c:	d0fb      	beq.n	8001716 <GCControllerEmulation_Run+0x1e2>
	gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT7_BIT6] = USART1->DR;
 800171e:	6862      	ldr	r2, [r4, #4]
 8001720:	b2d2      	uxtb	r2, r2
	while(!(USART1->SR & USART_SR_RXNE)){};
 8001722:	6823      	ldr	r3, [r4, #0]
 8001724:	f013 0f20 	tst.w	r3, #32
 8001728:	d0fb      	beq.n	8001722 <GCControllerEmulation_Run+0x1ee>
	gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT5_BIT4] = USART1->DR;
 800172a:	6861      	ldr	r1, [r4, #4]
 800172c:	b2c9      	uxtb	r1, r1
	while(!(USART1->SR & USART_SR_RXNE)){};
 800172e:	6823      	ldr	r3, [r4, #0]
 8001730:	f013 0f20 	tst.w	r3, #32
 8001734:	d0fb      	beq.n	800172e <GCControllerEmulation_Run+0x1fa>
	gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT3_BIT2] = USART1->DR;
 8001736:	6865      	ldr	r5, [r4, #4]
 8001738:	b2ed      	uxtb	r5, r5
	while(!(USART1->SR & USART_SR_RXNE)){};
 800173a:	6823      	ldr	r3, [r4, #0]
 800173c:	f013 0f20 	tst.w	r3, #32
 8001740:	d0fb      	beq.n	800173a <GCControllerEmulation_Run+0x206>
	gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT1_BIT0] = USART1->DR;
 8001742:	6866      	ldr	r6, [r4, #4]
 8001744:	b2f6      	uxtb	r6, r6
	while(!(USART1->SR & USART_SR_RXNE)){};
 8001746:	6823      	ldr	r3, [r4, #0]
 8001748:	f013 0f20 	tst.w	r3, #32
 800174c:	d0fb      	beq.n	8001746 <GCControllerEmulation_Run+0x212>
	gcConsoleResponse[GC_CONSOLE_TEMP_BITS] = USART1->DR;
 800174e:	6860      	ldr	r0, [r4, #4]
 8001750:	b2c0      	uxtb	r0, r0
	if(gcConsoleResponse[GC_CONSOLE_TEMP_BITS] == GC_BITS_STOP_BIT)
 8001752:	28ff      	cmp	r0, #255	; 0xff
 8001754:	f43f aef4 	beq.w	8001540 <GCControllerEmulation_Run+0xc>
	while(!(USART1->SR & USART_SR_RXNE)){};
 8001758:	6823      	ldr	r3, [r4, #0]
 800175a:	f013 0f20 	tst.w	r3, #32
 800175e:	d0fb      	beq.n	8001758 <GCControllerEmulation_Run+0x224>
	gcConsoleResponse[GC_CONSOLE_BYTE_1_BIT5_BIT4] = USART1->DR;
 8001760:	f8d4 c004 	ldr.w	ip, [r4, #4]
	while(!(USART1->SR & USART_SR_RXNE)){};
 8001764:	6823      	ldr	r3, [r4, #0]
 8001766:	f013 0f20 	tst.w	r3, #32
 800176a:	d0fb      	beq.n	8001764 <GCControllerEmulation_Run+0x230>
	gcConsoleResponse[GC_CONSOLE_BYTE_1_BIT3_BIT2] = USART1->DR;
 800176c:	f8d4 e004 	ldr.w	lr, [r4, #4]
	while(!(USART1->SR & USART_SR_RXNE)){};
 8001770:	6823      	ldr	r3, [r4, #0]
 8001772:	f013 0f20 	tst.w	r3, #32
 8001776:	d0fb      	beq.n	8001770 <GCControllerEmulation_Run+0x23c>
	gcConsoleResponse[GC_CONSOLE_BYTE_1_BIT1_BIT0] = USART1->DR;
 8001778:	f8d4 b004 	ldr.w	fp, [r4, #4]
	while(!(USART1->SR & USART_SR_RXNE)){};
 800177c:	6823      	ldr	r3, [r4, #0]
 800177e:	f013 0f20 	tst.w	r3, #32
 8001782:	d0fb      	beq.n	800177c <GCControllerEmulation_Run+0x248>
	gcConsoleResponse[GC_CONSOLE_BYTE_2_BIT7_BIT6] = USART1->DR;
 8001784:	6863      	ldr	r3, [r4, #4]
 8001786:	9301      	str	r3, [sp, #4]
	while(!(USART1->SR & USART_SR_RXNE)){};
 8001788:	6823      	ldr	r3, [r4, #0]
 800178a:	f013 0f20 	tst.w	r3, #32
 800178e:	d0fb      	beq.n	8001788 <GCControllerEmulation_Run+0x254>
	gcConsoleResponse[GC_CONSOLE_BYTE_2_BIT5_BIT4] = USART1->DR;
 8001790:	f8d4 a004 	ldr.w	sl, [r4, #4]
	while(!(USART1->SR & USART_SR_RXNE)){};
 8001794:	6823      	ldr	r3, [r4, #0]
 8001796:	f013 0f20 	tst.w	r3, #32
 800179a:	d0fb      	beq.n	8001794 <GCControllerEmulation_Run+0x260>
	gcConsoleResponse[GC_CONSOLE_BYTE_2_BIT3_BIT2] = USART1->DR;
 800179c:	f8d4 8004 	ldr.w	r8, [r4, #4]
	while(!(USART1->SR & USART_SR_RXNE)){};
 80017a0:	6823      	ldr	r3, [r4, #0]
 80017a2:	f013 0f20 	tst.w	r3, #32
 80017a6:	d0fb      	beq.n	80017a0 <GCControllerEmulation_Run+0x26c>
	gcConsoleResponse[GC_CONSOLE_BYTE_2_BIT1_BIT0] = USART1->DR;
 80017a8:	f8d4 9004 	ldr.w	r9, [r4, #4]
	while(!(USART1->SR & USART_SR_RXNE)){};
 80017ac:	6823      	ldr	r3, [r4, #0]
 80017ae:	f013 0f20 	tst.w	r3, #32
 80017b2:	d0fb      	beq.n	80017ac <GCControllerEmulation_Run+0x278>
	gcConsoleResponse[GC_CONSOLE_TEMP_BITS] = USART1->DR;
 80017b4:	6863      	ldr	r3, [r4, #4]
	if( ( (gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT7_BIT6] == GC_BITS_01_CASE1) || (gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT7_BIT6] == GC_BITS_01_CASE2) ) &&
 80017b6:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80017ba:	2ac8      	cmp	r2, #200	; 0xc8
 80017bc:	f43f aef3 	beq.w	80015a6 <GCControllerEmulation_Run+0x72>
		command = GC_COMMAND_UNKNOWN;
 80017c0:	2304      	movs	r3, #4
	USART1->CR1 &= ~USART_CR1_RE;
 80017c2:	68e2      	ldr	r2, [r4, #12]
 80017c4:	f022 0204 	bic.w	r2, r2, #4
 80017c8:	60e2      	str	r2, [r4, #12]
		switch(command)
 80017ca:	2b03      	cmp	r3, #3
 80017cc:	d89f      	bhi.n	800170e <GCControllerEmulation_Run+0x1da>
 80017ce:	a201      	add	r2, pc, #4	; (adr r2, 80017d4 <GCControllerEmulation_Run+0x2a0>)
 80017d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d4:	0800165f 	.word	0x0800165f
 80017d8:	080017ed 	.word	0x080017ed
 80017dc:	08001afd 	.word	0x08001afd
 80017e0:	08001dad 	.word	0x08001dad
 80017e4:	40011000 	.word	0x40011000
 80017e8:	40020400 	.word	0x40020400
	 * causes the UART to delay a little. Most reliable way is to place
	 * code directly into if...then statements for direct data transmission
	 * via DR in UART.
	 */
	/* Get snapshot of all button and switch inputs */
	GCControllerEmulation_GetSwitchSnapshot();
 80017ec:	f7ff fe40 	bl	8001470 <GCControllerEmulation_GetSwitchSnapshot>
	ButtonState_t leftButtonState;
	ButtonState_t rightButtonState;

	/* First byte to console */
	// Make sure the transmit data register is empty before sending next byte
	while(!(USART1->SR & USART_SR_TXE)){};
 80017f0:	6823      	ldr	r3, [r4, #0]
 80017f2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80017f6:	d0fb      	beq.n	80017f0 <GCControllerEmulation_Run+0x2bc>
	// Send states for RESERVED and RESERVED
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 80017f8:	2308      	movs	r3, #8
 80017fa:	6063      	str	r3, [r4, #4]

	// Update RESERVED and START
	rightButtonState = gcButtonInputSnapShot[GC_START];
 80017fc:	4ba2      	ldr	r3, [pc, #648]	; (8001a88 <GCControllerEmulation_Run+0x554>)
 80017fe:	79da      	ldrb	r2, [r3, #7]
	// Make sure the transmit data register is empty before sending next byte
	while(!(USART1->SR & USART_SR_TXE)){};
 8001800:	6823      	ldr	r3, [r4, #0]
 8001802:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001806:	d0fb      	beq.n	8001800 <GCControllerEmulation_Run+0x2cc>
	// Send states for RESERVED and START
	if(rightButtonState == RELEASED)
 8001808:	2a01      	cmp	r2, #1
	{
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 800180a:	bf0c      	ite	eq
 800180c:	2308      	moveq	r3, #8
	}
	else
	{
		USART1->DR = (GC_BITS_01_CASE1 & 0xFF);
 800180e:	23e8      	movne	r3, #232	; 0xe8
 8001810:	6063      	str	r3, [r4, #4]
	}

	// Update Y and X
	leftButtonState = gcButtonInputSnapShot[GC_Y];
 8001812:	4b9d      	ldr	r3, [pc, #628]	; (8001a88 <GCControllerEmulation_Run+0x554>)
 8001814:	78da      	ldrb	r2, [r3, #3]
	rightButtonState = gcButtonInputSnapShot[GC_X];
 8001816:	7899      	ldrb	r1, [r3, #2]
	// Make sure the transmit data register is empty before sending next byte
	while(!(USART1->SR & USART_SR_TXE)){};
 8001818:	6823      	ldr	r3, [r4, #0]
 800181a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800181e:	d0fb      	beq.n	8001818 <GCControllerEmulation_Run+0x2e4>
	// Send states for Y and X
	if( (leftButtonState == RELEASED) && (rightButtonState == RELEASED) )
 8001820:	2a01      	cmp	r2, #1
 8001822:	f000 8122 	beq.w	8001a6a <GCControllerEmulation_Run+0x536>
	}
	else if( (leftButtonState == RELEASED) && (rightButtonState == PUSHED) )
	{
		USART1->DR = (GC_BITS_01_CASE1 & 0xFF);
	}
	else if( (leftButtonState == PUSHED) && (rightButtonState == RELEASED) )
 8001826:	b912      	cbnz	r2, 800182e <GCControllerEmulation_Run+0x2fa>
 8001828:	2901      	cmp	r1, #1
 800182a:	f000 8129 	beq.w	8001a80 <GCControllerEmulation_Run+0x54c>
	{
		USART1->DR = (GC_BITS_10_CASE1 & 0xFF);
	}
	else
	{
		USART1->DR = (GC_BITS_11_CASE1 & 0xFF);
 800182e:	23ef      	movs	r3, #239	; 0xef
 8001830:	6063      	str	r3, [r4, #4]
	}

	// Update B and A
	leftButtonState = gcButtonInputSnapShot[GC_B];
 8001832:	4b95      	ldr	r3, [pc, #596]	; (8001a88 <GCControllerEmulation_Run+0x554>)
 8001834:	785a      	ldrb	r2, [r3, #1]
	rightButtonState = gcButtonInputSnapShot[GC_A];
 8001836:	7819      	ldrb	r1, [r3, #0]
	// Make sure the transmit data register is empty before sending next byte
	while(!(USART1->SR & USART_SR_TXE)){};
 8001838:	6823      	ldr	r3, [r4, #0]
 800183a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800183e:	d0fb      	beq.n	8001838 <GCControllerEmulation_Run+0x304>
	// Send states for B and A
	if( (leftButtonState == RELEASED) && (rightButtonState == RELEASED) )
 8001840:	2a01      	cmp	r2, #1
 8001842:	f000 8123 	beq.w	8001a8c <GCControllerEmulation_Run+0x558>
	}
	else if( (leftButtonState == RELEASED) && (rightButtonState == PUSHED) )
	{
		USART1->DR = (GC_BITS_01_CASE1 & 0xFF);
	}
	else if( (leftButtonState == PUSHED) && (rightButtonState == RELEASED) )
 8001846:	b912      	cbnz	r2, 800184e <GCControllerEmulation_Run+0x31a>
 8001848:	2901      	cmp	r1, #1
 800184a:	f000 812a 	beq.w	8001aa2 <GCControllerEmulation_Run+0x56e>
	{
		USART1->DR = (GC_BITS_10_CASE1 & 0xFF);
	}
	else
	{
		USART1->DR = (GC_BITS_11_CASE1 & 0xFF);
 800184e:	23ef      	movs	r3, #239	; 0xef
 8001850:	6063      	str	r3, [r4, #4]
	}

	/* Second byte to console */
	// Update RESERVED and L
	rightButtonState = gcButtonInputSnapShot[GC_L];
 8001852:	4b8d      	ldr	r3, [pc, #564]	; (8001a88 <GCControllerEmulation_Run+0x554>)
 8001854:	791a      	ldrb	r2, [r3, #4]
	// Make sure the transmit data register is empty before sending next byte
	while(!(USART1->SR & USART_SR_TXE)){};
 8001856:	6823      	ldr	r3, [r4, #0]
 8001858:	f013 0f80 	tst.w	r3, #128	; 0x80
 800185c:	d0fb      	beq.n	8001856 <GCControllerEmulation_Run+0x322>
	// Send states for RESERVED and L
	if(rightButtonState == RELEASED)
 800185e:	2a01      	cmp	r2, #1
	{
		USART1->DR = (GC_BITS_10_CASE1 & 0xFF);
 8001860:	bf0c      	ite	eq
 8001862:	230f      	moveq	r3, #15
	}
	else
	{
		USART1->DR = (GC_BITS_11_CASE1 & 0xFF);
 8001864:	23ef      	movne	r3, #239	; 0xef
 8001866:	6063      	str	r3, [r4, #4]
	}

	// Update R and Z
	leftButtonState = gcButtonInputSnapShot[GC_R];
 8001868:	4b87      	ldr	r3, [pc, #540]	; (8001a88 <GCControllerEmulation_Run+0x554>)
 800186a:	795a      	ldrb	r2, [r3, #5]
	rightButtonState = gcButtonInputSnapShot[GC_Z];
 800186c:	7999      	ldrb	r1, [r3, #6]
	// Make sure the transmit data register is empty before sending next byte
	while(!(USART1->SR & USART_SR_TXE)){};
 800186e:	6823      	ldr	r3, [r4, #0]
 8001870:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001874:	d0fb      	beq.n	800186e <GCControllerEmulation_Run+0x33a>
	// Send states for R and Z
	if( (leftButtonState == RELEASED) && (rightButtonState == RELEASED) )
 8001876:	2a01      	cmp	r2, #1
 8001878:	f000 8116 	beq.w	8001aa8 <GCControllerEmulation_Run+0x574>
	}
	else if( (leftButtonState == RELEASED) && (rightButtonState == PUSHED) )
	{
		USART1->DR = (GC_BITS_01_CASE1 & 0xFF);
	}
	else if( (leftButtonState == PUSHED) && (rightButtonState == RELEASED) )
 800187c:	b912      	cbnz	r2, 8001884 <GCControllerEmulation_Run+0x350>
 800187e:	2901      	cmp	r1, #1
 8001880:	f000 811d 	beq.w	8001abe <GCControllerEmulation_Run+0x58a>
	{
		USART1->DR = (GC_BITS_10_CASE1 & 0xFF);
	}
	else
	{
		USART1->DR = (GC_BITS_11_CASE1 & 0xFF);
 8001884:	23ef      	movs	r3, #239	; 0xef
 8001886:	6063      	str	r3, [r4, #4]
	}

	// Update DU and DD
	leftButtonState = gcButtonInputSnapShot[GC_DPAD_UP];
 8001888:	4b7f      	ldr	r3, [pc, #508]	; (8001a88 <GCControllerEmulation_Run+0x554>)
 800188a:	7a1a      	ldrb	r2, [r3, #8]
	rightButtonState = gcButtonInputSnapShot[GC_DPAD_DOWN];;
 800188c:	7a59      	ldrb	r1, [r3, #9]
	// Make sure the transmit data register is empty before sending next byte
	while(!(USART1->SR & USART_SR_TXE)){};
 800188e:	6823      	ldr	r3, [r4, #0]
 8001890:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001894:	d0fb      	beq.n	800188e <GCControllerEmulation_Run+0x35a>
	// Send states for DU and DD
	if( (leftButtonState == RELEASED) && (rightButtonState == RELEASED) )
 8001896:	2a01      	cmp	r2, #1
 8001898:	f000 8114 	beq.w	8001ac4 <GCControllerEmulation_Run+0x590>
	}
	else if( (leftButtonState == RELEASED) && (rightButtonState == PUSHED) )
	{
		USART1->DR = (GC_BITS_01_CASE1 & 0xFF);
	}
	else if( (leftButtonState == PUSHED) && (rightButtonState == RELEASED) )
 800189c:	b912      	cbnz	r2, 80018a4 <GCControllerEmulation_Run+0x370>
 800189e:	2901      	cmp	r1, #1
 80018a0:	f000 811b 	beq.w	8001ada <GCControllerEmulation_Run+0x5a6>
	{
		USART1->DR = (GC_BITS_10_CASE1 & 0xFF);
	}
	else
	{
		USART1->DR = (GC_BITS_11_CASE1 & 0xFF);
 80018a4:	23ef      	movs	r3, #239	; 0xef
 80018a6:	6063      	str	r3, [r4, #4]
	}

	// Update DR and DL
	leftButtonState = gcButtonInputSnapShot[GC_DPAD_RIGHT];
 80018a8:	4b77      	ldr	r3, [pc, #476]	; (8001a88 <GCControllerEmulation_Run+0x554>)
 80018aa:	7ada      	ldrb	r2, [r3, #11]
	rightButtonState = gcButtonInputSnapShot[GC_DPAD_LEFT];
 80018ac:	7a99      	ldrb	r1, [r3, #10]
	// Make sure the transmit data register is empty before sending next byte
	while(!(USART1->SR & USART_SR_TXE)){};
 80018ae:	6823      	ldr	r3, [r4, #0]
 80018b0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80018b4:	d0fb      	beq.n	80018ae <GCControllerEmulation_Run+0x37a>
	// Send states for DR and DL
	if( (leftButtonState == RELEASED) && (rightButtonState == RELEASED) )
 80018b6:	2a01      	cmp	r2, #1
 80018b8:	f000 8112 	beq.w	8001ae0 <GCControllerEmulation_Run+0x5ac>
	}
	else if( (leftButtonState == RELEASED) && (rightButtonState == PUSHED) )
	{
		USART1->DR = (GC_BITS_01_CASE1 & 0xFF);
	}
	else if( (leftButtonState == PUSHED) && (rightButtonState == RELEASED) )
 80018bc:	b912      	cbnz	r2, 80018c4 <GCControllerEmulation_Run+0x390>
 80018be:	2901      	cmp	r1, #1
 80018c0:	f000 8119 	beq.w	8001af6 <GCControllerEmulation_Run+0x5c2>
	{
		USART1->DR = (GC_BITS_10_CASE1 & 0xFF);
	}
	else
	{
		USART1->DR = (GC_BITS_11_CASE1 & 0xFF);
 80018c4:	23ef      	movs	r3, #239	; 0xef
 80018c6:	6063      	str	r3, [r4, #4]
	}

	/* Third byte to console */
	// Make sure the transmit data register is empty before sending next byte
	while(!(USART1->SR & USART_SR_TXE)){};
 80018c8:	6823      	ldr	r3, [r4, #0]
 80018ca:	f013 0f80 	tst.w	r3, #128	; 0x80
 80018ce:	d0fb      	beq.n	80018c8 <GCControllerEmulation_Run+0x394>
	// Send states for MAIN STICK X AXIS BIT7 AND BIT6
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 80018d0:	2308      	movs	r3, #8
 80018d2:	6063      	str	r3, [r4, #4]

	// Make sure the transmit data register is empty before sending next byte
	while(!(USART1->SR & USART_SR_TXE)){};
 80018d4:	6823      	ldr	r3, [r4, #0]
 80018d6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80018da:	d0fb      	beq.n	80018d4 <GCControllerEmulation_Run+0x3a0>
	// Send states for MAIN STICK X AXIS BIT5 AND BIT4
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 80018dc:	2308      	movs	r3, #8
 80018de:	6063      	str	r3, [r4, #4]

	// Make sure the transmit data register is empty before sending next byte
	while(!(USART1->SR & USART_SR_TXE)){};
 80018e0:	6823      	ldr	r3, [r4, #0]
 80018e2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80018e6:	d0fb      	beq.n	80018e0 <GCControllerEmulation_Run+0x3ac>
	// Send states for MAIN STICK X AXIS BIT2 AND BIT2
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 80018e8:	2308      	movs	r3, #8
 80018ea:	6063      	str	r3, [r4, #4]

	// Make sure the transmit data register is empty before sending next byte
	while(!(USART1->SR & USART_SR_TXE)){};
 80018ec:	6823      	ldr	r3, [r4, #0]
 80018ee:	f013 0f80 	tst.w	r3, #128	; 0x80
 80018f2:	d0fb      	beq.n	80018ec <GCControllerEmulation_Run+0x3b8>
	// Send states for MAIN STICK X AXIS BIT1 AND BIT0
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 80018f4:	2308      	movs	r3, #8
 80018f6:	6063      	str	r3, [r4, #4]

	/* Fourth byte to console */
	// Make sure the transmit data register is empty before sending next byte
	while(!(USART1->SR & USART_SR_TXE)){};
 80018f8:	6823      	ldr	r3, [r4, #0]
 80018fa:	f013 0f80 	tst.w	r3, #128	; 0x80
 80018fe:	d0fb      	beq.n	80018f8 <GCControllerEmulation_Run+0x3c4>
	// Send states for MAIN STICK Y AXIS BIT7 AND BIT6
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001900:	2308      	movs	r3, #8
 8001902:	6063      	str	r3, [r4, #4]

	// Make sure the transmit data register is empty before sending next byte
	while(!(USART1->SR & USART_SR_TXE)){};
 8001904:	6823      	ldr	r3, [r4, #0]
 8001906:	f013 0f80 	tst.w	r3, #128	; 0x80
 800190a:	d0fb      	beq.n	8001904 <GCControllerEmulation_Run+0x3d0>
	// Send states for MAIN STICK Y AXIS BIT5 AND BIT4
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 800190c:	2308      	movs	r3, #8
 800190e:	6063      	str	r3, [r4, #4]

	// Make sure the transmit data register is empty before sending next byte
	while(!(USART1->SR & USART_SR_TXE)){};
 8001910:	6823      	ldr	r3, [r4, #0]
 8001912:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001916:	d0fb      	beq.n	8001910 <GCControllerEmulation_Run+0x3dc>
	// Send states for MAIN STICK Y AXIS BIT3 AND BIT2
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001918:	2308      	movs	r3, #8
 800191a:	6063      	str	r3, [r4, #4]

	// Make sure the transmit data register is empty before sending next byte
	while(!(USART1->SR & USART_SR_TXE)){};
 800191c:	6823      	ldr	r3, [r4, #0]
 800191e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001922:	d0fb      	beq.n	800191c <GCControllerEmulation_Run+0x3e8>
	// Send states for MAIN STICK Y AXIS BIT1 AND BIT0
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001924:	2308      	movs	r3, #8
 8001926:	6063      	str	r3, [r4, #4]

	/* Fifth byte to console */
	// Make sure the transmit data register is empty before sending next byte
	while(!(USART1->SR & USART_SR_TXE)){};
 8001928:	6823      	ldr	r3, [r4, #0]
 800192a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800192e:	d0fb      	beq.n	8001928 <GCControllerEmulation_Run+0x3f4>
	// Send states for C STICK X AXIS BIT7 AND BIT6
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001930:	2308      	movs	r3, #8
 8001932:	6063      	str	r3, [r4, #4]

	// Make sure the transmit data register is empty before sending next byte
	while(!(USART1->SR & USART_SR_TXE)){};
 8001934:	6823      	ldr	r3, [r4, #0]
 8001936:	f013 0f80 	tst.w	r3, #128	; 0x80
 800193a:	d0fb      	beq.n	8001934 <GCControllerEmulation_Run+0x400>
	// Send states for C STICK X AXIS BIT5 AND BIT4
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 800193c:	2308      	movs	r3, #8
 800193e:	6063      	str	r3, [r4, #4]

	// Make sure the transmit data register is empty before sending next byte
	while(!(USART1->SR & USART_SR_TXE)){};
 8001940:	6823      	ldr	r3, [r4, #0]
 8001942:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001946:	d0fb      	beq.n	8001940 <GCControllerEmulation_Run+0x40c>
	// Send states for C STICK X AXIS BIT3 AND BIT2
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001948:	2308      	movs	r3, #8
 800194a:	6063      	str	r3, [r4, #4]

	// Make sure the transmit data register is empty before sending next byte
	while(!(USART1->SR & USART_SR_TXE)){};
 800194c:	6823      	ldr	r3, [r4, #0]
 800194e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001952:	d0fb      	beq.n	800194c <GCControllerEmulation_Run+0x418>
	// Send states for C STICK X AXIS BIT1 AND BIT0
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001954:	2308      	movs	r3, #8
 8001956:	6063      	str	r3, [r4, #4]

	/* Sixth byte to console */
	// Make sure the transmit data register is empty before sending next byte
	while(!(USART1->SR & USART_SR_TXE)){};
 8001958:	6823      	ldr	r3, [r4, #0]
 800195a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800195e:	d0fb      	beq.n	8001958 <GCControllerEmulation_Run+0x424>
	// Send states for C STICK Y AXIS BIT7 AND BIT6
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001960:	2308      	movs	r3, #8
 8001962:	6063      	str	r3, [r4, #4]

	// Make sure the transmit data register is empty before sending next byte
	while(!(USART1->SR & USART_SR_TXE)){};
 8001964:	6823      	ldr	r3, [r4, #0]
 8001966:	f013 0f80 	tst.w	r3, #128	; 0x80
 800196a:	d0fb      	beq.n	8001964 <GCControllerEmulation_Run+0x430>
	// Send states for C STICK Y AXIS BIT5 AND BIT4
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 800196c:	2308      	movs	r3, #8
 800196e:	6063      	str	r3, [r4, #4]

	// Make sure the transmit data register is empty before sending next byte
	while(!(USART1->SR & USART_SR_TXE)){};
 8001970:	6823      	ldr	r3, [r4, #0]
 8001972:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001976:	d0fb      	beq.n	8001970 <GCControllerEmulation_Run+0x43c>
	// Send states for C STICK Y AXIS BIT3 AND BIT2
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001978:	2308      	movs	r3, #8
 800197a:	6063      	str	r3, [r4, #4]

	// Make sure the transmit data register is empty before sending next byte
	while(!(USART1->SR & USART_SR_TXE)){};
 800197c:	6823      	ldr	r3, [r4, #0]
 800197e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001982:	d0fb      	beq.n	800197c <GCControllerEmulation_Run+0x448>
	// Send states for C STICK Y AXIS BIT1 AND BIT0
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001984:	2308      	movs	r3, #8
 8001986:	6063      	str	r3, [r4, #4]

	/* Seventh byte to console */
	// Make sure the transmit data register is empty before sending next byte
	while(!(USART1->SR & USART_SR_TXE)){};
 8001988:	6823      	ldr	r3, [r4, #0]
 800198a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800198e:	d0fb      	beq.n	8001988 <GCControllerEmulation_Run+0x454>
	// Send states for L TRIGGER BIT7 AND BIT6
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001990:	2308      	movs	r3, #8
 8001992:	6063      	str	r3, [r4, #4]

	// Make sure the transmit data register is empty before sending next byte
	while(!(USART1->SR & USART_SR_TXE)){};
 8001994:	6823      	ldr	r3, [r4, #0]
 8001996:	f013 0f80 	tst.w	r3, #128	; 0x80
 800199a:	d0fb      	beq.n	8001994 <GCControllerEmulation_Run+0x460>
	// Send states for L TRIGGER BIT5 AND BIT4
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 800199c:	2308      	movs	r3, #8
 800199e:	6063      	str	r3, [r4, #4]

	// Make sure the transmit data register is empty before sending next byte
	while(!(USART1->SR & USART_SR_TXE)){};
 80019a0:	6823      	ldr	r3, [r4, #0]
 80019a2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80019a6:	d0fb      	beq.n	80019a0 <GCControllerEmulation_Run+0x46c>
	// Send states for L TRIGGER BIT3 AND BIT2
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 80019a8:	2308      	movs	r3, #8
 80019aa:	6063      	str	r3, [r4, #4]

	// Make sure the transmit data register is empty before sending next byte
	while(!(USART1->SR & USART_SR_TXE)){};
 80019ac:	6823      	ldr	r3, [r4, #0]
 80019ae:	f013 0f80 	tst.w	r3, #128	; 0x80
 80019b2:	d0fb      	beq.n	80019ac <GCControllerEmulation_Run+0x478>
	// Send states for L TRIGGER BIT1 AND BIT0
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 80019b4:	2308      	movs	r3, #8
 80019b6:	6063      	str	r3, [r4, #4]

	/* Eighth byte to console */
	// Make sure the transmit data register is empty before sending next byte
	while(!(USART1->SR & USART_SR_TXE)){};
 80019b8:	6823      	ldr	r3, [r4, #0]
 80019ba:	f013 0f80 	tst.w	r3, #128	; 0x80
 80019be:	d0fb      	beq.n	80019b8 <GCControllerEmulation_Run+0x484>
	// Send states for R TRIGGER BIT7 AND BIT6
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 80019c0:	2308      	movs	r3, #8
 80019c2:	6063      	str	r3, [r4, #4]

	// Make sure the transmit data register is empty before sending next byte
	while(!(USART1->SR & USART_SR_TXE)){};
 80019c4:	6823      	ldr	r3, [r4, #0]
 80019c6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80019ca:	d0fb      	beq.n	80019c4 <GCControllerEmulation_Run+0x490>
	// Send states for R TRIGGER BIT5 AND BIT4
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 80019cc:	2308      	movs	r3, #8
 80019ce:	6063      	str	r3, [r4, #4]

	// Make sure the transmit data register is empty before sending next byte
	while(!(USART1->SR & USART_SR_TXE)){};
 80019d0:	6823      	ldr	r3, [r4, #0]
 80019d2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80019d6:	d0fb      	beq.n	80019d0 <GCControllerEmulation_Run+0x49c>
	// Send states for R TRIGGER BIT3 AND BIT2
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 80019d8:	2308      	movs	r3, #8
 80019da:	6063      	str	r3, [r4, #4]

	// Make sure the transmit data register is empty before sending next byte
	while(!(USART1->SR & USART_SR_TXE)){};
 80019dc:	6823      	ldr	r3, [r4, #0]
 80019de:	f013 0f80 	tst.w	r3, #128	; 0x80
 80019e2:	d0fb      	beq.n	80019dc <GCControllerEmulation_Run+0x4a8>
	// Send states for R TRIGGER BIT1 AND BIT0
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 80019e4:	2308      	movs	r3, #8
 80019e6:	6063      	str	r3, [r4, #4]
	// Optional bytes to send
	if(command == GC_COMMAND_PROBE_ORIGIN)
	{
		/* Ninth byte to console */
		// Make sure the transmit data register is empty before sending next byte
		while(!(USART1->SR & USART_SR_TXE)){};
 80019e8:	6823      	ldr	r3, [r4, #0]
 80019ea:	f013 0f80 	tst.w	r3, #128	; 0x80
 80019ee:	d0fb      	beq.n	80019e8 <GCControllerEmulation_Run+0x4b4>
		// Send states for
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 80019f0:	2308      	movs	r3, #8
 80019f2:	6063      	str	r3, [r4, #4]

		// Make sure the transmit data register is empty before sending next byte
		while(!(USART1->SR & USART_SR_TXE)){};
 80019f4:	6823      	ldr	r3, [r4, #0]
 80019f6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80019fa:	d0fb      	beq.n	80019f4 <GCControllerEmulation_Run+0x4c0>
		// Send states for
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 80019fc:	2308      	movs	r3, #8
 80019fe:	6063      	str	r3, [r4, #4]

		// Make sure the transmit data register is empty before sending next byte
		while(!(USART1->SR & USART_SR_TXE)){};
 8001a00:	6823      	ldr	r3, [r4, #0]
 8001a02:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001a06:	d0fb      	beq.n	8001a00 <GCControllerEmulation_Run+0x4cc>
		// Send states for
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001a08:	2308      	movs	r3, #8
 8001a0a:	6063      	str	r3, [r4, #4]

		// Make sure the transmit data register is empty before sending next byte
		while(!(USART1->SR & USART_SR_TXE)){};
 8001a0c:	6823      	ldr	r3, [r4, #0]
 8001a0e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001a12:	d0fb      	beq.n	8001a0c <GCControllerEmulation_Run+0x4d8>
		// Send states for
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001a14:	2308      	movs	r3, #8
 8001a16:	6063      	str	r3, [r4, #4]

		/* Tenth byte to console */
		// Make sure the transmit data register is empty before sending next byte
		while(!(USART1->SR & USART_SR_TXE)){};
 8001a18:	6823      	ldr	r3, [r4, #0]
 8001a1a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001a1e:	d0fb      	beq.n	8001a18 <GCControllerEmulation_Run+0x4e4>
		// Send states for
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001a20:	2308      	movs	r3, #8
 8001a22:	6063      	str	r3, [r4, #4]

		// Make sure the transmit data register is empty before sending next byte
		while(!(USART1->SR & USART_SR_TXE)){};
 8001a24:	6823      	ldr	r3, [r4, #0]
 8001a26:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001a2a:	d0fb      	beq.n	8001a24 <GCControllerEmulation_Run+0x4f0>
		// Send states for
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001a2c:	2308      	movs	r3, #8
 8001a2e:	6063      	str	r3, [r4, #4]

		// Make sure the transmit data register is empty before sending next byte
		while(!(USART1->SR & USART_SR_TXE)){};
 8001a30:	6823      	ldr	r3, [r4, #0]
 8001a32:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001a36:	d0fb      	beq.n	8001a30 <GCControllerEmulation_Run+0x4fc>
		// Send states for
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001a38:	2308      	movs	r3, #8
 8001a3a:	6063      	str	r3, [r4, #4]

		// Make sure the transmit data register is empty before sending next byte
		while(!(USART1->SR & USART_SR_TXE)){};
 8001a3c:	6823      	ldr	r3, [r4, #0]
 8001a3e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001a42:	d0fb      	beq.n	8001a3c <GCControllerEmulation_Run+0x508>
		// Send states for
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001a44:	2308      	movs	r3, #8
 8001a46:	6063      	str	r3, [r4, #4]
	}

	/* Stop bit to console */
	// Make sure the last UART byte transmission is complete before sending stop bit
	while(!(USART1->SR & USART_SR_TC)){};
 8001a48:	6823      	ldr	r3, [r4, #0]
 8001a4a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001a4e:	d0fb      	beq.n	8001a48 <GCControllerEmulation_Run+0x514>
	GC_STOP_PORT->BSRR = GC_STOP_CLEAR;
 8001a50:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a54:	61bb      	str	r3, [r7, #24]
	volatile uint32_t counter = 17;
 8001a56:	2311      	movs	r3, #17
 8001a58:	9303      	str	r3, [sp, #12]
	while(counter--);
 8001a5a:	9b03      	ldr	r3, [sp, #12]
 8001a5c:	1e5a      	subs	r2, r3, #1
 8001a5e:	9203      	str	r2, [sp, #12]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1fa      	bne.n	8001a5a <GCControllerEmulation_Run+0x526>
	GC_STOP_PORT->BSRR = GC_STOP_SET;
 8001a64:	2320      	movs	r3, #32
 8001a66:	61bb      	str	r3, [r7, #24]
 8001a68:	e651      	b.n	800170e <GCControllerEmulation_Run+0x1da>
	if( (leftButtonState == RELEASED) && (rightButtonState == RELEASED) )
 8001a6a:	2901      	cmp	r1, #1
 8001a6c:	d005      	beq.n	8001a7a <GCControllerEmulation_Run+0x546>
	else if( (leftButtonState == RELEASED) && (rightButtonState == PUSHED) )
 8001a6e:	2900      	cmp	r1, #0
 8001a70:	f47f aedd 	bne.w	800182e <GCControllerEmulation_Run+0x2fa>
		USART1->DR = (GC_BITS_01_CASE1 & 0xFF);
 8001a74:	23e8      	movs	r3, #232	; 0xe8
 8001a76:	6063      	str	r3, [r4, #4]
 8001a78:	e6db      	b.n	8001832 <GCControllerEmulation_Run+0x2fe>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001a7a:	2308      	movs	r3, #8
 8001a7c:	6063      	str	r3, [r4, #4]
 8001a7e:	e6d8      	b.n	8001832 <GCControllerEmulation_Run+0x2fe>
		USART1->DR = (GC_BITS_10_CASE1 & 0xFF);
 8001a80:	230f      	movs	r3, #15
 8001a82:	6063      	str	r3, [r4, #4]
 8001a84:	e6d5      	b.n	8001832 <GCControllerEmulation_Run+0x2fe>
 8001a86:	bf00      	nop
 8001a88:	20000028 	.word	0x20000028
	if( (leftButtonState == RELEASED) && (rightButtonState == RELEASED) )
 8001a8c:	2901      	cmp	r1, #1
 8001a8e:	d005      	beq.n	8001a9c <GCControllerEmulation_Run+0x568>
	else if( (leftButtonState == RELEASED) && (rightButtonState == PUSHED) )
 8001a90:	2900      	cmp	r1, #0
 8001a92:	f47f aedc 	bne.w	800184e <GCControllerEmulation_Run+0x31a>
		USART1->DR = (GC_BITS_01_CASE1 & 0xFF);
 8001a96:	23e8      	movs	r3, #232	; 0xe8
 8001a98:	6063      	str	r3, [r4, #4]
 8001a9a:	e6da      	b.n	8001852 <GCControllerEmulation_Run+0x31e>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001a9c:	2308      	movs	r3, #8
 8001a9e:	6063      	str	r3, [r4, #4]
 8001aa0:	e6d7      	b.n	8001852 <GCControllerEmulation_Run+0x31e>
		USART1->DR = (GC_BITS_10_CASE1 & 0xFF);
 8001aa2:	230f      	movs	r3, #15
 8001aa4:	6063      	str	r3, [r4, #4]
 8001aa6:	e6d4      	b.n	8001852 <GCControllerEmulation_Run+0x31e>
	if( (leftButtonState == RELEASED) && (rightButtonState == RELEASED) )
 8001aa8:	2901      	cmp	r1, #1
 8001aaa:	d005      	beq.n	8001ab8 <GCControllerEmulation_Run+0x584>
	else if( (leftButtonState == RELEASED) && (rightButtonState == PUSHED) )
 8001aac:	2900      	cmp	r1, #0
 8001aae:	f47f aee9 	bne.w	8001884 <GCControllerEmulation_Run+0x350>
		USART1->DR = (GC_BITS_01_CASE1 & 0xFF);
 8001ab2:	23e8      	movs	r3, #232	; 0xe8
 8001ab4:	6063      	str	r3, [r4, #4]
 8001ab6:	e6e7      	b.n	8001888 <GCControllerEmulation_Run+0x354>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001ab8:	2308      	movs	r3, #8
 8001aba:	6063      	str	r3, [r4, #4]
 8001abc:	e6e4      	b.n	8001888 <GCControllerEmulation_Run+0x354>
		USART1->DR = (GC_BITS_10_CASE1 & 0xFF);
 8001abe:	230f      	movs	r3, #15
 8001ac0:	6063      	str	r3, [r4, #4]
 8001ac2:	e6e1      	b.n	8001888 <GCControllerEmulation_Run+0x354>
	if( (leftButtonState == RELEASED) && (rightButtonState == RELEASED) )
 8001ac4:	2901      	cmp	r1, #1
 8001ac6:	d005      	beq.n	8001ad4 <GCControllerEmulation_Run+0x5a0>
	else if( (leftButtonState == RELEASED) && (rightButtonState == PUSHED) )
 8001ac8:	2900      	cmp	r1, #0
 8001aca:	f47f aeeb 	bne.w	80018a4 <GCControllerEmulation_Run+0x370>
		USART1->DR = (GC_BITS_01_CASE1 & 0xFF);
 8001ace:	23e8      	movs	r3, #232	; 0xe8
 8001ad0:	6063      	str	r3, [r4, #4]
 8001ad2:	e6e9      	b.n	80018a8 <GCControllerEmulation_Run+0x374>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001ad4:	2308      	movs	r3, #8
 8001ad6:	6063      	str	r3, [r4, #4]
 8001ad8:	e6e6      	b.n	80018a8 <GCControllerEmulation_Run+0x374>
		USART1->DR = (GC_BITS_10_CASE1 & 0xFF);
 8001ada:	230f      	movs	r3, #15
 8001adc:	6063      	str	r3, [r4, #4]
 8001ade:	e6e3      	b.n	80018a8 <GCControllerEmulation_Run+0x374>
	if( (leftButtonState == RELEASED) && (rightButtonState == RELEASED) )
 8001ae0:	2901      	cmp	r1, #1
 8001ae2:	d005      	beq.n	8001af0 <GCControllerEmulation_Run+0x5bc>
	else if( (leftButtonState == RELEASED) && (rightButtonState == PUSHED) )
 8001ae4:	2900      	cmp	r1, #0
 8001ae6:	f47f aeed 	bne.w	80018c4 <GCControllerEmulation_Run+0x390>
		USART1->DR = (GC_BITS_01_CASE1 & 0xFF);
 8001aea:	23e8      	movs	r3, #232	; 0xe8
 8001aec:	6063      	str	r3, [r4, #4]
 8001aee:	e6eb      	b.n	80018c8 <GCControllerEmulation_Run+0x394>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001af0:	2308      	movs	r3, #8
 8001af2:	6063      	str	r3, [r4, #4]
 8001af4:	e6e8      	b.n	80018c8 <GCControllerEmulation_Run+0x394>
		USART1->DR = (GC_BITS_10_CASE1 & 0xFF);
 8001af6:	230f      	movs	r3, #15
 8001af8:	6063      	str	r3, [r4, #4]
 8001afa:	e6e5      	b.n	80018c8 <GCControllerEmulation_Run+0x394>
	GCControllerEmulation_GetSwitchSnapshot();
 8001afc:	f7ff fcb8 	bl	8001470 <GCControllerEmulation_GetSwitchSnapshot>
	while(!(USART1->SR & USART_SR_TXE)){};
 8001b00:	6823      	ldr	r3, [r4, #0]
 8001b02:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001b06:	d0fb      	beq.n	8001b00 <GCControllerEmulation_Run+0x5cc>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001b08:	2308      	movs	r3, #8
 8001b0a:	6063      	str	r3, [r4, #4]
	rightButtonState = gcButtonInputSnapShot[GC_START];
 8001b0c:	4ba3      	ldr	r3, [pc, #652]	; (8001d9c <GCControllerEmulation_Run+0x868>)
 8001b0e:	79da      	ldrb	r2, [r3, #7]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001b10:	6823      	ldr	r3, [r4, #0]
 8001b12:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001b16:	d0fb      	beq.n	8001b10 <GCControllerEmulation_Run+0x5dc>
	if(rightButtonState == RELEASED)
 8001b18:	2a01      	cmp	r2, #1
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001b1a:	bf0c      	ite	eq
 8001b1c:	2308      	moveq	r3, #8
		USART1->DR = (GC_BITS_01_CASE1 & 0xFF);
 8001b1e:	23e8      	movne	r3, #232	; 0xe8
 8001b20:	6063      	str	r3, [r4, #4]
	leftButtonState = gcButtonInputSnapShot[GC_Y];
 8001b22:	4b9e      	ldr	r3, [pc, #632]	; (8001d9c <GCControllerEmulation_Run+0x868>)
 8001b24:	78da      	ldrb	r2, [r3, #3]
	rightButtonState = gcButtonInputSnapShot[GC_X];
 8001b26:	7899      	ldrb	r1, [r3, #2]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001b28:	6823      	ldr	r3, [r4, #0]
 8001b2a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001b2e:	d0fb      	beq.n	8001b28 <GCControllerEmulation_Run+0x5f4>
	if( (leftButtonState == RELEASED) && (rightButtonState == RELEASED) )
 8001b30:	2a01      	cmp	r2, #1
 8001b32:	f000 80f2 	beq.w	8001d1a <GCControllerEmulation_Run+0x7e6>
	else if( (leftButtonState == PUSHED) && (rightButtonState == RELEASED) )
 8001b36:	b912      	cbnz	r2, 8001b3e <GCControllerEmulation_Run+0x60a>
 8001b38:	2901      	cmp	r1, #1
 8001b3a:	f000 80f9 	beq.w	8001d30 <GCControllerEmulation_Run+0x7fc>
		USART1->DR = (GC_BITS_11_CASE1 & 0xFF);
 8001b3e:	23ef      	movs	r3, #239	; 0xef
 8001b40:	6063      	str	r3, [r4, #4]
	leftButtonState = gcButtonInputSnapShot[GC_B];
 8001b42:	4b96      	ldr	r3, [pc, #600]	; (8001d9c <GCControllerEmulation_Run+0x868>)
 8001b44:	785a      	ldrb	r2, [r3, #1]
	rightButtonState = gcButtonInputSnapShot[GC_A];
 8001b46:	7819      	ldrb	r1, [r3, #0]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001b48:	6823      	ldr	r3, [r4, #0]
 8001b4a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001b4e:	d0fb      	beq.n	8001b48 <GCControllerEmulation_Run+0x614>
	if( (leftButtonState == RELEASED) && (rightButtonState == RELEASED) )
 8001b50:	2a01      	cmp	r2, #1
 8001b52:	f000 80f0 	beq.w	8001d36 <GCControllerEmulation_Run+0x802>
	else if( (leftButtonState == PUSHED) && (rightButtonState == RELEASED) )
 8001b56:	b912      	cbnz	r2, 8001b5e <GCControllerEmulation_Run+0x62a>
 8001b58:	2901      	cmp	r1, #1
 8001b5a:	f000 80f7 	beq.w	8001d4c <GCControllerEmulation_Run+0x818>
		USART1->DR = (GC_BITS_11_CASE1 & 0xFF);
 8001b5e:	23ef      	movs	r3, #239	; 0xef
 8001b60:	6063      	str	r3, [r4, #4]
	rightButtonState = gcButtonInputSnapShot[GC_L];
 8001b62:	4b8e      	ldr	r3, [pc, #568]	; (8001d9c <GCControllerEmulation_Run+0x868>)
 8001b64:	791a      	ldrb	r2, [r3, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001b66:	6823      	ldr	r3, [r4, #0]
 8001b68:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001b6c:	d0fb      	beq.n	8001b66 <GCControllerEmulation_Run+0x632>
	if(rightButtonState == RELEASED)
 8001b6e:	2a01      	cmp	r2, #1
		USART1->DR = (GC_BITS_10_CASE1 & 0xFF);
 8001b70:	bf0c      	ite	eq
 8001b72:	230f      	moveq	r3, #15
		USART1->DR = (GC_BITS_11_CASE1 & 0xFF);
 8001b74:	23ef      	movne	r3, #239	; 0xef
 8001b76:	6063      	str	r3, [r4, #4]
	leftButtonState = gcButtonInputSnapShot[GC_R];
 8001b78:	4b88      	ldr	r3, [pc, #544]	; (8001d9c <GCControllerEmulation_Run+0x868>)
 8001b7a:	795a      	ldrb	r2, [r3, #5]
	rightButtonState = gcButtonInputSnapShot[GC_Z];
 8001b7c:	7999      	ldrb	r1, [r3, #6]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001b7e:	6823      	ldr	r3, [r4, #0]
 8001b80:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001b84:	d0fb      	beq.n	8001b7e <GCControllerEmulation_Run+0x64a>
	if( (leftButtonState == RELEASED) && (rightButtonState == RELEASED) )
 8001b86:	2a01      	cmp	r2, #1
 8001b88:	f000 80e3 	beq.w	8001d52 <GCControllerEmulation_Run+0x81e>
	else if( (leftButtonState == PUSHED) && (rightButtonState == RELEASED) )
 8001b8c:	b912      	cbnz	r2, 8001b94 <GCControllerEmulation_Run+0x660>
 8001b8e:	2901      	cmp	r1, #1
 8001b90:	f000 80ea 	beq.w	8001d68 <GCControllerEmulation_Run+0x834>
		USART1->DR = (GC_BITS_11_CASE1 & 0xFF);
 8001b94:	23ef      	movs	r3, #239	; 0xef
 8001b96:	6063      	str	r3, [r4, #4]
	leftButtonState = gcButtonInputSnapShot[GC_DPAD_UP];
 8001b98:	4b80      	ldr	r3, [pc, #512]	; (8001d9c <GCControllerEmulation_Run+0x868>)
 8001b9a:	7a1a      	ldrb	r2, [r3, #8]
	rightButtonState = gcButtonInputSnapShot[GC_DPAD_DOWN];;
 8001b9c:	7a59      	ldrb	r1, [r3, #9]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001b9e:	6823      	ldr	r3, [r4, #0]
 8001ba0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001ba4:	d0fb      	beq.n	8001b9e <GCControllerEmulation_Run+0x66a>
	if( (leftButtonState == RELEASED) && (rightButtonState == RELEASED) )
 8001ba6:	2a01      	cmp	r2, #1
 8001ba8:	f000 80e1 	beq.w	8001d6e <GCControllerEmulation_Run+0x83a>
	else if( (leftButtonState == PUSHED) && (rightButtonState == RELEASED) )
 8001bac:	b912      	cbnz	r2, 8001bb4 <GCControllerEmulation_Run+0x680>
 8001bae:	2901      	cmp	r1, #1
 8001bb0:	f000 80e8 	beq.w	8001d84 <GCControllerEmulation_Run+0x850>
		USART1->DR = (GC_BITS_11_CASE1 & 0xFF);
 8001bb4:	23ef      	movs	r3, #239	; 0xef
 8001bb6:	6063      	str	r3, [r4, #4]
	leftButtonState = gcButtonInputSnapShot[GC_DPAD_RIGHT];
 8001bb8:	4b78      	ldr	r3, [pc, #480]	; (8001d9c <GCControllerEmulation_Run+0x868>)
 8001bba:	7ada      	ldrb	r2, [r3, #11]
	rightButtonState = gcButtonInputSnapShot[GC_DPAD_LEFT];
 8001bbc:	7a99      	ldrb	r1, [r3, #10]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001bbe:	6823      	ldr	r3, [r4, #0]
 8001bc0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001bc4:	d0fb      	beq.n	8001bbe <GCControllerEmulation_Run+0x68a>
	if( (leftButtonState == RELEASED) && (rightButtonState == RELEASED) )
 8001bc6:	2a01      	cmp	r2, #1
 8001bc8:	f000 80df 	beq.w	8001d8a <GCControllerEmulation_Run+0x856>
	else if( (leftButtonState == PUSHED) && (rightButtonState == RELEASED) )
 8001bcc:	b912      	cbnz	r2, 8001bd4 <GCControllerEmulation_Run+0x6a0>
 8001bce:	2901      	cmp	r1, #1
 8001bd0:	f000 80e9 	beq.w	8001da6 <GCControllerEmulation_Run+0x872>
		USART1->DR = (GC_BITS_11_CASE1 & 0xFF);
 8001bd4:	23ef      	movs	r3, #239	; 0xef
 8001bd6:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001bd8:	6823      	ldr	r3, [r4, #0]
 8001bda:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001bde:	d0fb      	beq.n	8001bd8 <GCControllerEmulation_Run+0x6a4>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001be0:	2308      	movs	r3, #8
 8001be2:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001be4:	6823      	ldr	r3, [r4, #0]
 8001be6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001bea:	d0fb      	beq.n	8001be4 <GCControllerEmulation_Run+0x6b0>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001bec:	2308      	movs	r3, #8
 8001bee:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001bf0:	6823      	ldr	r3, [r4, #0]
 8001bf2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001bf6:	d0fb      	beq.n	8001bf0 <GCControllerEmulation_Run+0x6bc>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001bf8:	2308      	movs	r3, #8
 8001bfa:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001bfc:	6823      	ldr	r3, [r4, #0]
 8001bfe:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001c02:	d0fb      	beq.n	8001bfc <GCControllerEmulation_Run+0x6c8>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001c04:	2308      	movs	r3, #8
 8001c06:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001c08:	6823      	ldr	r3, [r4, #0]
 8001c0a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001c0e:	d0fb      	beq.n	8001c08 <GCControllerEmulation_Run+0x6d4>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001c10:	2308      	movs	r3, #8
 8001c12:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001c14:	6823      	ldr	r3, [r4, #0]
 8001c16:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001c1a:	d0fb      	beq.n	8001c14 <GCControllerEmulation_Run+0x6e0>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001c1c:	2308      	movs	r3, #8
 8001c1e:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001c20:	6823      	ldr	r3, [r4, #0]
 8001c22:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001c26:	d0fb      	beq.n	8001c20 <GCControllerEmulation_Run+0x6ec>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001c28:	2308      	movs	r3, #8
 8001c2a:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001c2c:	6823      	ldr	r3, [r4, #0]
 8001c2e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001c32:	d0fb      	beq.n	8001c2c <GCControllerEmulation_Run+0x6f8>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001c34:	2308      	movs	r3, #8
 8001c36:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001c38:	6823      	ldr	r3, [r4, #0]
 8001c3a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001c3e:	d0fb      	beq.n	8001c38 <GCControllerEmulation_Run+0x704>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001c40:	2308      	movs	r3, #8
 8001c42:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001c44:	6823      	ldr	r3, [r4, #0]
 8001c46:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001c4a:	d0fb      	beq.n	8001c44 <GCControllerEmulation_Run+0x710>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001c4c:	2308      	movs	r3, #8
 8001c4e:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001c50:	6823      	ldr	r3, [r4, #0]
 8001c52:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001c56:	d0fb      	beq.n	8001c50 <GCControllerEmulation_Run+0x71c>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001c58:	2308      	movs	r3, #8
 8001c5a:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001c5c:	6823      	ldr	r3, [r4, #0]
 8001c5e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001c62:	d0fb      	beq.n	8001c5c <GCControllerEmulation_Run+0x728>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001c64:	2308      	movs	r3, #8
 8001c66:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001c68:	6823      	ldr	r3, [r4, #0]
 8001c6a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001c6e:	d0fb      	beq.n	8001c68 <GCControllerEmulation_Run+0x734>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001c70:	2308      	movs	r3, #8
 8001c72:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001c74:	6823      	ldr	r3, [r4, #0]
 8001c76:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001c7a:	d0fb      	beq.n	8001c74 <GCControllerEmulation_Run+0x740>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001c7c:	2308      	movs	r3, #8
 8001c7e:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001c80:	6823      	ldr	r3, [r4, #0]
 8001c82:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001c86:	d0fb      	beq.n	8001c80 <GCControllerEmulation_Run+0x74c>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001c88:	2308      	movs	r3, #8
 8001c8a:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001c8c:	6823      	ldr	r3, [r4, #0]
 8001c8e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001c92:	d0fb      	beq.n	8001c8c <GCControllerEmulation_Run+0x758>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001c94:	2308      	movs	r3, #8
 8001c96:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001c98:	6823      	ldr	r3, [r4, #0]
 8001c9a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001c9e:	d0fb      	beq.n	8001c98 <GCControllerEmulation_Run+0x764>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001ca0:	2308      	movs	r3, #8
 8001ca2:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001ca4:	6823      	ldr	r3, [r4, #0]
 8001ca6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001caa:	d0fb      	beq.n	8001ca4 <GCControllerEmulation_Run+0x770>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001cac:	2308      	movs	r3, #8
 8001cae:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001cb0:	6823      	ldr	r3, [r4, #0]
 8001cb2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001cb6:	d0fb      	beq.n	8001cb0 <GCControllerEmulation_Run+0x77c>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001cb8:	2308      	movs	r3, #8
 8001cba:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001cbc:	6823      	ldr	r3, [r4, #0]
 8001cbe:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001cc2:	d0fb      	beq.n	8001cbc <GCControllerEmulation_Run+0x788>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001cc4:	2308      	movs	r3, #8
 8001cc6:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001cc8:	6823      	ldr	r3, [r4, #0]
 8001cca:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001cce:	d0fb      	beq.n	8001cc8 <GCControllerEmulation_Run+0x794>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001cd0:	2308      	movs	r3, #8
 8001cd2:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001cd4:	6823      	ldr	r3, [r4, #0]
 8001cd6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001cda:	d0fb      	beq.n	8001cd4 <GCControllerEmulation_Run+0x7a0>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001cdc:	2308      	movs	r3, #8
 8001cde:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001ce0:	6823      	ldr	r3, [r4, #0]
 8001ce2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001ce6:	d0fb      	beq.n	8001ce0 <GCControllerEmulation_Run+0x7ac>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001ce8:	2308      	movs	r3, #8
 8001cea:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001cec:	6823      	ldr	r3, [r4, #0]
 8001cee:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001cf2:	d0fb      	beq.n	8001cec <GCControllerEmulation_Run+0x7b8>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001cf4:	2308      	movs	r3, #8
 8001cf6:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TC)){};
 8001cf8:	6823      	ldr	r3, [r4, #0]
 8001cfa:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001cfe:	d0fb      	beq.n	8001cf8 <GCControllerEmulation_Run+0x7c4>
	GC_STOP_PORT->BSRR = GC_STOP_CLEAR;
 8001d00:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d04:	61bb      	str	r3, [r7, #24]
	volatile uint32_t counter = 17;
 8001d06:	2311      	movs	r3, #17
 8001d08:	9304      	str	r3, [sp, #16]
	while(counter--);
 8001d0a:	9b04      	ldr	r3, [sp, #16]
 8001d0c:	1e5a      	subs	r2, r3, #1
 8001d0e:	9204      	str	r2, [sp, #16]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1fa      	bne.n	8001d0a <GCControllerEmulation_Run+0x7d6>
	GC_STOP_PORT->BSRR = GC_STOP_SET;
 8001d14:	2320      	movs	r3, #32
 8001d16:	61bb      	str	r3, [r7, #24]
 8001d18:	e4f9      	b.n	800170e <GCControllerEmulation_Run+0x1da>
	if( (leftButtonState == RELEASED) && (rightButtonState == RELEASED) )
 8001d1a:	2901      	cmp	r1, #1
 8001d1c:	d005      	beq.n	8001d2a <GCControllerEmulation_Run+0x7f6>
	else if( (leftButtonState == RELEASED) && (rightButtonState == PUSHED) )
 8001d1e:	2900      	cmp	r1, #0
 8001d20:	f47f af0d 	bne.w	8001b3e <GCControllerEmulation_Run+0x60a>
		USART1->DR = (GC_BITS_01_CASE1 & 0xFF);
 8001d24:	23e8      	movs	r3, #232	; 0xe8
 8001d26:	6063      	str	r3, [r4, #4]
 8001d28:	e70b      	b.n	8001b42 <GCControllerEmulation_Run+0x60e>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001d2a:	2308      	movs	r3, #8
 8001d2c:	6063      	str	r3, [r4, #4]
 8001d2e:	e708      	b.n	8001b42 <GCControllerEmulation_Run+0x60e>
		USART1->DR = (GC_BITS_10_CASE1 & 0xFF);
 8001d30:	230f      	movs	r3, #15
 8001d32:	6063      	str	r3, [r4, #4]
 8001d34:	e705      	b.n	8001b42 <GCControllerEmulation_Run+0x60e>
	if( (leftButtonState == RELEASED) && (rightButtonState == RELEASED) )
 8001d36:	2901      	cmp	r1, #1
 8001d38:	d005      	beq.n	8001d46 <GCControllerEmulation_Run+0x812>
	else if( (leftButtonState == RELEASED) && (rightButtonState == PUSHED) )
 8001d3a:	2900      	cmp	r1, #0
 8001d3c:	f47f af0f 	bne.w	8001b5e <GCControllerEmulation_Run+0x62a>
		USART1->DR = (GC_BITS_01_CASE1 & 0xFF);
 8001d40:	23e8      	movs	r3, #232	; 0xe8
 8001d42:	6063      	str	r3, [r4, #4]
 8001d44:	e70d      	b.n	8001b62 <GCControllerEmulation_Run+0x62e>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001d46:	2308      	movs	r3, #8
 8001d48:	6063      	str	r3, [r4, #4]
 8001d4a:	e70a      	b.n	8001b62 <GCControllerEmulation_Run+0x62e>
		USART1->DR = (GC_BITS_10_CASE1 & 0xFF);
 8001d4c:	230f      	movs	r3, #15
 8001d4e:	6063      	str	r3, [r4, #4]
 8001d50:	e707      	b.n	8001b62 <GCControllerEmulation_Run+0x62e>
	if( (leftButtonState == RELEASED) && (rightButtonState == RELEASED) )
 8001d52:	2901      	cmp	r1, #1
 8001d54:	d005      	beq.n	8001d62 <GCControllerEmulation_Run+0x82e>
	else if( (leftButtonState == RELEASED) && (rightButtonState == PUSHED) )
 8001d56:	2900      	cmp	r1, #0
 8001d58:	f47f af1c 	bne.w	8001b94 <GCControllerEmulation_Run+0x660>
		USART1->DR = (GC_BITS_01_CASE1 & 0xFF);
 8001d5c:	23e8      	movs	r3, #232	; 0xe8
 8001d5e:	6063      	str	r3, [r4, #4]
 8001d60:	e71a      	b.n	8001b98 <GCControllerEmulation_Run+0x664>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001d62:	2308      	movs	r3, #8
 8001d64:	6063      	str	r3, [r4, #4]
 8001d66:	e717      	b.n	8001b98 <GCControllerEmulation_Run+0x664>
		USART1->DR = (GC_BITS_10_CASE1 & 0xFF);
 8001d68:	230f      	movs	r3, #15
 8001d6a:	6063      	str	r3, [r4, #4]
 8001d6c:	e714      	b.n	8001b98 <GCControllerEmulation_Run+0x664>
	if( (leftButtonState == RELEASED) && (rightButtonState == RELEASED) )
 8001d6e:	2901      	cmp	r1, #1
 8001d70:	d005      	beq.n	8001d7e <GCControllerEmulation_Run+0x84a>
	else if( (leftButtonState == RELEASED) && (rightButtonState == PUSHED) )
 8001d72:	2900      	cmp	r1, #0
 8001d74:	f47f af1e 	bne.w	8001bb4 <GCControllerEmulation_Run+0x680>
		USART1->DR = (GC_BITS_01_CASE1 & 0xFF);
 8001d78:	23e8      	movs	r3, #232	; 0xe8
 8001d7a:	6063      	str	r3, [r4, #4]
 8001d7c:	e71c      	b.n	8001bb8 <GCControllerEmulation_Run+0x684>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001d7e:	2308      	movs	r3, #8
 8001d80:	6063      	str	r3, [r4, #4]
 8001d82:	e719      	b.n	8001bb8 <GCControllerEmulation_Run+0x684>
		USART1->DR = (GC_BITS_10_CASE1 & 0xFF);
 8001d84:	230f      	movs	r3, #15
 8001d86:	6063      	str	r3, [r4, #4]
 8001d88:	e716      	b.n	8001bb8 <GCControllerEmulation_Run+0x684>
	if( (leftButtonState == RELEASED) && (rightButtonState == RELEASED) )
 8001d8a:	2901      	cmp	r1, #1
 8001d8c:	d008      	beq.n	8001da0 <GCControllerEmulation_Run+0x86c>
	else if( (leftButtonState == RELEASED) && (rightButtonState == PUSHED) )
 8001d8e:	2900      	cmp	r1, #0
 8001d90:	f47f af20 	bne.w	8001bd4 <GCControllerEmulation_Run+0x6a0>
		USART1->DR = (GC_BITS_01_CASE1 & 0xFF);
 8001d94:	23e8      	movs	r3, #232	; 0xe8
 8001d96:	6063      	str	r3, [r4, #4]
 8001d98:	e71e      	b.n	8001bd8 <GCControllerEmulation_Run+0x6a4>
 8001d9a:	bf00      	nop
 8001d9c:	20000028 	.word	0x20000028
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001da0:	2308      	movs	r3, #8
 8001da2:	6063      	str	r3, [r4, #4]
 8001da4:	e718      	b.n	8001bd8 <GCControllerEmulation_Run+0x6a4>
		USART1->DR = (GC_BITS_10_CASE1 & 0xFF);
 8001da6:	230f      	movs	r3, #15
 8001da8:	6063      	str	r3, [r4, #4]
 8001daa:	e715      	b.n	8001bd8 <GCControllerEmulation_Run+0x6a4>
	GCControllerEmulation_GetSwitchSnapshot();
 8001dac:	f7ff fb60 	bl	8001470 <GCControllerEmulation_GetSwitchSnapshot>
	while(!(USART1->SR & USART_SR_TXE)){};
 8001db0:	6823      	ldr	r3, [r4, #0]
 8001db2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001db6:	d0fb      	beq.n	8001db0 <GCControllerEmulation_Run+0x87c>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001db8:	2308      	movs	r3, #8
 8001dba:	6063      	str	r3, [r4, #4]
	rightButtonState = gcButtonInputSnapShot[GC_START];
 8001dbc:	4ba3      	ldr	r3, [pc, #652]	; (800204c <GCControllerEmulation_Run+0xb18>)
 8001dbe:	79da      	ldrb	r2, [r3, #7]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001dc0:	6823      	ldr	r3, [r4, #0]
 8001dc2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001dc6:	d0fb      	beq.n	8001dc0 <GCControllerEmulation_Run+0x88c>
	if(rightButtonState == RELEASED)
 8001dc8:	2a01      	cmp	r2, #1
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001dca:	bf0c      	ite	eq
 8001dcc:	2308      	moveq	r3, #8
		USART1->DR = (GC_BITS_01_CASE1 & 0xFF);
 8001dce:	23e8      	movne	r3, #232	; 0xe8
 8001dd0:	6063      	str	r3, [r4, #4]
	leftButtonState = gcButtonInputSnapShot[GC_Y];
 8001dd2:	4b9e      	ldr	r3, [pc, #632]	; (800204c <GCControllerEmulation_Run+0xb18>)
 8001dd4:	78da      	ldrb	r2, [r3, #3]
	rightButtonState = gcButtonInputSnapShot[GC_X];
 8001dd6:	7899      	ldrb	r1, [r3, #2]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001dd8:	6823      	ldr	r3, [r4, #0]
 8001dda:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001dde:	d0fb      	beq.n	8001dd8 <GCControllerEmulation_Run+0x8a4>
	if( (leftButtonState == RELEASED) && (rightButtonState == RELEASED) )
 8001de0:	2a01      	cmp	r2, #1
 8001de2:	f000 80f3 	beq.w	8001fcc <GCControllerEmulation_Run+0xa98>
	else if( (leftButtonState == PUSHED) && (rightButtonState == RELEASED) )
 8001de6:	b912      	cbnz	r2, 8001dee <GCControllerEmulation_Run+0x8ba>
 8001de8:	2901      	cmp	r1, #1
 8001dea:	f000 80fa 	beq.w	8001fe2 <GCControllerEmulation_Run+0xaae>
		USART1->DR = (GC_BITS_11_CASE1 & 0xFF);
 8001dee:	23ef      	movs	r3, #239	; 0xef
 8001df0:	6063      	str	r3, [r4, #4]
	leftButtonState = gcButtonInputSnapShot[GC_B];
 8001df2:	4b96      	ldr	r3, [pc, #600]	; (800204c <GCControllerEmulation_Run+0xb18>)
 8001df4:	785a      	ldrb	r2, [r3, #1]
	rightButtonState = gcButtonInputSnapShot[GC_A];
 8001df6:	7819      	ldrb	r1, [r3, #0]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001df8:	6823      	ldr	r3, [r4, #0]
 8001dfa:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001dfe:	d0fb      	beq.n	8001df8 <GCControllerEmulation_Run+0x8c4>
	if( (leftButtonState == RELEASED) && (rightButtonState == RELEASED) )
 8001e00:	2a01      	cmp	r2, #1
 8001e02:	f000 80f1 	beq.w	8001fe8 <GCControllerEmulation_Run+0xab4>
	else if( (leftButtonState == PUSHED) && (rightButtonState == RELEASED) )
 8001e06:	b912      	cbnz	r2, 8001e0e <GCControllerEmulation_Run+0x8da>
 8001e08:	2901      	cmp	r1, #1
 8001e0a:	f000 80f8 	beq.w	8001ffe <GCControllerEmulation_Run+0xaca>
		USART1->DR = (GC_BITS_11_CASE1 & 0xFF);
 8001e0e:	23ef      	movs	r3, #239	; 0xef
 8001e10:	6063      	str	r3, [r4, #4]
	rightButtonState = gcButtonInputSnapShot[GC_L];
 8001e12:	4b8e      	ldr	r3, [pc, #568]	; (800204c <GCControllerEmulation_Run+0xb18>)
 8001e14:	791a      	ldrb	r2, [r3, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001e16:	6823      	ldr	r3, [r4, #0]
 8001e18:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001e1c:	d0fb      	beq.n	8001e16 <GCControllerEmulation_Run+0x8e2>
	if(rightButtonState == RELEASED)
 8001e1e:	2a01      	cmp	r2, #1
		USART1->DR = (GC_BITS_10_CASE1 & 0xFF);
 8001e20:	bf0c      	ite	eq
 8001e22:	230f      	moveq	r3, #15
		USART1->DR = (GC_BITS_11_CASE1 & 0xFF);
 8001e24:	23ef      	movne	r3, #239	; 0xef
 8001e26:	6063      	str	r3, [r4, #4]
	leftButtonState = gcButtonInputSnapShot[GC_R];
 8001e28:	4b88      	ldr	r3, [pc, #544]	; (800204c <GCControllerEmulation_Run+0xb18>)
 8001e2a:	795a      	ldrb	r2, [r3, #5]
	rightButtonState = gcButtonInputSnapShot[GC_Z];
 8001e2c:	7999      	ldrb	r1, [r3, #6]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001e2e:	6823      	ldr	r3, [r4, #0]
 8001e30:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001e34:	d0fb      	beq.n	8001e2e <GCControllerEmulation_Run+0x8fa>
	if( (leftButtonState == RELEASED) && (rightButtonState == RELEASED) )
 8001e36:	2a01      	cmp	r2, #1
 8001e38:	f000 80e4 	beq.w	8002004 <GCControllerEmulation_Run+0xad0>
	else if( (leftButtonState == PUSHED) && (rightButtonState == RELEASED) )
 8001e3c:	b912      	cbnz	r2, 8001e44 <GCControllerEmulation_Run+0x910>
 8001e3e:	2901      	cmp	r1, #1
 8001e40:	f000 80eb 	beq.w	800201a <GCControllerEmulation_Run+0xae6>
		USART1->DR = (GC_BITS_11_CASE1 & 0xFF);
 8001e44:	23ef      	movs	r3, #239	; 0xef
 8001e46:	6063      	str	r3, [r4, #4]
	leftButtonState = gcButtonInputSnapShot[GC_DPAD_UP];
 8001e48:	4b80      	ldr	r3, [pc, #512]	; (800204c <GCControllerEmulation_Run+0xb18>)
 8001e4a:	7a1a      	ldrb	r2, [r3, #8]
	rightButtonState = gcButtonInputSnapShot[GC_DPAD_DOWN];;
 8001e4c:	7a59      	ldrb	r1, [r3, #9]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001e4e:	6823      	ldr	r3, [r4, #0]
 8001e50:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001e54:	d0fb      	beq.n	8001e4e <GCControllerEmulation_Run+0x91a>
	if( (leftButtonState == RELEASED) && (rightButtonState == RELEASED) )
 8001e56:	2a01      	cmp	r2, #1
 8001e58:	f000 80e2 	beq.w	8002020 <GCControllerEmulation_Run+0xaec>
	else if( (leftButtonState == PUSHED) && (rightButtonState == RELEASED) )
 8001e5c:	b912      	cbnz	r2, 8001e64 <GCControllerEmulation_Run+0x930>
 8001e5e:	2901      	cmp	r1, #1
 8001e60:	f000 80e9 	beq.w	8002036 <GCControllerEmulation_Run+0xb02>
		USART1->DR = (GC_BITS_11_CASE1 & 0xFF);
 8001e64:	23ef      	movs	r3, #239	; 0xef
 8001e66:	6063      	str	r3, [r4, #4]
	leftButtonState = gcButtonInputSnapShot[GC_DPAD_RIGHT];
 8001e68:	4b78      	ldr	r3, [pc, #480]	; (800204c <GCControllerEmulation_Run+0xb18>)
 8001e6a:	7ada      	ldrb	r2, [r3, #11]
	rightButtonState = gcButtonInputSnapShot[GC_DPAD_LEFT];
 8001e6c:	7a99      	ldrb	r1, [r3, #10]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001e6e:	6823      	ldr	r3, [r4, #0]
 8001e70:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001e74:	d0fb      	beq.n	8001e6e <GCControllerEmulation_Run+0x93a>
	if( (leftButtonState == RELEASED) && (rightButtonState == RELEASED) )
 8001e76:	2a01      	cmp	r2, #1
 8001e78:	f000 80e0 	beq.w	800203c <GCControllerEmulation_Run+0xb08>
	else if( (leftButtonState == PUSHED) && (rightButtonState == RELEASED) )
 8001e7c:	b912      	cbnz	r2, 8001e84 <GCControllerEmulation_Run+0x950>
 8001e7e:	2901      	cmp	r1, #1
 8001e80:	f000 80e9 	beq.w	8002056 <GCControllerEmulation_Run+0xb22>
		USART1->DR = (GC_BITS_11_CASE1 & 0xFF);
 8001e84:	23ef      	movs	r3, #239	; 0xef
 8001e86:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001e88:	6823      	ldr	r3, [r4, #0]
 8001e8a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001e8e:	d0fb      	beq.n	8001e88 <GCControllerEmulation_Run+0x954>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001e90:	2308      	movs	r3, #8
 8001e92:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001e94:	6823      	ldr	r3, [r4, #0]
 8001e96:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001e9a:	d0fb      	beq.n	8001e94 <GCControllerEmulation_Run+0x960>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001e9c:	2308      	movs	r3, #8
 8001e9e:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001ea0:	6823      	ldr	r3, [r4, #0]
 8001ea2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001ea6:	d0fb      	beq.n	8001ea0 <GCControllerEmulation_Run+0x96c>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001ea8:	2308      	movs	r3, #8
 8001eaa:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001eac:	6823      	ldr	r3, [r4, #0]
 8001eae:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001eb2:	d0fb      	beq.n	8001eac <GCControllerEmulation_Run+0x978>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001eb4:	2308      	movs	r3, #8
 8001eb6:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001eb8:	6823      	ldr	r3, [r4, #0]
 8001eba:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001ebe:	d0fb      	beq.n	8001eb8 <GCControllerEmulation_Run+0x984>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001ec0:	2308      	movs	r3, #8
 8001ec2:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001ec4:	6823      	ldr	r3, [r4, #0]
 8001ec6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001eca:	d0fb      	beq.n	8001ec4 <GCControllerEmulation_Run+0x990>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001ecc:	2308      	movs	r3, #8
 8001ece:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001ed0:	6823      	ldr	r3, [r4, #0]
 8001ed2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001ed6:	d0fb      	beq.n	8001ed0 <GCControllerEmulation_Run+0x99c>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001ed8:	2308      	movs	r3, #8
 8001eda:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001edc:	6823      	ldr	r3, [r4, #0]
 8001ede:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001ee2:	d0fb      	beq.n	8001edc <GCControllerEmulation_Run+0x9a8>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001ee4:	2308      	movs	r3, #8
 8001ee6:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001ee8:	6823      	ldr	r3, [r4, #0]
 8001eea:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001eee:	d0fb      	beq.n	8001ee8 <GCControllerEmulation_Run+0x9b4>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001ef0:	2308      	movs	r3, #8
 8001ef2:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001ef4:	6823      	ldr	r3, [r4, #0]
 8001ef6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001efa:	d0fb      	beq.n	8001ef4 <GCControllerEmulation_Run+0x9c0>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001efc:	2308      	movs	r3, #8
 8001efe:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001f00:	6823      	ldr	r3, [r4, #0]
 8001f02:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001f06:	d0fb      	beq.n	8001f00 <GCControllerEmulation_Run+0x9cc>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001f08:	2308      	movs	r3, #8
 8001f0a:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001f0c:	6823      	ldr	r3, [r4, #0]
 8001f0e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001f12:	d0fb      	beq.n	8001f0c <GCControllerEmulation_Run+0x9d8>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001f14:	2308      	movs	r3, #8
 8001f16:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001f18:	6823      	ldr	r3, [r4, #0]
 8001f1a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001f1e:	d0fb      	beq.n	8001f18 <GCControllerEmulation_Run+0x9e4>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001f20:	2308      	movs	r3, #8
 8001f22:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001f24:	6823      	ldr	r3, [r4, #0]
 8001f26:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001f2a:	d0fb      	beq.n	8001f24 <GCControllerEmulation_Run+0x9f0>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001f2c:	2308      	movs	r3, #8
 8001f2e:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001f30:	6823      	ldr	r3, [r4, #0]
 8001f32:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001f36:	d0fb      	beq.n	8001f30 <GCControllerEmulation_Run+0x9fc>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001f38:	2308      	movs	r3, #8
 8001f3a:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001f3c:	6823      	ldr	r3, [r4, #0]
 8001f3e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001f42:	d0fb      	beq.n	8001f3c <GCControllerEmulation_Run+0xa08>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001f44:	2308      	movs	r3, #8
 8001f46:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001f48:	6823      	ldr	r3, [r4, #0]
 8001f4a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001f4e:	d0fb      	beq.n	8001f48 <GCControllerEmulation_Run+0xa14>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001f50:	2308      	movs	r3, #8
 8001f52:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001f54:	6823      	ldr	r3, [r4, #0]
 8001f56:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001f5a:	d0fb      	beq.n	8001f54 <GCControllerEmulation_Run+0xa20>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001f5c:	2308      	movs	r3, #8
 8001f5e:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001f60:	6823      	ldr	r3, [r4, #0]
 8001f62:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001f66:	d0fb      	beq.n	8001f60 <GCControllerEmulation_Run+0xa2c>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001f68:	2308      	movs	r3, #8
 8001f6a:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001f6c:	6823      	ldr	r3, [r4, #0]
 8001f6e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001f72:	d0fb      	beq.n	8001f6c <GCControllerEmulation_Run+0xa38>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001f74:	2308      	movs	r3, #8
 8001f76:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001f78:	6823      	ldr	r3, [r4, #0]
 8001f7a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001f7e:	d0fb      	beq.n	8001f78 <GCControllerEmulation_Run+0xa44>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001f80:	2308      	movs	r3, #8
 8001f82:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001f84:	6823      	ldr	r3, [r4, #0]
 8001f86:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001f8a:	d0fb      	beq.n	8001f84 <GCControllerEmulation_Run+0xa50>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001f8c:	2308      	movs	r3, #8
 8001f8e:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001f90:	6823      	ldr	r3, [r4, #0]
 8001f92:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001f96:	d0fb      	beq.n	8001f90 <GCControllerEmulation_Run+0xa5c>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001f98:	2308      	movs	r3, #8
 8001f9a:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001f9c:	6823      	ldr	r3, [r4, #0]
 8001f9e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001fa2:	d0fb      	beq.n	8001f9c <GCControllerEmulation_Run+0xa68>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001fa4:	2308      	movs	r3, #8
 8001fa6:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TC)){};
 8001fa8:	6823      	ldr	r3, [r4, #0]
 8001faa:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001fae:	d0fb      	beq.n	8001fa8 <GCControllerEmulation_Run+0xa74>
	GC_STOP_PORT->BSRR = GC_STOP_CLEAR;
 8001fb0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001fb4:	61bb      	str	r3, [r7, #24]
	volatile uint32_t counter = 17;
 8001fb6:	2311      	movs	r3, #17
 8001fb8:	9305      	str	r3, [sp, #20]
	while(counter--);
 8001fba:	9b05      	ldr	r3, [sp, #20]
 8001fbc:	1e5a      	subs	r2, r3, #1
 8001fbe:	9205      	str	r2, [sp, #20]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1fa      	bne.n	8001fba <GCControllerEmulation_Run+0xa86>
	GC_STOP_PORT->BSRR = GC_STOP_SET;
 8001fc4:	2320      	movs	r3, #32
 8001fc6:	61bb      	str	r3, [r7, #24]
 8001fc8:	f7ff bba1 	b.w	800170e <GCControllerEmulation_Run+0x1da>
	if( (leftButtonState == RELEASED) && (rightButtonState == RELEASED) )
 8001fcc:	2901      	cmp	r1, #1
 8001fce:	d005      	beq.n	8001fdc <GCControllerEmulation_Run+0xaa8>
	else if( (leftButtonState == RELEASED) && (rightButtonState == PUSHED) )
 8001fd0:	2900      	cmp	r1, #0
 8001fd2:	f47f af0c 	bne.w	8001dee <GCControllerEmulation_Run+0x8ba>
		USART1->DR = (GC_BITS_01_CASE1 & 0xFF);
 8001fd6:	23e8      	movs	r3, #232	; 0xe8
 8001fd8:	6063      	str	r3, [r4, #4]
 8001fda:	e70a      	b.n	8001df2 <GCControllerEmulation_Run+0x8be>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001fdc:	2308      	movs	r3, #8
 8001fde:	6063      	str	r3, [r4, #4]
 8001fe0:	e707      	b.n	8001df2 <GCControllerEmulation_Run+0x8be>
		USART1->DR = (GC_BITS_10_CASE1 & 0xFF);
 8001fe2:	230f      	movs	r3, #15
 8001fe4:	6063      	str	r3, [r4, #4]
 8001fe6:	e704      	b.n	8001df2 <GCControllerEmulation_Run+0x8be>
	if( (leftButtonState == RELEASED) && (rightButtonState == RELEASED) )
 8001fe8:	2901      	cmp	r1, #1
 8001fea:	d005      	beq.n	8001ff8 <GCControllerEmulation_Run+0xac4>
	else if( (leftButtonState == RELEASED) && (rightButtonState == PUSHED) )
 8001fec:	2900      	cmp	r1, #0
 8001fee:	f47f af0e 	bne.w	8001e0e <GCControllerEmulation_Run+0x8da>
		USART1->DR = (GC_BITS_01_CASE1 & 0xFF);
 8001ff2:	23e8      	movs	r3, #232	; 0xe8
 8001ff4:	6063      	str	r3, [r4, #4]
 8001ff6:	e70c      	b.n	8001e12 <GCControllerEmulation_Run+0x8de>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001ff8:	2308      	movs	r3, #8
 8001ffa:	6063      	str	r3, [r4, #4]
 8001ffc:	e709      	b.n	8001e12 <GCControllerEmulation_Run+0x8de>
		USART1->DR = (GC_BITS_10_CASE1 & 0xFF);
 8001ffe:	230f      	movs	r3, #15
 8002000:	6063      	str	r3, [r4, #4]
 8002002:	e706      	b.n	8001e12 <GCControllerEmulation_Run+0x8de>
	if( (leftButtonState == RELEASED) && (rightButtonState == RELEASED) )
 8002004:	2901      	cmp	r1, #1
 8002006:	d005      	beq.n	8002014 <GCControllerEmulation_Run+0xae0>
	else if( (leftButtonState == RELEASED) && (rightButtonState == PUSHED) )
 8002008:	2900      	cmp	r1, #0
 800200a:	f47f af1b 	bne.w	8001e44 <GCControllerEmulation_Run+0x910>
		USART1->DR = (GC_BITS_01_CASE1 & 0xFF);
 800200e:	23e8      	movs	r3, #232	; 0xe8
 8002010:	6063      	str	r3, [r4, #4]
 8002012:	e719      	b.n	8001e48 <GCControllerEmulation_Run+0x914>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8002014:	2308      	movs	r3, #8
 8002016:	6063      	str	r3, [r4, #4]
 8002018:	e716      	b.n	8001e48 <GCControllerEmulation_Run+0x914>
		USART1->DR = (GC_BITS_10_CASE1 & 0xFF);
 800201a:	230f      	movs	r3, #15
 800201c:	6063      	str	r3, [r4, #4]
 800201e:	e713      	b.n	8001e48 <GCControllerEmulation_Run+0x914>
	if( (leftButtonState == RELEASED) && (rightButtonState == RELEASED) )
 8002020:	2901      	cmp	r1, #1
 8002022:	d005      	beq.n	8002030 <GCControllerEmulation_Run+0xafc>
	else if( (leftButtonState == RELEASED) && (rightButtonState == PUSHED) )
 8002024:	2900      	cmp	r1, #0
 8002026:	f47f af1d 	bne.w	8001e64 <GCControllerEmulation_Run+0x930>
		USART1->DR = (GC_BITS_01_CASE1 & 0xFF);
 800202a:	23e8      	movs	r3, #232	; 0xe8
 800202c:	6063      	str	r3, [r4, #4]
 800202e:	e71b      	b.n	8001e68 <GCControllerEmulation_Run+0x934>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8002030:	2308      	movs	r3, #8
 8002032:	6063      	str	r3, [r4, #4]
 8002034:	e718      	b.n	8001e68 <GCControllerEmulation_Run+0x934>
		USART1->DR = (GC_BITS_10_CASE1 & 0xFF);
 8002036:	230f      	movs	r3, #15
 8002038:	6063      	str	r3, [r4, #4]
 800203a:	e715      	b.n	8001e68 <GCControllerEmulation_Run+0x934>
	if( (leftButtonState == RELEASED) && (rightButtonState == RELEASED) )
 800203c:	2901      	cmp	r1, #1
 800203e:	d007      	beq.n	8002050 <GCControllerEmulation_Run+0xb1c>
	else if( (leftButtonState == RELEASED) && (rightButtonState == PUSHED) )
 8002040:	2900      	cmp	r1, #0
 8002042:	f47f af1f 	bne.w	8001e84 <GCControllerEmulation_Run+0x950>
		USART1->DR = (GC_BITS_01_CASE1 & 0xFF);
 8002046:	23e8      	movs	r3, #232	; 0xe8
 8002048:	6063      	str	r3, [r4, #4]
 800204a:	e71d      	b.n	8001e88 <GCControllerEmulation_Run+0x954>
 800204c:	20000028 	.word	0x20000028
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8002050:	2308      	movs	r3, #8
 8002052:	6063      	str	r3, [r4, #4]
 8002054:	e718      	b.n	8001e88 <GCControllerEmulation_Run+0x954>
		USART1->DR = (GC_BITS_10_CASE1 & 0xFF);
 8002056:	230f      	movs	r3, #15
 8002058:	6063      	str	r3, [r4, #4]
 800205a:	e715      	b.n	8001e88 <GCControllerEmulation_Run+0x954>
			else if( ( (gcConsoleResponse[GC_CONSOLE_BYTE_2_BIT7_BIT6] == GC_BITS_00_CASE1) || (gcConsoleResponse[GC_CONSOLE_BYTE_2_BIT7_BIT6] == GC_BITS_00_CASE2) ) &&
 800205c:	2b88      	cmp	r3, #136	; 0x88
 800205e:	f43f aae9 	beq.w	8001634 <GCControllerEmulation_Run+0x100>
				command = GC_COMMAND_UNKNOWN;
 8002062:	2304      	movs	r3, #4
 8002064:	f7ff bbad 	b.w	80017c2 <GCControllerEmulation_Run+0x28e>

08002068 <Main_SetBlueLed>:
	/* Blue LED off by default */
	Main_SetBlueLed(LED_OFF);
}

void Main_SetBlueLed(LedState_t ledState)
{
 8002068:	b508      	push	{r3, lr}
	/* Process act desired */
	switch(ledState)
 800206a:	2801      	cmp	r0, #1
 800206c:	d902      	bls.n	8002074 <Main_SetBlueLed+0xc>
 800206e:	2802      	cmp	r0, #2
 8002070:	d007      	beq.n	8002082 <Main_SetBlueLed+0x1a>
		// Invalid command
		default:
			// Do nothing
			break;
	}
}
 8002072:	bd08      	pop	{r3, pc}
			HAL_GPIO_WritePin(BLUE_LED_PORT, BLUE_LED_PIN_HAL, ledState);
 8002074:	4602      	mov	r2, r0
 8002076:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800207a:	4805      	ldr	r0, [pc, #20]	; (8002090 <Main_SetBlueLed+0x28>)
 800207c:	f7fe fbd0 	bl	8000820 <HAL_GPIO_WritePin>
			break;
 8002080:	e7f7      	b.n	8002072 <Main_SetBlueLed+0xa>
			HAL_GPIO_TogglePin(BLUE_LED_PORT, BLUE_LED_PIN_HAL);
 8002082:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002086:	4802      	ldr	r0, [pc, #8]	; (8002090 <Main_SetBlueLed+0x28>)
 8002088:	f7fe fbd0 	bl	800082c <HAL_GPIO_TogglePin>
}
 800208c:	e7f1      	b.n	8002072 <Main_SetBlueLed+0xa>
 800208e:	bf00      	nop
 8002090:	40020800 	.word	0x40020800

08002094 <Main_Init>:
{
 8002094:	b510      	push	{r4, lr}
 8002096:	b086      	sub	sp, #24
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002098:	2300      	movs	r3, #0
 800209a:	9300      	str	r3, [sp, #0]
 800209c:	4a0d      	ldr	r2, [pc, #52]	; (80020d4 <Main_Init+0x40>)
 800209e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80020a0:	f041 0104 	orr.w	r1, r1, #4
 80020a4:	6311      	str	r1, [r2, #48]	; 0x30
 80020a6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80020a8:	f002 0204 	and.w	r2, r2, #4
 80020ac:	9200      	str	r2, [sp, #0]
 80020ae:	9a00      	ldr	r2, [sp, #0]
	GPIO_InitTypeDef GPIO_InitStruct_Main = {0};
 80020b0:	9303      	str	r3, [sp, #12]
 80020b2:	9304      	str	r3, [sp, #16]
 80020b4:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct_Main.Pin = BLUE_LED_PIN_HAL;
 80020b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020ba:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct_Main.Mode = GPIO_MODE_OUTPUT_PP;
 80020bc:	2401      	movs	r4, #1
 80020be:	9402      	str	r4, [sp, #8]
	HAL_GPIO_Init(BLUE_LED_PORT, &GPIO_InitStruct_Main);
 80020c0:	a901      	add	r1, sp, #4
 80020c2:	4805      	ldr	r0, [pc, #20]	; (80020d8 <Main_Init+0x44>)
 80020c4:	f7fe fab6 	bl	8000634 <HAL_GPIO_Init>
	Main_SetBlueLed(LED_OFF);
 80020c8:	4620      	mov	r0, r4
 80020ca:	f7ff ffcd 	bl	8002068 <Main_SetBlueLed>
}
 80020ce:	b006      	add	sp, #24
 80020d0:	bd10      	pop	{r4, pc}
 80020d2:	bf00      	nop
 80020d4:	40023800 	.word	0x40023800
 80020d8:	40020800 	.word	0x40020800

080020dc <SysTick_Handler>:

void SysTick_Handler(void)
{
 80020dc:	b508      	push	{r3, lr}
	HAL_IncTick();
 80020de:	f7fe fa3d 	bl	800055c <HAL_IncTick>
}
 80020e2:	bd08      	pop	{r3, pc}

080020e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020e4:	b570      	push	{r4, r5, r6, lr}
 80020e6:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020e8:	2230      	movs	r2, #48	; 0x30
 80020ea:	2100      	movs	r1, #0
 80020ec:	a808      	add	r0, sp, #32
 80020ee:	f000 f8a5 	bl	800223c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020f2:	2400      	movs	r4, #0
 80020f4:	9403      	str	r4, [sp, #12]
 80020f6:	9404      	str	r4, [sp, #16]
 80020f8:	9405      	str	r4, [sp, #20]
 80020fa:	9406      	str	r4, [sp, #24]
 80020fc:	9407      	str	r4, [sp, #28]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020fe:	9401      	str	r4, [sp, #4]
 8002100:	4b1f      	ldr	r3, [pc, #124]	; (8002180 <SystemClock_Config+0x9c>)
 8002102:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002104:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002108:	641a      	str	r2, [r3, #64]	; 0x40
 800210a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002110:	9301      	str	r3, [sp, #4]
 8002112:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002114:	9402      	str	r4, [sp, #8]
 8002116:	4b1b      	ldr	r3, [pc, #108]	; (8002184 <SystemClock_Config+0xa0>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002126:	9302      	str	r3, [sp, #8]
 8002128:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800212a:	2603      	movs	r6, #3
 800212c:	9608      	str	r6, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800212e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002132:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002134:	2301      	movs	r3, #1
 8002136:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002138:	2310      	movs	r3, #16
 800213a:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800213c:	2502      	movs	r5, #2
 800213e:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002140:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002144:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8002146:	230c      	movs	r3, #12
 8002148:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800214a:	2360      	movs	r3, #96	; 0x60
 800214c:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800214e:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002150:	2304      	movs	r3, #4
 8002152:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002154:	a808      	add	r0, sp, #32
 8002156:	f7fe fb73 	bl	8000840 <HAL_RCC_OscConfig>
  {
    //Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800215a:	230f      	movs	r3, #15
 800215c:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800215e:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002160:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002162:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002166:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002168:	9407      	str	r4, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800216a:	4631      	mov	r1, r6
 800216c:	a803      	add	r0, sp, #12
 800216e:	f7fe fe07 	bl	8000d80 <HAL_RCC_ClockConfig>
  {
    //Error_Handler();
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8002172:	4622      	mov	r2, r4
 8002174:	4621      	mov	r1, r4
 8002176:	4620      	mov	r0, r4
 8002178:	f7fe fd60 	bl	8000c3c <HAL_RCC_MCOConfig>
}
 800217c:	b014      	add	sp, #80	; 0x50
 800217e:	bd70      	pop	{r4, r5, r6, pc}
 8002180:	40023800 	.word	0x40023800
 8002184:	40007000 	.word	0x40007000

08002188 <main>:
{
 8002188:	b508      	push	{r3, lr}
	HAL_Init();
 800218a:	f7fe f9cd 	bl	8000528 <HAL_Init>
	SystemClock_Config();
 800218e:	f7ff ffa9 	bl	80020e4 <SystemClock_Config>
	Main_Init();
 8002192:	f7ff ff7f 	bl	8002094 <Main_Init>
	GCControllerEmulation_Init();
 8002196:	f7fe ff8b 	bl	80010b0 <GCControllerEmulation_Init>
		GCControllerEmulation_Run();
 800219a:	f7ff f9cb 	bl	8001534 <GCControllerEmulation_Run>
 800219e:	e7fc      	b.n	800219a <main+0x12>

080021a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80021a0:	480d      	ldr	r0, [pc, #52]	; (80021d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80021a2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80021a4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021a8:	480c      	ldr	r0, [pc, #48]	; (80021dc <LoopForever+0x6>)
  ldr r1, =_edata
 80021aa:	490d      	ldr	r1, [pc, #52]	; (80021e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021ac:	4a0d      	ldr	r2, [pc, #52]	; (80021e4 <LoopForever+0xe>)
  movs r3, #0
 80021ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021b0:	e002      	b.n	80021b8 <LoopCopyDataInit>

080021b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021b6:	3304      	adds	r3, #4

080021b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021bc:	d3f9      	bcc.n	80021b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021be:	4a0a      	ldr	r2, [pc, #40]	; (80021e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021c0:	4c0a      	ldr	r4, [pc, #40]	; (80021ec <LoopForever+0x16>)
  movs r3, #0
 80021c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021c4:	e001      	b.n	80021ca <LoopFillZerobss>

080021c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021c8:	3204      	adds	r2, #4

080021ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021cc:	d3fb      	bcc.n	80021c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80021ce:	f000 f811 	bl	80021f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021d2:	f7ff ffd9 	bl	8002188 <main>

080021d6 <LoopForever>:

LoopForever:
    b LoopForever
 80021d6:	e7fe      	b.n	80021d6 <LoopForever>
  ldr   r0, =_estack
 80021d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80021e4:	0800228c 	.word	0x0800228c
  ldr r2, =_sbss
 80021e8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80021ec:	20000088 	.word	0x20000088

080021f0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021f0:	e7fe      	b.n	80021f0 <ADC_IRQHandler>
	...

080021f4 <__libc_init_array>:
 80021f4:	b570      	push	{r4, r5, r6, lr}
 80021f6:	4e0d      	ldr	r6, [pc, #52]	; (800222c <__libc_init_array+0x38>)
 80021f8:	4c0d      	ldr	r4, [pc, #52]	; (8002230 <__libc_init_array+0x3c>)
 80021fa:	1ba4      	subs	r4, r4, r6
 80021fc:	10a4      	asrs	r4, r4, #2
 80021fe:	2500      	movs	r5, #0
 8002200:	42a5      	cmp	r5, r4
 8002202:	d109      	bne.n	8002218 <__libc_init_array+0x24>
 8002204:	4e0b      	ldr	r6, [pc, #44]	; (8002234 <__libc_init_array+0x40>)
 8002206:	4c0c      	ldr	r4, [pc, #48]	; (8002238 <__libc_init_array+0x44>)
 8002208:	f000 f820 	bl	800224c <_init>
 800220c:	1ba4      	subs	r4, r4, r6
 800220e:	10a4      	asrs	r4, r4, #2
 8002210:	2500      	movs	r5, #0
 8002212:	42a5      	cmp	r5, r4
 8002214:	d105      	bne.n	8002222 <__libc_init_array+0x2e>
 8002216:	bd70      	pop	{r4, r5, r6, pc}
 8002218:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800221c:	4798      	blx	r3
 800221e:	3501      	adds	r5, #1
 8002220:	e7ee      	b.n	8002200 <__libc_init_array+0xc>
 8002222:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002226:	4798      	blx	r3
 8002228:	3501      	adds	r5, #1
 800222a:	e7f2      	b.n	8002212 <__libc_init_array+0x1e>
 800222c:	08002284 	.word	0x08002284
 8002230:	08002284 	.word	0x08002284
 8002234:	08002284 	.word	0x08002284
 8002238:	08002288 	.word	0x08002288

0800223c <memset>:
 800223c:	4402      	add	r2, r0
 800223e:	4603      	mov	r3, r0
 8002240:	4293      	cmp	r3, r2
 8002242:	d100      	bne.n	8002246 <memset+0xa>
 8002244:	4770      	bx	lr
 8002246:	f803 1b01 	strb.w	r1, [r3], #1
 800224a:	e7f9      	b.n	8002240 <memset+0x4>

0800224c <_init>:
 800224c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800224e:	bf00      	nop
 8002250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002252:	bc08      	pop	{r3}
 8002254:	469e      	mov	lr, r3
 8002256:	4770      	bx	lr

08002258 <_fini>:
 8002258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800225a:	bf00      	nop
 800225c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800225e:	bc08      	pop	{r3}
 8002260:	469e      	mov	lr, r3
 8002262:	4770      	bx	lr
