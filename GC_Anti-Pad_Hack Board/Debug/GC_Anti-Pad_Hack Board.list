
GC_Anti-Pad_Hack Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002098  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002230  08002230  00012230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002248  08002248  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002248  08002248  00012248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002250  08002250  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002250  08002250  00012250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002254  08002254  00012254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002258  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  2000000c  08002264  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08002264  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000628d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000011d9  00000000  00000000  000262c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00002fea  00000000  00000000  000274a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000518  00000000  00000000  0002a490  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000538  00000000  00000000  0002a9a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000126e  00000000  00000000  0002aee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000054a2  00000000  00000000  0002c14e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00083ef5  00000000  00000000  000315f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000b54e5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000d0c  00000000  00000000  000b5560  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002218 	.word	0x08002218

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08002218 	.word	0x08002218

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80004d8:	4770      	bx	lr
	...

080004dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004dc:	b510      	push	{r4, lr}
 80004de:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004e0:	4b0e      	ldr	r3, [pc, #56]	; (800051c <HAL_InitTick+0x40>)
 80004e2:	7818      	ldrb	r0, [r3, #0]
 80004e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e8:	fbb3 f3f0 	udiv	r3, r3, r0
 80004ec:	4a0c      	ldr	r2, [pc, #48]	; (8000520 <HAL_InitTick+0x44>)
 80004ee:	6810      	ldr	r0, [r2, #0]
 80004f0:	fbb0 f0f3 	udiv	r0, r0, r3
 80004f4:	f000 f888 	bl	8000608 <HAL_SYSTICK_Config>
 80004f8:	b968      	cbnz	r0, 8000516 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004fa:	2c0f      	cmp	r4, #15
 80004fc:	d901      	bls.n	8000502 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80004fe:	2001      	movs	r0, #1
 8000500:	e00a      	b.n	8000518 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000502:	2200      	movs	r2, #0
 8000504:	4621      	mov	r1, r4
 8000506:	f04f 30ff 	mov.w	r0, #4294967295
 800050a:	f000 f84b 	bl	80005a4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800050e:	4b05      	ldr	r3, [pc, #20]	; (8000524 <HAL_InitTick+0x48>)
 8000510:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000512:	2000      	movs	r0, #0
 8000514:	e000      	b.n	8000518 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000516:	2001      	movs	r0, #1
}
 8000518:	bd10      	pop	{r4, pc}
 800051a:	bf00      	nop
 800051c:	20000000 	.word	0x20000000
 8000520:	20000008 	.word	0x20000008
 8000524:	20000004 	.word	0x20000004

08000528 <HAL_Init>:
{
 8000528:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800052a:	4b0b      	ldr	r3, [pc, #44]	; (8000558 <HAL_Init+0x30>)
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000532:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800053a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000542:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000544:	2003      	movs	r0, #3
 8000546:	f000 f81b 	bl	8000580 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800054a:	200f      	movs	r0, #15
 800054c:	f7ff ffc6 	bl	80004dc <HAL_InitTick>
  HAL_MspInit();
 8000550:	f7ff ffc2 	bl	80004d8 <HAL_MspInit>
}
 8000554:	2000      	movs	r0, #0
 8000556:	bd08      	pop	{r3, pc}
 8000558:	40023c00 	.word	0x40023c00

0800055c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800055c:	4a03      	ldr	r2, [pc, #12]	; (800056c <HAL_IncTick+0x10>)
 800055e:	6811      	ldr	r1, [r2, #0]
 8000560:	4b03      	ldr	r3, [pc, #12]	; (8000570 <HAL_IncTick+0x14>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	440b      	add	r3, r1
 8000566:	6013      	str	r3, [r2, #0]
}
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	2000009c 	.word	0x2000009c
 8000570:	20000000 	.word	0x20000000

08000574 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000574:	4b01      	ldr	r3, [pc, #4]	; (800057c <HAL_GetTick+0x8>)
 8000576:	6818      	ldr	r0, [r3, #0]
}
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	2000009c 	.word	0x2000009c

08000580 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000580:	4a07      	ldr	r2, [pc, #28]	; (80005a0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000582:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000584:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000588:	041b      	lsls	r3, r3, #16
 800058a:	0c1b      	lsrs	r3, r3, #16
 800058c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000594:	0200      	lsls	r0, r0, #8
 8000596:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800059a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800059c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800059e:	4770      	bx	lr
 80005a0:	e000ed00 	.word	0xe000ed00

080005a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005a4:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005a6:	4b16      	ldr	r3, [pc, #88]	; (8000600 <HAL_NVIC_SetPriority+0x5c>)
 80005a8:	68db      	ldr	r3, [r3, #12]
 80005aa:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005ae:	f1c3 0407 	rsb	r4, r3, #7
 80005b2:	2c04      	cmp	r4, #4
 80005b4:	bf28      	it	cs
 80005b6:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005b8:	1d1d      	adds	r5, r3, #4
 80005ba:	2d06      	cmp	r5, #6
 80005bc:	bf8c      	ite	hi
 80005be:	3b03      	subhi	r3, #3
 80005c0:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005c2:	f04f 35ff 	mov.w	r5, #4294967295
 80005c6:	fa05 f404 	lsl.w	r4, r5, r4
 80005ca:	ea21 0104 	bic.w	r1, r1, r4
 80005ce:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005d0:	fa05 f303 	lsl.w	r3, r5, r3
 80005d4:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d8:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80005da:	2800      	cmp	r0, #0
 80005dc:	db09      	blt.n	80005f2 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005de:	0109      	lsls	r1, r1, #4
 80005e0:	b2c9      	uxtb	r1, r1
 80005e2:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80005e6:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80005ea:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80005ee:	bc30      	pop	{r4, r5}
 80005f0:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f2:	f000 000f 	and.w	r0, r0, #15
 80005f6:	0109      	lsls	r1, r1, #4
 80005f8:	b2c9      	uxtb	r1, r1
 80005fa:	4b02      	ldr	r3, [pc, #8]	; (8000604 <HAL_NVIC_SetPriority+0x60>)
 80005fc:	5419      	strb	r1, [r3, r0]
 80005fe:	e7f6      	b.n	80005ee <HAL_NVIC_SetPriority+0x4a>
 8000600:	e000ed00 	.word	0xe000ed00
 8000604:	e000ed14 	.word	0xe000ed14

08000608 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000608:	3801      	subs	r0, #1
 800060a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800060e:	d20a      	bcs.n	8000626 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000610:	4b06      	ldr	r3, [pc, #24]	; (800062c <HAL_SYSTICK_Config+0x24>)
 8000612:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000614:	4a06      	ldr	r2, [pc, #24]	; (8000630 <HAL_SYSTICK_Config+0x28>)
 8000616:	21f0      	movs	r1, #240	; 0xf0
 8000618:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800061c:	2000      	movs	r0, #0
 800061e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000620:	2207      	movs	r2, #7
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000626:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	e000e010 	.word	0xe000e010
 8000630:	e000ed00 	.word	0xe000ed00

08000634 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000638:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800063a:	2400      	movs	r4, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800063c:	2601      	movs	r6, #1
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800063e:	f8df c1c8 	ldr.w	ip, [pc, #456]	; 8000808 <HAL_GPIO_Init+0x1d4>

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000642:	f8df e1c8 	ldr.w	lr, [pc, #456]	; 800080c <HAL_GPIO_Init+0x1d8>
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000646:	4d6e      	ldr	r5, [pc, #440]	; (8000800 <HAL_GPIO_Init+0x1cc>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000648:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8000810 <HAL_GPIO_Init+0x1dc>
 800064c:	e04a      	b.n	80006e4 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 800064e:	6882      	ldr	r2, [r0, #8]
 8000650:	ea4f 0b44 	mov.w	fp, r4, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000654:	2703      	movs	r7, #3
 8000656:	fa07 fa0b 	lsl.w	sl, r7, fp
 800065a:	ea22 0a0a 	bic.w	sl, r2, sl
        temp |= (GPIO_Init->Speed << (position * 2U));
 800065e:	68ca      	ldr	r2, [r1, #12]
 8000660:	fa02 f20b 	lsl.w	r2, r2, fp
 8000664:	ea42 020a 	orr.w	r2, r2, sl
        GPIOx->OSPEEDR = temp;
 8000668:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 800066a:	6842      	ldr	r2, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800066c:	ea22 0808 	bic.w	r8, r2, r8
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000670:	684a      	ldr	r2, [r1, #4]
 8000672:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8000676:	40a2      	lsls	r2, r4
 8000678:	ea42 0208 	orr.w	r2, r2, r8
        GPIOx->OTYPER = temp;
 800067c:	6042      	str	r2, [r0, #4]
 800067e:	e03e      	b.n	80006fe <HAL_GPIO_Init+0xca>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000680:	f04f 0800 	mov.w	r8, #0
 8000684:	fa08 f80b 	lsl.w	r8, r8, fp
 8000688:	ea48 080a 	orr.w	r8, r8, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 800068c:	f8c2 8008 	str.w	r8, [r2, #8]
        temp = EXTI->IMR;
 8000690:	682a      	ldr	r2, [r5, #0]
        temp &= ~((uint32_t)iocurrent);
 8000692:	ea6f 0803 	mvn.w	r8, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000696:	684f      	ldr	r7, [r1, #4]
 8000698:	f417 3f80 	tst.w	r7, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800069c:	bf0c      	ite	eq
 800069e:	ea08 0202 	andeq.w	r2, r8, r2
        {
          temp |= iocurrent;
 80006a2:	431a      	orrne	r2, r3
        }
        EXTI->IMR = temp;
 80006a4:	602a      	str	r2, [r5, #0]

        temp = EXTI->EMR;
 80006a6:	686a      	ldr	r2, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006a8:	684f      	ldr	r7, [r1, #4]
 80006aa:	f417 3f00 	tst.w	r7, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80006ae:	bf0c      	ite	eq
 80006b0:	ea08 0202 	andeq.w	r2, r8, r2
        {
          temp |= iocurrent;
 80006b4:	431a      	orrne	r2, r3
        }
        EXTI->EMR = temp;
 80006b6:	606a      	str	r2, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80006b8:	68aa      	ldr	r2, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006ba:	684f      	ldr	r7, [r1, #4]
 80006bc:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80006c0:	bf0c      	ite	eq
 80006c2:	ea08 0202 	andeq.w	r2, r8, r2
        {
          temp |= iocurrent;
 80006c6:	431a      	orrne	r2, r3
        }
        EXTI->RTSR = temp;
 80006c8:	60aa      	str	r2, [r5, #8]

        temp = EXTI->FTSR;
 80006ca:	68ea      	ldr	r2, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006cc:	684f      	ldr	r7, [r1, #4]
 80006ce:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 80006d2:	bf0c      	ite	eq
 80006d4:	ea08 0302 	andeq.w	r3, r8, r2
        {
          temp |= iocurrent;
 80006d8:	4313      	orrne	r3, r2
        }
        EXTI->FTSR = temp;
 80006da:	60eb      	str	r3, [r5, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80006dc:	3401      	adds	r4, #1
 80006de:	2c10      	cmp	r4, #16
 80006e0:	f000 808a 	beq.w	80007f8 <HAL_GPIO_Init+0x1c4>
    ioposition = 0x01U << position;
 80006e4:	fa06 f804 	lsl.w	r8, r6, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006e8:	680b      	ldr	r3, [r1, #0]
 80006ea:	ea08 0303 	and.w	r3, r8, r3
    if(iocurrent == ioposition)
 80006ee:	4598      	cmp	r8, r3
 80006f0:	d1f4      	bne.n	80006dc <HAL_GPIO_Init+0xa8>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80006f2:	684a      	ldr	r2, [r1, #4]
 80006f4:	f002 0203 	and.w	r2, r2, #3
 80006f8:	3a01      	subs	r2, #1
 80006fa:	2a01      	cmp	r2, #1
 80006fc:	d9a7      	bls.n	800064e <HAL_GPIO_Init+0x1a>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80006fe:	684a      	ldr	r2, [r1, #4]
 8000700:	f002 0203 	and.w	r2, r2, #3
 8000704:	2a03      	cmp	r2, #3
 8000706:	d027      	beq.n	8000758 <HAL_GPIO_Init+0x124>
        temp = GPIOx->PUPDR;
 8000708:	68c2      	ldr	r2, [r0, #12]
 800070a:	ea4f 0a44 	mov.w	sl, r4, lsl #1
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800070e:	2703      	movs	r7, #3
 8000710:	fa07 f80a 	lsl.w	r8, r7, sl
 8000714:	ea22 0808 	bic.w	r8, r2, r8
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000718:	688a      	ldr	r2, [r1, #8]
 800071a:	fa02 f20a 	lsl.w	r2, r2, sl
 800071e:	ea42 0208 	orr.w	r2, r2, r8
        GPIOx->PUPDR = temp;
 8000722:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000724:	684a      	ldr	r2, [r1, #4]
 8000726:	403a      	ands	r2, r7
 8000728:	2a02      	cmp	r2, #2
 800072a:	d115      	bne.n	8000758 <HAL_GPIO_Init+0x124>
        temp = GPIOx->AFR[position >> 3U];
 800072c:	fa24 f807 	lsr.w	r8, r4, r7
 8000730:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8000734:	f8d8 a020 	ldr.w	sl, [r8, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000738:	f004 0207 	and.w	r2, r4, #7
 800073c:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8000740:	220f      	movs	r2, #15
 8000742:	fa02 f20b 	lsl.w	r2, r2, fp
 8000746:	ea2a 0a02 	bic.w	sl, sl, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800074a:	690a      	ldr	r2, [r1, #16]
 800074c:	fa02 f20b 	lsl.w	r2, r2, fp
 8000750:	ea42 020a 	orr.w	r2, r2, sl
        GPIOx->AFR[position >> 3U] = temp;
 8000754:	f8c8 2020 	str.w	r2, [r8, #32]
      temp = GPIOx->MODER;
 8000758:	6802      	ldr	r2, [r0, #0]
 800075a:	ea4f 0a44 	mov.w	sl, r4, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800075e:	2703      	movs	r7, #3
 8000760:	fa07 f80a 	lsl.w	r8, r7, sl
 8000764:	ea22 0808 	bic.w	r8, r2, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000768:	684a      	ldr	r2, [r1, #4]
 800076a:	403a      	ands	r2, r7
 800076c:	fa02 f20a 	lsl.w	r2, r2, sl
 8000770:	ea42 0208 	orr.w	r2, r2, r8
      GPIOx->MODER = temp;
 8000774:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000776:	684a      	ldr	r2, [r1, #4]
 8000778:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 800077c:	d0ae      	beq.n	80006dc <HAL_GPIO_Init+0xa8>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077e:	2200      	movs	r2, #0
 8000780:	9201      	str	r2, [sp, #4]
 8000782:	f8dc 2044 	ldr.w	r2, [ip, #68]	; 0x44
 8000786:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800078a:	f8cc 2044 	str.w	r2, [ip, #68]	; 0x44
 800078e:	f8dc 2044 	ldr.w	r2, [ip, #68]	; 0x44
 8000792:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000796:	9201      	str	r2, [sp, #4]
 8000798:	9a01      	ldr	r2, [sp, #4]
 800079a:	f024 0203 	bic.w	r2, r4, #3
 800079e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80007a2:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
        temp = SYSCFG->EXTICR[position >> 2U];
 80007a6:	f8d2 a008 	ldr.w	sl, [r2, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007aa:	ea04 0807 	and.w	r8, r4, r7
 80007ae:	ea4f 0b88 	mov.w	fp, r8, lsl #2
 80007b2:	f04f 080f 	mov.w	r8, #15
 80007b6:	fa08 f80b 	lsl.w	r8, r8, fp
 80007ba:	ea2a 0a08 	bic.w	sl, sl, r8
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007be:	4570      	cmp	r0, lr
 80007c0:	f43f af5e 	beq.w	8000680 <HAL_GPIO_Init+0x4c>
 80007c4:	4548      	cmp	r0, r9
 80007c6:	d00f      	beq.n	80007e8 <HAL_GPIO_Init+0x1b4>
 80007c8:	4f0e      	ldr	r7, [pc, #56]	; (8000804 <HAL_GPIO_Init+0x1d0>)
 80007ca:	42b8      	cmp	r0, r7
 80007cc:	d00e      	beq.n	80007ec <HAL_GPIO_Init+0x1b8>
 80007ce:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80007d2:	42b8      	cmp	r0, r7
 80007d4:	d00d      	beq.n	80007f2 <HAL_GPIO_Init+0x1be>
 80007d6:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80007da:	42b8      	cmp	r0, r7
 80007dc:	bf0c      	ite	eq
 80007de:	f04f 0804 	moveq.w	r8, #4
 80007e2:	f04f 0807 	movne.w	r8, #7
 80007e6:	e74d      	b.n	8000684 <HAL_GPIO_Init+0x50>
 80007e8:	46b0      	mov	r8, r6
 80007ea:	e74b      	b.n	8000684 <HAL_GPIO_Init+0x50>
 80007ec:	f04f 0802 	mov.w	r8, #2
 80007f0:	e748      	b.n	8000684 <HAL_GPIO_Init+0x50>
 80007f2:	f04f 0803 	mov.w	r8, #3
 80007f6:	e745      	b.n	8000684 <HAL_GPIO_Init+0x50>
      }
    }
  }
}
 80007f8:	b003      	add	sp, #12
 80007fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80007fe:	bf00      	nop
 8000800:	40013c00 	.word	0x40013c00
 8000804:	40020800 	.word	0x40020800
 8000808:	40023800 	.word	0x40023800
 800080c:	40020000 	.word	0x40020000
 8000810:	40020400 	.word	0x40020400

08000814 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000814:	6903      	ldr	r3, [r0, #16]
 8000816:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000818:	bf14      	ite	ne
 800081a:	2001      	movne	r0, #1
 800081c:	2000      	moveq	r0, #0
 800081e:	4770      	bx	lr

08000820 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000820:	2800      	cmp	r0, #0
 8000822:	f000 81ec 	beq.w	8000bfe <HAL_RCC_OscConfig+0x3de>
{
 8000826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800082e:	6803      	ldr	r3, [r0, #0]
 8000830:	f013 0f01 	tst.w	r3, #1
 8000834:	d03b      	beq.n	80008ae <HAL_RCC_OscConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000836:	4ba8      	ldr	r3, [pc, #672]	; (8000ad8 <HAL_RCC_OscConfig+0x2b8>)
 8000838:	689b      	ldr	r3, [r3, #8]
 800083a:	f003 030c 	and.w	r3, r3, #12
 800083e:	2b04      	cmp	r3, #4
 8000840:	d02c      	beq.n	800089c <HAL_RCC_OscConfig+0x7c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000842:	4ba5      	ldr	r3, [pc, #660]	; (8000ad8 <HAL_RCC_OscConfig+0x2b8>)
 8000844:	689b      	ldr	r3, [r3, #8]
 8000846:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800084a:	2b08      	cmp	r3, #8
 800084c:	d021      	beq.n	8000892 <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800084e:	6863      	ldr	r3, [r4, #4]
 8000850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000854:	d04f      	beq.n	80008f6 <HAL_RCC_OscConfig+0xd6>
 8000856:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800085a:	d052      	beq.n	8000902 <HAL_RCC_OscConfig+0xe2>
 800085c:	4b9e      	ldr	r3, [pc, #632]	; (8000ad8 <HAL_RCC_OscConfig+0x2b8>)
 800085e:	681a      	ldr	r2, [r3, #0]
 8000860:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800086c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800086e:	6863      	ldr	r3, [r4, #4]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d050      	beq.n	8000916 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000874:	f7ff fe7e 	bl	8000574 <HAL_GetTick>
 8000878:	4606      	mov	r6, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800087a:	4d97      	ldr	r5, [pc, #604]	; (8000ad8 <HAL_RCC_OscConfig+0x2b8>)
 800087c:	682b      	ldr	r3, [r5, #0]
 800087e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000882:	d114      	bne.n	80008ae <HAL_RCC_OscConfig+0x8e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000884:	f7ff fe76 	bl	8000574 <HAL_GetTick>
 8000888:	1b80      	subs	r0, r0, r6
 800088a:	2864      	cmp	r0, #100	; 0x64
 800088c:	d9f6      	bls.n	800087c <HAL_RCC_OscConfig+0x5c>
          {
            return HAL_TIMEOUT;
 800088e:	2003      	movs	r0, #3
 8000890:	e1ba      	b.n	8000c08 <HAL_RCC_OscConfig+0x3e8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000892:	4b91      	ldr	r3, [pc, #580]	; (8000ad8 <HAL_RCC_OscConfig+0x2b8>)
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800089a:	d0d8      	beq.n	800084e <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800089c:	4b8e      	ldr	r3, [pc, #568]	; (8000ad8 <HAL_RCC_OscConfig+0x2b8>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80008a4:	d003      	beq.n	80008ae <HAL_RCC_OscConfig+0x8e>
 80008a6:	6863      	ldr	r3, [r4, #4]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	f000 81aa 	beq.w	8000c02 <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008ae:	6823      	ldr	r3, [r4, #0]
 80008b0:	f013 0f02 	tst.w	r3, #2
 80008b4:	d055      	beq.n	8000962 <HAL_RCC_OscConfig+0x142>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80008b6:	4b88      	ldr	r3, [pc, #544]	; (8000ad8 <HAL_RCC_OscConfig+0x2b8>)
 80008b8:	689b      	ldr	r3, [r3, #8]
 80008ba:	f013 0f0c 	tst.w	r3, #12
 80008be:	d03e      	beq.n	800093e <HAL_RCC_OscConfig+0x11e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80008c0:	4b85      	ldr	r3, [pc, #532]	; (8000ad8 <HAL_RCC_OscConfig+0x2b8>)
 80008c2:	689b      	ldr	r3, [r3, #8]
 80008c4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80008c8:	2b08      	cmp	r3, #8
 80008ca:	d033      	beq.n	8000934 <HAL_RCC_OscConfig+0x114>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80008cc:	68e3      	ldr	r3, [r4, #12]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d068      	beq.n	80009a4 <HAL_RCC_OscConfig+0x184>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80008d2:	4b82      	ldr	r3, [pc, #520]	; (8000adc <HAL_RCC_OscConfig+0x2bc>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80008d8:	f7ff fe4c 	bl	8000574 <HAL_GetTick>
 80008dc:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008de:	4d7e      	ldr	r5, [pc, #504]	; (8000ad8 <HAL_RCC_OscConfig+0x2b8>)
 80008e0:	682b      	ldr	r3, [r5, #0]
 80008e2:	f013 0f02 	tst.w	r3, #2
 80008e6:	d154      	bne.n	8000992 <HAL_RCC_OscConfig+0x172>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80008e8:	f7ff fe44 	bl	8000574 <HAL_GetTick>
 80008ec:	1b80      	subs	r0, r0, r6
 80008ee:	2802      	cmp	r0, #2
 80008f0:	d9f6      	bls.n	80008e0 <HAL_RCC_OscConfig+0xc0>
          {
            return HAL_TIMEOUT;
 80008f2:	2003      	movs	r0, #3
 80008f4:	e188      	b.n	8000c08 <HAL_RCC_OscConfig+0x3e8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008f6:	4a78      	ldr	r2, [pc, #480]	; (8000ad8 <HAL_RCC_OscConfig+0x2b8>)
 80008f8:	6813      	ldr	r3, [r2, #0]
 80008fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008fe:	6013      	str	r3, [r2, #0]
 8000900:	e7b5      	b.n	800086e <HAL_RCC_OscConfig+0x4e>
 8000902:	4b75      	ldr	r3, [pc, #468]	; (8000ad8 <HAL_RCC_OscConfig+0x2b8>)
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	e7ab      	b.n	800086e <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 8000916:	f7ff fe2d 	bl	8000574 <HAL_GetTick>
 800091a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800091c:	4d6e      	ldr	r5, [pc, #440]	; (8000ad8 <HAL_RCC_OscConfig+0x2b8>)
 800091e:	682b      	ldr	r3, [r5, #0]
 8000920:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000924:	d0c3      	beq.n	80008ae <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000926:	f7ff fe25 	bl	8000574 <HAL_GetTick>
 800092a:	1b80      	subs	r0, r0, r6
 800092c:	2864      	cmp	r0, #100	; 0x64
 800092e:	d9f6      	bls.n	800091e <HAL_RCC_OscConfig+0xfe>
            return HAL_TIMEOUT;
 8000930:	2003      	movs	r0, #3
 8000932:	e169      	b.n	8000c08 <HAL_RCC_OscConfig+0x3e8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000934:	4b68      	ldr	r3, [pc, #416]	; (8000ad8 <HAL_RCC_OscConfig+0x2b8>)
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800093c:	d1c6      	bne.n	80008cc <HAL_RCC_OscConfig+0xac>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800093e:	4b66      	ldr	r3, [pc, #408]	; (8000ad8 <HAL_RCC_OscConfig+0x2b8>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f013 0f02 	tst.w	r3, #2
 8000946:	d004      	beq.n	8000952 <HAL_RCC_OscConfig+0x132>
 8000948:	68e3      	ldr	r3, [r4, #12]
 800094a:	2b01      	cmp	r3, #1
 800094c:	d001      	beq.n	8000952 <HAL_RCC_OscConfig+0x132>
        return HAL_ERROR;
 800094e:	2001      	movs	r0, #1
 8000950:	e15a      	b.n	8000c08 <HAL_RCC_OscConfig+0x3e8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000952:	4a61      	ldr	r2, [pc, #388]	; (8000ad8 <HAL_RCC_OscConfig+0x2b8>)
 8000954:	6813      	ldr	r3, [r2, #0]
 8000956:	6921      	ldr	r1, [r4, #16]
 8000958:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800095c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000960:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000962:	6823      	ldr	r3, [r4, #0]
 8000964:	f013 0f08 	tst.w	r3, #8
 8000968:	d040      	beq.n	80009ec <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800096a:	6963      	ldr	r3, [r4, #20]
 800096c:	b363      	cbz	r3, 80009c8 <HAL_RCC_OscConfig+0x1a8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800096e:	4b5c      	ldr	r3, [pc, #368]	; (8000ae0 <HAL_RCC_OscConfig+0x2c0>)
 8000970:	2201      	movs	r2, #1
 8000972:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000974:	f7ff fdfe 	bl	8000574 <HAL_GetTick>
 8000978:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800097a:	4d57      	ldr	r5, [pc, #348]	; (8000ad8 <HAL_RCC_OscConfig+0x2b8>)
 800097c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800097e:	f013 0f02 	tst.w	r3, #2
 8000982:	d133      	bne.n	80009ec <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000984:	f7ff fdf6 	bl	8000574 <HAL_GetTick>
 8000988:	1b80      	subs	r0, r0, r6
 800098a:	2802      	cmp	r0, #2
 800098c:	d9f6      	bls.n	800097c <HAL_RCC_OscConfig+0x15c>
        {
          return HAL_TIMEOUT;
 800098e:	2003      	movs	r0, #3
 8000990:	e13a      	b.n	8000c08 <HAL_RCC_OscConfig+0x3e8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000992:	4a51      	ldr	r2, [pc, #324]	; (8000ad8 <HAL_RCC_OscConfig+0x2b8>)
 8000994:	6813      	ldr	r3, [r2, #0]
 8000996:	6921      	ldr	r1, [r4, #16]
 8000998:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800099c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80009a0:	6013      	str	r3, [r2, #0]
 80009a2:	e7de      	b.n	8000962 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI_DISABLE();
 80009a4:	4b4d      	ldr	r3, [pc, #308]	; (8000adc <HAL_RCC_OscConfig+0x2bc>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009aa:	f7ff fde3 	bl	8000574 <HAL_GetTick>
 80009ae:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009b0:	4d49      	ldr	r5, [pc, #292]	; (8000ad8 <HAL_RCC_OscConfig+0x2b8>)
 80009b2:	682b      	ldr	r3, [r5, #0]
 80009b4:	f013 0f02 	tst.w	r3, #2
 80009b8:	d0d3      	beq.n	8000962 <HAL_RCC_OscConfig+0x142>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009ba:	f7ff fddb 	bl	8000574 <HAL_GetTick>
 80009be:	1b80      	subs	r0, r0, r6
 80009c0:	2802      	cmp	r0, #2
 80009c2:	d9f6      	bls.n	80009b2 <HAL_RCC_OscConfig+0x192>
            return HAL_TIMEOUT;
 80009c4:	2003      	movs	r0, #3
 80009c6:	e11f      	b.n	8000c08 <HAL_RCC_OscConfig+0x3e8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80009c8:	4b45      	ldr	r3, [pc, #276]	; (8000ae0 <HAL_RCC_OscConfig+0x2c0>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009ce:	f7ff fdd1 	bl	8000574 <HAL_GetTick>
 80009d2:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009d4:	4d40      	ldr	r5, [pc, #256]	; (8000ad8 <HAL_RCC_OscConfig+0x2b8>)
 80009d6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80009d8:	f013 0f02 	tst.w	r3, #2
 80009dc:	d006      	beq.n	80009ec <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009de:	f7ff fdc9 	bl	8000574 <HAL_GetTick>
 80009e2:	1b80      	subs	r0, r0, r6
 80009e4:	2802      	cmp	r0, #2
 80009e6:	d9f6      	bls.n	80009d6 <HAL_RCC_OscConfig+0x1b6>
        {
          return HAL_TIMEOUT;
 80009e8:	2003      	movs	r0, #3
 80009ea:	e10d      	b.n	8000c08 <HAL_RCC_OscConfig+0x3e8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009ec:	6823      	ldr	r3, [r4, #0]
 80009ee:	f013 0f04 	tst.w	r3, #4
 80009f2:	d07a      	beq.n	8000aea <HAL_RCC_OscConfig+0x2ca>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009f4:	4b38      	ldr	r3, [pc, #224]	; (8000ad8 <HAL_RCC_OscConfig+0x2b8>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80009fc:	d134      	bne.n	8000a68 <HAL_RCC_OscConfig+0x248>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	9301      	str	r3, [sp, #4]
 8000a02:	4b35      	ldr	r3, [pc, #212]	; (8000ad8 <HAL_RCC_OscConfig+0x2b8>)
 8000a04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a06:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a0a:	641a      	str	r2, [r3, #64]	; 0x40
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a12:	9301      	str	r3, [sp, #4]
 8000a14:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000a16:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a18:	4b32      	ldr	r3, [pc, #200]	; (8000ae4 <HAL_RCC_OscConfig+0x2c4>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000a20:	d024      	beq.n	8000a6c <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a22:	68a3      	ldr	r3, [r4, #8]
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d035      	beq.n	8000a94 <HAL_RCC_OscConfig+0x274>
 8000a28:	2b05      	cmp	r3, #5
 8000a2a:	d039      	beq.n	8000aa0 <HAL_RCC_OscConfig+0x280>
 8000a2c:	4b2a      	ldr	r3, [pc, #168]	; (8000ad8 <HAL_RCC_OscConfig+0x2b8>)
 8000a2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000a30:	f022 0201 	bic.w	r2, r2, #1
 8000a34:	671a      	str	r2, [r3, #112]	; 0x70
 8000a36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000a38:	f022 0204 	bic.w	r2, r2, #4
 8000a3c:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000a3e:	68a3      	ldr	r3, [r4, #8]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d037      	beq.n	8000ab4 <HAL_RCC_OscConfig+0x294>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000a44:	f7ff fd96 	bl	8000574 <HAL_GetTick>
 8000a48:	4680      	mov	r8, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a4a:	4e23      	ldr	r6, [pc, #140]	; (8000ad8 <HAL_RCC_OscConfig+0x2b8>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a4c:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a50:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8000a52:	f013 0f02 	tst.w	r3, #2
 8000a56:	d147      	bne.n	8000ae8 <HAL_RCC_OscConfig+0x2c8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a58:	f7ff fd8c 	bl	8000574 <HAL_GetTick>
 8000a5c:	eba0 0008 	sub.w	r0, r0, r8
 8000a60:	42b8      	cmp	r0, r7
 8000a62:	d9f5      	bls.n	8000a50 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8000a64:	2003      	movs	r0, #3
 8000a66:	e0cf      	b.n	8000c08 <HAL_RCC_OscConfig+0x3e8>
    FlagStatus       pwrclkchanged = RESET;
 8000a68:	2500      	movs	r5, #0
 8000a6a:	e7d5      	b.n	8000a18 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a6c:	4a1d      	ldr	r2, [pc, #116]	; (8000ae4 <HAL_RCC_OscConfig+0x2c4>)
 8000a6e:	6813      	ldr	r3, [r2, #0]
 8000a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a74:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000a76:	f7ff fd7d 	bl	8000574 <HAL_GetTick>
 8000a7a:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a7c:	4e19      	ldr	r6, [pc, #100]	; (8000ae4 <HAL_RCC_OscConfig+0x2c4>)
 8000a7e:	6833      	ldr	r3, [r6, #0]
 8000a80:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000a84:	d1cd      	bne.n	8000a22 <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a86:	f7ff fd75 	bl	8000574 <HAL_GetTick>
 8000a8a:	1bc0      	subs	r0, r0, r7
 8000a8c:	2802      	cmp	r0, #2
 8000a8e:	d9f6      	bls.n	8000a7e <HAL_RCC_OscConfig+0x25e>
          return HAL_TIMEOUT;
 8000a90:	2003      	movs	r0, #3
 8000a92:	e0b9      	b.n	8000c08 <HAL_RCC_OscConfig+0x3e8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a94:	4a10      	ldr	r2, [pc, #64]	; (8000ad8 <HAL_RCC_OscConfig+0x2b8>)
 8000a96:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	6713      	str	r3, [r2, #112]	; 0x70
 8000a9e:	e7ce      	b.n	8000a3e <HAL_RCC_OscConfig+0x21e>
 8000aa0:	4b0d      	ldr	r3, [pc, #52]	; (8000ad8 <HAL_RCC_OscConfig+0x2b8>)
 8000aa2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000aa4:	f042 0204 	orr.w	r2, r2, #4
 8000aa8:	671a      	str	r2, [r3, #112]	; 0x70
 8000aaa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000aac:	f042 0201 	orr.w	r2, r2, #1
 8000ab0:	671a      	str	r2, [r3, #112]	; 0x70
 8000ab2:	e7c4      	b.n	8000a3e <HAL_RCC_OscConfig+0x21e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ab4:	f7ff fd5e 	bl	8000574 <HAL_GetTick>
 8000ab8:	4680      	mov	r8, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000aba:	4e07      	ldr	r6, [pc, #28]	; (8000ad8 <HAL_RCC_OscConfig+0x2b8>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000abc:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ac0:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8000ac2:	f013 0f02 	tst.w	r3, #2
 8000ac6:	d00f      	beq.n	8000ae8 <HAL_RCC_OscConfig+0x2c8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ac8:	f7ff fd54 	bl	8000574 <HAL_GetTick>
 8000acc:	eba0 0008 	sub.w	r0, r0, r8
 8000ad0:	42b8      	cmp	r0, r7
 8000ad2:	d9f5      	bls.n	8000ac0 <HAL_RCC_OscConfig+0x2a0>
        {
          return HAL_TIMEOUT;
 8000ad4:	2003      	movs	r0, #3
 8000ad6:	e097      	b.n	8000c08 <HAL_RCC_OscConfig+0x3e8>
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	42470000 	.word	0x42470000
 8000ae0:	42470e80 	.word	0x42470e80
 8000ae4:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000ae8:	b9ed      	cbnz	r5, 8000b26 <HAL_RCC_OscConfig+0x306>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000aea:	69a3      	ldr	r3, [r4, #24]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	f000 808a 	beq.w	8000c06 <HAL_RCC_OscConfig+0x3e6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000af2:	4a48      	ldr	r2, [pc, #288]	; (8000c14 <HAL_RCC_OscConfig+0x3f4>)
 8000af4:	6892      	ldr	r2, [r2, #8]
 8000af6:	f002 020c 	and.w	r2, r2, #12
 8000afa:	2a08      	cmp	r2, #8
 8000afc:	d051      	beq.n	8000ba2 <HAL_RCC_OscConfig+0x382>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000afe:	2b02      	cmp	r3, #2
 8000b00:	d017      	beq.n	8000b32 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b02:	4b45      	ldr	r3, [pc, #276]	; (8000c18 <HAL_RCC_OscConfig+0x3f8>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b08:	f7ff fd34 	bl	8000574 <HAL_GetTick>
 8000b0c:	4605      	mov	r5, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b0e:	4c41      	ldr	r4, [pc, #260]	; (8000c14 <HAL_RCC_OscConfig+0x3f4>)
 8000b10:	6823      	ldr	r3, [r4, #0]
 8000b12:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000b16:	d042      	beq.n	8000b9e <HAL_RCC_OscConfig+0x37e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b18:	f7ff fd2c 	bl	8000574 <HAL_GetTick>
 8000b1c:	1b40      	subs	r0, r0, r5
 8000b1e:	2802      	cmp	r0, #2
 8000b20:	d9f6      	bls.n	8000b10 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8000b22:	2003      	movs	r0, #3
 8000b24:	e070      	b.n	8000c08 <HAL_RCC_OscConfig+0x3e8>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b26:	4a3b      	ldr	r2, [pc, #236]	; (8000c14 <HAL_RCC_OscConfig+0x3f4>)
 8000b28:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000b2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b30:	e7db      	b.n	8000aea <HAL_RCC_OscConfig+0x2ca>
        __HAL_RCC_PLL_DISABLE();
 8000b32:	4b39      	ldr	r3, [pc, #228]	; (8000c18 <HAL_RCC_OscConfig+0x3f8>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b38:	f7ff fd1c 	bl	8000574 <HAL_GetTick>
 8000b3c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b3e:	4d35      	ldr	r5, [pc, #212]	; (8000c14 <HAL_RCC_OscConfig+0x3f4>)
 8000b40:	682b      	ldr	r3, [r5, #0]
 8000b42:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000b46:	d006      	beq.n	8000b56 <HAL_RCC_OscConfig+0x336>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b48:	f7ff fd14 	bl	8000574 <HAL_GetTick>
 8000b4c:	1b80      	subs	r0, r0, r6
 8000b4e:	2802      	cmp	r0, #2
 8000b50:	d9f6      	bls.n	8000b40 <HAL_RCC_OscConfig+0x320>
            return HAL_TIMEOUT;
 8000b52:	2003      	movs	r0, #3
 8000b54:	e058      	b.n	8000c08 <HAL_RCC_OscConfig+0x3e8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b56:	69e3      	ldr	r3, [r4, #28]
 8000b58:	6a22      	ldr	r2, [r4, #32]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b5e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000b62:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000b64:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000b68:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000b6a:	0852      	lsrs	r2, r2, #1
 8000b6c:	3a01      	subs	r2, #1
 8000b6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b72:	4a28      	ldr	r2, [pc, #160]	; (8000c14 <HAL_RCC_OscConfig+0x3f4>)
 8000b74:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b76:	4b28      	ldr	r3, [pc, #160]	; (8000c18 <HAL_RCC_OscConfig+0x3f8>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b7c:	f7ff fcfa 	bl	8000574 <HAL_GetTick>
 8000b80:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b82:	4c24      	ldr	r4, [pc, #144]	; (8000c14 <HAL_RCC_OscConfig+0x3f4>)
 8000b84:	6823      	ldr	r3, [r4, #0]
 8000b86:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000b8a:	d106      	bne.n	8000b9a <HAL_RCC_OscConfig+0x37a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b8c:	f7ff fcf2 	bl	8000574 <HAL_GetTick>
 8000b90:	1b40      	subs	r0, r0, r5
 8000b92:	2802      	cmp	r0, #2
 8000b94:	d9f6      	bls.n	8000b84 <HAL_RCC_OscConfig+0x364>
            return HAL_TIMEOUT;
 8000b96:	2003      	movs	r0, #3
 8000b98:	e036      	b.n	8000c08 <HAL_RCC_OscConfig+0x3e8>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	e034      	b.n	8000c08 <HAL_RCC_OscConfig+0x3e8>
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	e032      	b.n	8000c08 <HAL_RCC_OscConfig+0x3e8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d033      	beq.n	8000c0e <HAL_RCC_OscConfig+0x3ee>
        pll_config = RCC->PLLCFGR;
 8000ba6:	4b1b      	ldr	r3, [pc, #108]	; (8000c14 <HAL_RCC_OscConfig+0x3f4>)
 8000ba8:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000baa:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000bae:	69e2      	ldr	r2, [r4, #28]
 8000bb0:	4291      	cmp	r1, r2
 8000bb2:	d001      	beq.n	8000bb8 <HAL_RCC_OscConfig+0x398>
          return HAL_ERROR;
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	e027      	b.n	8000c08 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000bb8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000bbc:	6a21      	ldr	r1, [r4, #32]
 8000bbe:	428a      	cmp	r2, r1
 8000bc0:	d001      	beq.n	8000bc6 <HAL_RCC_OscConfig+0x3a6>
          return HAL_ERROR;
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	e020      	b.n	8000c08 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000bc6:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000bc8:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8000bcc:	401a      	ands	r2, r3
 8000bce:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8000bd2:	d001      	beq.n	8000bd8 <HAL_RCC_OscConfig+0x3b8>
          return HAL_ERROR;
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	e017      	b.n	8000c08 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000bd8:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8000bdc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000bde:	0852      	lsrs	r2, r2, #1
 8000be0:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000be2:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8000be6:	d001      	beq.n	8000bec <HAL_RCC_OscConfig+0x3cc>
          return HAL_ERROR;
 8000be8:	2001      	movs	r0, #1
 8000bea:	e00d      	b.n	8000c08 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000bec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000bee:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000bf2:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
    return HAL_ERROR;
 8000bf6:	bf14      	ite	ne
 8000bf8:	2001      	movne	r0, #1
 8000bfa:	2000      	moveq	r0, #0
 8000bfc:	e004      	b.n	8000c08 <HAL_RCC_OscConfig+0x3e8>
 8000bfe:	2001      	movs	r0, #1
}
 8000c00:	4770      	bx	lr
        return HAL_ERROR;
 8000c02:	2001      	movs	r0, #1
 8000c04:	e000      	b.n	8000c08 <HAL_RCC_OscConfig+0x3e8>
  return HAL_OK;
 8000c06:	2000      	movs	r0, #0
}
 8000c08:	b002      	add	sp, #8
 8000c0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8000c0e:	2001      	movs	r0, #1
 8000c10:	e7fa      	b.n	8000c08 <HAL_RCC_OscConfig+0x3e8>
 8000c12:	bf00      	nop
 8000c14:	40023800 	.word	0x40023800
 8000c18:	42470060 	.word	0x42470060

08000c1c <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8000c1c:	b570      	push	{r4, r5, r6, lr}
 8000c1e:	b088      	sub	sp, #32
 8000c20:	460e      	mov	r6, r1
 8000c22:	4615      	mov	r5, r2
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8000c24:	b308      	cbz	r0, 8000c6a <HAL_RCC_MCOConfig+0x4e>
  else
  {
    assert_param(IS_RCC_MCO2SOURCE(RCC_MCOSource));

    /* MCO2 Clock Enable */
    __MCO2_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	9302      	str	r3, [sp, #8]
 8000c2a:	4c20      	ldr	r4, [pc, #128]	; (8000cac <HAL_RCC_MCOConfig+0x90>)
 8000c2c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000c2e:	f042 0204 	orr.w	r2, r2, #4
 8000c32:	6322      	str	r2, [r4, #48]	; 0x30
 8000c34:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000c36:	f002 0204 	and.w	r2, r2, #4
 8000c3a:	9202      	str	r2, [sp, #8]
 8000c3c:	9a02      	ldr	r2, [sp, #8]

    /* Configure the MCO2 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO2_PIN;
 8000c3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c42:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c44:	2202      	movs	r2, #2
 8000c46:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c48:	2203      	movs	r2, #3
 8000c4a:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000c4e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8000c50:	a903      	add	r1, sp, #12
 8000c52:	4817      	ldr	r0, [pc, #92]	; (8000cb0 <HAL_RCC_MCOConfig+0x94>)
 8000c54:	f7ff fcee 	bl	8000634 <HAL_GPIO_Init>

    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8000c58:	68a2      	ldr	r2, [r4, #8]
 8000c5a:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 8000c5e:	4332      	orrs	r2, r6
 8000c60:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
 8000c64:	60a2      	str	r2, [r4, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8000c66:	b008      	add	sp, #32
 8000c68:	bd70      	pop	{r4, r5, r6, pc}
    __MCO1_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	9301      	str	r3, [sp, #4]
 8000c6e:	4c0f      	ldr	r4, [pc, #60]	; (8000cac <HAL_RCC_MCOConfig+0x90>)
 8000c70:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000c72:	f042 0201 	orr.w	r2, r2, #1
 8000c76:	6322      	str	r2, [r4, #48]	; 0x30
 8000c78:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000c7a:	f002 0201 	and.w	r2, r2, #1
 8000c7e:	9201      	str	r2, [sp, #4]
 8000c80:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Pin = MCO1_PIN;
 8000c82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c86:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c88:	2202      	movs	r2, #2
 8000c8a:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8c:	2203      	movs	r2, #3
 8000c8e:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000c92:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8000c94:	a903      	add	r1, sp, #12
 8000c96:	4807      	ldr	r0, [pc, #28]	; (8000cb4 <HAL_RCC_MCOConfig+0x98>)
 8000c98:	f7ff fccc 	bl	8000634 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8000c9c:	68a2      	ldr	r2, [r4, #8]
 8000c9e:	f022 62ec 	bic.w	r2, r2, #123731968	; 0x7600000
 8000ca2:	4332      	orrs	r2, r6
 8000ca4:	432a      	orrs	r2, r5
 8000ca6:	60a2      	str	r2, [r4, #8]
 8000ca8:	e7dd      	b.n	8000c66 <HAL_RCC_MCOConfig+0x4a>
 8000caa:	bf00      	nop
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40020800 	.word	0x40020800
 8000cb4:	40020000 	.word	0x40020000

08000cb8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000cb8:	4b26      	ldr	r3, [pc, #152]	; (8000d54 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	f003 030c 	and.w	r3, r3, #12
 8000cc0:	2b04      	cmp	r3, #4
 8000cc2:	d003      	beq.n	8000ccc <HAL_RCC_GetSysClockFreq+0x14>
 8000cc4:	2b08      	cmp	r3, #8
 8000cc6:	d003      	beq.n	8000cd0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000cc8:	4823      	ldr	r0, [pc, #140]	; (8000d58 <HAL_RCC_GetSysClockFreq+0xa0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000cca:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8000ccc:	4823      	ldr	r0, [pc, #140]	; (8000d5c <HAL_RCC_GetSysClockFreq+0xa4>)
 8000cce:	4770      	bx	lr
{
 8000cd0:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000cd4:	4b1f      	ldr	r3, [pc, #124]	; (8000d54 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000cd6:	685a      	ldr	r2, [r3, #4]
 8000cd8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000ce2:	d013      	beq.n	8000d0c <HAL_RCC_GetSysClockFreq+0x54>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ce4:	4b1b      	ldr	r3, [pc, #108]	; (8000d54 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000ce6:	6859      	ldr	r1, [r3, #4]
 8000ce8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000cec:	2300      	movs	r3, #0
 8000cee:	481b      	ldr	r0, [pc, #108]	; (8000d5c <HAL_RCC_GetSysClockFreq+0xa4>)
 8000cf0:	fba1 0100 	umull	r0, r1, r1, r0
 8000cf4:	f7ff fa70 	bl	80001d8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000cf8:	4b16      	ldr	r3, [pc, #88]	; (8000d54 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000d00:	3301      	adds	r3, #1
 8000d02:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000d04:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000d08:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d0c:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8000d14:	461e      	mov	r6, r3
 8000d16:	2700      	movs	r7, #0
 8000d18:	015c      	lsls	r4, r3, #5
 8000d1a:	2500      	movs	r5, #0
 8000d1c:	1ae4      	subs	r4, r4, r3
 8000d1e:	eb65 0507 	sbc.w	r5, r5, r7
 8000d22:	01a9      	lsls	r1, r5, #6
 8000d24:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8000d28:	01a0      	lsls	r0, r4, #6
 8000d2a:	1b00      	subs	r0, r0, r4
 8000d2c:	eb61 0105 	sbc.w	r1, r1, r5
 8000d30:	00cb      	lsls	r3, r1, #3
 8000d32:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000d36:	00c4      	lsls	r4, r0, #3
 8000d38:	19a0      	adds	r0, r4, r6
 8000d3a:	eb43 0107 	adc.w	r1, r3, r7
 8000d3e:	028b      	lsls	r3, r1, #10
 8000d40:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8000d44:	0284      	lsls	r4, r0, #10
 8000d46:	4620      	mov	r0, r4
 8000d48:	4619      	mov	r1, r3
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f7ff fa44 	bl	80001d8 <__aeabi_uldivmod>
 8000d50:	e7d2      	b.n	8000cf8 <HAL_RCC_GetSysClockFreq+0x40>
 8000d52:	bf00      	nop
 8000d54:	40023800 	.word	0x40023800
 8000d58:	00f42400 	.word	0x00f42400
 8000d5c:	017d7840 	.word	0x017d7840

08000d60 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8000d60:	2800      	cmp	r0, #0
 8000d62:	f000 80a1 	beq.w	8000ea8 <HAL_RCC_ClockConfig+0x148>
{
 8000d66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d6a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000d6c:	4b50      	ldr	r3, [pc, #320]	; (8000eb0 <HAL_RCC_ClockConfig+0x150>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f003 0307 	and.w	r3, r3, #7
 8000d74:	428b      	cmp	r3, r1
 8000d76:	d20a      	bcs.n	8000d8e <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d78:	b2cb      	uxtb	r3, r1
 8000d7a:	4a4d      	ldr	r2, [pc, #308]	; (8000eb0 <HAL_RCC_ClockConfig+0x150>)
 8000d7c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d7e:	6813      	ldr	r3, [r2, #0]
 8000d80:	f003 0307 	and.w	r3, r3, #7
 8000d84:	428b      	cmp	r3, r1
 8000d86:	d002      	beq.n	8000d8e <HAL_RCC_ClockConfig+0x2e>
      return HAL_ERROR;
 8000d88:	2001      	movs	r0, #1
}
 8000d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d8e:	6823      	ldr	r3, [r4, #0]
 8000d90:	f013 0f02 	tst.w	r3, #2
 8000d94:	d017      	beq.n	8000dc6 <HAL_RCC_ClockConfig+0x66>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d96:	f013 0f04 	tst.w	r3, #4
 8000d9a:	d004      	beq.n	8000da6 <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d9c:	4a45      	ldr	r2, [pc, #276]	; (8000eb4 <HAL_RCC_ClockConfig+0x154>)
 8000d9e:	6893      	ldr	r3, [r2, #8]
 8000da0:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000da4:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000da6:	6823      	ldr	r3, [r4, #0]
 8000da8:	f013 0f08 	tst.w	r3, #8
 8000dac:	d004      	beq.n	8000db8 <HAL_RCC_ClockConfig+0x58>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000dae:	4a41      	ldr	r2, [pc, #260]	; (8000eb4 <HAL_RCC_ClockConfig+0x154>)
 8000db0:	6893      	ldr	r3, [r2, #8]
 8000db2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000db6:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000db8:	4a3e      	ldr	r2, [pc, #248]	; (8000eb4 <HAL_RCC_ClockConfig+0x154>)
 8000dba:	6893      	ldr	r3, [r2, #8]
 8000dbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000dc0:	68a0      	ldr	r0, [r4, #8]
 8000dc2:	4303      	orrs	r3, r0
 8000dc4:	6093      	str	r3, [r2, #8]
 8000dc6:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000dc8:	6823      	ldr	r3, [r4, #0]
 8000dca:	f013 0f01 	tst.w	r3, #1
 8000dce:	d033      	beq.n	8000e38 <HAL_RCC_ClockConfig+0xd8>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dd0:	6862      	ldr	r2, [r4, #4]
 8000dd2:	2a01      	cmp	r2, #1
 8000dd4:	d022      	beq.n	8000e1c <HAL_RCC_ClockConfig+0xbc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000dd6:	1e93      	subs	r3, r2, #2
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d926      	bls.n	8000e2a <HAL_RCC_ClockConfig+0xca>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ddc:	4b35      	ldr	r3, [pc, #212]	; (8000eb4 <HAL_RCC_ClockConfig+0x154>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f013 0f02 	tst.w	r3, #2
 8000de4:	d062      	beq.n	8000eac <HAL_RCC_ClockConfig+0x14c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000de6:	4933      	ldr	r1, [pc, #204]	; (8000eb4 <HAL_RCC_ClockConfig+0x154>)
 8000de8:	688b      	ldr	r3, [r1, #8]
 8000dea:	f023 0303 	bic.w	r3, r3, #3
 8000dee:	4313      	orrs	r3, r2
 8000df0:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8000df2:	f7ff fbbf 	bl	8000574 <HAL_GetTick>
 8000df6:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000df8:	4e2e      	ldr	r6, [pc, #184]	; (8000eb4 <HAL_RCC_ClockConfig+0x154>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dfa:	f241 3788 	movw	r7, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000dfe:	68b3      	ldr	r3, [r6, #8]
 8000e00:	f003 030c 	and.w	r3, r3, #12
 8000e04:	6862      	ldr	r2, [r4, #4]
 8000e06:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000e0a:	d015      	beq.n	8000e38 <HAL_RCC_ClockConfig+0xd8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e0c:	f7ff fbb2 	bl	8000574 <HAL_GetTick>
 8000e10:	eba0 0008 	sub.w	r0, r0, r8
 8000e14:	42b8      	cmp	r0, r7
 8000e16:	d9f2      	bls.n	8000dfe <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 8000e18:	2003      	movs	r0, #3
 8000e1a:	e7b6      	b.n	8000d8a <HAL_RCC_ClockConfig+0x2a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e1c:	4b25      	ldr	r3, [pc, #148]	; (8000eb4 <HAL_RCC_ClockConfig+0x154>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000e24:	d1df      	bne.n	8000de6 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8000e26:	2001      	movs	r0, #1
 8000e28:	e7af      	b.n	8000d8a <HAL_RCC_ClockConfig+0x2a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e2a:	4b22      	ldr	r3, [pc, #136]	; (8000eb4 <HAL_RCC_ClockConfig+0x154>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000e32:	d1d8      	bne.n	8000de6 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8000e34:	2001      	movs	r0, #1
 8000e36:	e7a8      	b.n	8000d8a <HAL_RCC_ClockConfig+0x2a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000e38:	4b1d      	ldr	r3, [pc, #116]	; (8000eb0 <HAL_RCC_ClockConfig+0x150>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f003 0307 	and.w	r3, r3, #7
 8000e40:	42ab      	cmp	r3, r5
 8000e42:	d909      	bls.n	8000e58 <HAL_RCC_ClockConfig+0xf8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e44:	b2ea      	uxtb	r2, r5
 8000e46:	4b1a      	ldr	r3, [pc, #104]	; (8000eb0 <HAL_RCC_ClockConfig+0x150>)
 8000e48:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f003 0307 	and.w	r3, r3, #7
 8000e50:	42ab      	cmp	r3, r5
 8000e52:	d001      	beq.n	8000e58 <HAL_RCC_ClockConfig+0xf8>
      return HAL_ERROR;
 8000e54:	2001      	movs	r0, #1
 8000e56:	e798      	b.n	8000d8a <HAL_RCC_ClockConfig+0x2a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e58:	6823      	ldr	r3, [r4, #0]
 8000e5a:	f013 0f04 	tst.w	r3, #4
 8000e5e:	d006      	beq.n	8000e6e <HAL_RCC_ClockConfig+0x10e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e60:	4a14      	ldr	r2, [pc, #80]	; (8000eb4 <HAL_RCC_ClockConfig+0x154>)
 8000e62:	6893      	ldr	r3, [r2, #8]
 8000e64:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000e68:	68e1      	ldr	r1, [r4, #12]
 8000e6a:	430b      	orrs	r3, r1
 8000e6c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e6e:	6823      	ldr	r3, [r4, #0]
 8000e70:	f013 0f08 	tst.w	r3, #8
 8000e74:	d007      	beq.n	8000e86 <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000e76:	4a0f      	ldr	r2, [pc, #60]	; (8000eb4 <HAL_RCC_ClockConfig+0x154>)
 8000e78:	6893      	ldr	r3, [r2, #8]
 8000e7a:	6921      	ldr	r1, [r4, #16]
 8000e7c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000e80:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000e84:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000e86:	f7ff ff17 	bl	8000cb8 <HAL_RCC_GetSysClockFreq>
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <HAL_RCC_ClockConfig+0x154>)
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000e92:	4a09      	ldr	r2, [pc, #36]	; (8000eb8 <HAL_RCC_ClockConfig+0x158>)
 8000e94:	5cd3      	ldrb	r3, [r2, r3]
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <HAL_RCC_ClockConfig+0x15c>)
 8000e9a:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <HAL_RCC_ClockConfig+0x160>)
 8000e9e:	6818      	ldr	r0, [r3, #0]
 8000ea0:	f7ff fb1c 	bl	80004dc <HAL_InitTick>
  return HAL_OK;
 8000ea4:	2000      	movs	r0, #0
 8000ea6:	e770      	b.n	8000d8a <HAL_RCC_ClockConfig+0x2a>
    return HAL_ERROR;
 8000ea8:	2001      	movs	r0, #1
}
 8000eaa:	4770      	bx	lr
        return HAL_ERROR;
 8000eac:	2001      	movs	r0, #1
 8000eae:	e76c      	b.n	8000d8a <HAL_RCC_ClockConfig+0x2a>
 8000eb0:	40023c00 	.word	0x40023c00
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	08002230 	.word	0x08002230
 8000ebc:	20000008 	.word	0x20000008
 8000ec0:	20000004 	.word	0x20000004

08000ec4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000ec4:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000ecc:	4a03      	ldr	r2, [pc, #12]	; (8000edc <HAL_RCC_GetPCLK1Freq+0x18>)
 8000ece:	5cd3      	ldrb	r3, [r2, r3]
 8000ed0:	4a03      	ldr	r2, [pc, #12]	; (8000ee0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000ed2:	6810      	ldr	r0, [r2, #0]
}
 8000ed4:	40d8      	lsrs	r0, r3
 8000ed6:	4770      	bx	lr
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	08002240 	.word	0x08002240
 8000ee0:	20000008 	.word	0x20000008

08000ee4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000ee4:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000eec:	4a03      	ldr	r2, [pc, #12]	; (8000efc <HAL_RCC_GetPCLK2Freq+0x18>)
 8000eee:	5cd3      	ldrb	r3, [r2, r3]
 8000ef0:	4a03      	ldr	r2, [pc, #12]	; (8000f00 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000ef2:	6810      	ldr	r0, [r2, #0]
}
 8000ef4:	40d8      	lsrs	r0, r3
 8000ef6:	4770      	bx	lr
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	08002240 	.word	0x08002240
 8000f00:	20000008 	.word	0x20000008

08000f04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000f04:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8000f08:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000f0a:	6802      	ldr	r2, [r0, #0]
 8000f0c:	6913      	ldr	r3, [r2, #16]
 8000f0e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f12:	68c1      	ldr	r1, [r0, #12]
 8000f14:	430b      	orrs	r3, r1
 8000f16:	6113      	str	r3, [r2, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
 8000f18:	6801      	ldr	r1, [r0, #0]
 8000f1a:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000f1c:	6883      	ldr	r3, [r0, #8]
 8000f1e:	6900      	ldr	r0, [r0, #16]
 8000f20:	4303      	orrs	r3, r0
 8000f22:	6960      	ldr	r0, [r4, #20]
 8000f24:	4303      	orrs	r3, r0
 8000f26:	69e0      	ldr	r0, [r4, #28]
 8000f28:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8000f2a:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 8000f2e:	f022 020c 	bic.w	r2, r2, #12
 8000f32:	4313      	orrs	r3, r2
 8000f34:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000f36:	6822      	ldr	r2, [r4, #0]
 8000f38:	6953      	ldr	r3, [r2, #20]
 8000f3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f3e:	69a1      	ldr	r1, [r4, #24]
 8000f40:	430b      	orrs	r3, r1
 8000f42:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000f44:	6823      	ldr	r3, [r4, #0]
 8000f46:	4a38      	ldr	r2, [pc, #224]	; (8001028 <UART_SetConfig+0x124>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d006      	beq.n	8000f5a <UART_SetConfig+0x56>
 8000f4c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d002      	beq.n	8000f5a <UART_SetConfig+0x56>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8000f54:	f7ff ffb6 	bl	8000ec4 <HAL_RCC_GetPCLK1Freq>
 8000f58:	e001      	b.n	8000f5e <UART_SetConfig+0x5a>
      pclk = HAL_RCC_GetPCLK2Freq();
 8000f5a:	f7ff ffc3 	bl	8000ee4 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000f5e:	69e3      	ldr	r3, [r4, #28]
 8000f60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f64:	d02c      	beq.n	8000fc0 <UART_SetConfig+0xbc>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000f66:	f04f 0900 	mov.w	r9, #0
 8000f6a:	1806      	adds	r6, r0, r0
 8000f6c:	eb49 0709 	adc.w	r7, r9, r9
 8000f70:	eb16 0b00 	adds.w	fp, r6, r0
 8000f74:	eb47 0c09 	adc.w	ip, r7, r9
 8000f78:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8000f7c:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 8000f80:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 8000f84:	4693      	mov	fp, r2
 8000f86:	469c      	mov	ip, r3
 8000f88:	6863      	ldr	r3, [r4, #4]
 8000f8a:	009a      	lsls	r2, r3, #2
 8000f8c:	0f9b      	lsrs	r3, r3, #30
 8000f8e:	eb10 000b 	adds.w	r0, r0, fp
 8000f92:	eb49 010c 	adc.w	r1, r9, ip
 8000f96:	f7ff f91f 	bl	80001d8 <__aeabi_uldivmod>
 8000f9a:	6824      	ldr	r4, [r4, #0]
 8000f9c:	4923      	ldr	r1, [pc, #140]	; (800102c <UART_SetConfig+0x128>)
 8000f9e:	fba1 3200 	umull	r3, r2, r1, r0
 8000fa2:	0952      	lsrs	r2, r2, #5
 8000fa4:	2364      	movs	r3, #100	; 0x64
 8000fa6:	fb03 0312 	mls	r3, r3, r2, r0
 8000faa:	011b      	lsls	r3, r3, #4
 8000fac:	3332      	adds	r3, #50	; 0x32
 8000fae:	fba1 1303 	umull	r1, r3, r1, r3
 8000fb2:	f3c3 1347 	ubfx	r3, r3, #5, #8
 8000fb6:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8000fba:	60a3      	str	r3, [r4, #8]
  }
}
 8000fbc:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8000fc0:	4683      	mov	fp, r0
 8000fc2:	f04f 0c00 	mov.w	ip, #0
 8000fc6:	1806      	adds	r6, r0, r0
 8000fc8:	eb4c 070c 	adc.w	r7, ip, ip
 8000fcc:	eb16 0800 	adds.w	r8, r6, r0
 8000fd0:	eb47 090c 	adc.w	r9, r7, ip
 8000fd4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000fd8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000fdc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000fe0:	4690      	mov	r8, r2
 8000fe2:	4699      	mov	r9, r3
 8000fe4:	6862      	ldr	r2, [r4, #4]
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	1892      	adds	r2, r2, r2
 8000fea:	eb41 0301 	adc.w	r3, r1, r1
 8000fee:	eb1b 0008 	adds.w	r0, fp, r8
 8000ff2:	eb4c 0109 	adc.w	r1, ip, r9
 8000ff6:	f7ff f8ef 	bl	80001d8 <__aeabi_uldivmod>
 8000ffa:	4d0c      	ldr	r5, [pc, #48]	; (800102c <UART_SetConfig+0x128>)
 8000ffc:	fba5 3200 	umull	r3, r2, r5, r0
 8001000:	0951      	lsrs	r1, r2, #5
 8001002:	2364      	movs	r3, #100	; 0x64
 8001004:	fb03 0311 	mls	r3, r3, r1, r0
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	3332      	adds	r3, #50	; 0x32
 800100c:	fba5 2303 	umull	r2, r3, r5, r3
 8001010:	095b      	lsrs	r3, r3, #5
 8001012:	6820      	ldr	r0, [r4, #0]
 8001014:	f003 0207 	and.w	r2, r3, #7
 8001018:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001022:	4413      	add	r3, r2
 8001024:	6083      	str	r3, [r0, #8]
 8001026:	e7c9      	b.n	8000fbc <UART_SetConfig+0xb8>
 8001028:	40011000 	.word	0x40011000
 800102c:	51eb851f 	.word	0x51eb851f

08001030 <HAL_UART_MspInit>:
}
 8001030:	4770      	bx	lr

08001032 <HAL_UART_Init>:
  if (huart == NULL)
 8001032:	b358      	cbz	r0, 800108c <HAL_UART_Init+0x5a>
{
 8001034:	b510      	push	{r4, lr}
 8001036:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001038:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800103c:	b30b      	cbz	r3, 8001082 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800103e:	2324      	movs	r3, #36	; 0x24
 8001040:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8001044:	6822      	ldr	r2, [r4, #0]
 8001046:	68d3      	ldr	r3, [r2, #12]
 8001048:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800104c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800104e:	4620      	mov	r0, r4
 8001050:	f7ff ff58 	bl	8000f04 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001054:	6822      	ldr	r2, [r4, #0]
 8001056:	6913      	ldr	r3, [r2, #16]
 8001058:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800105c:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800105e:	6822      	ldr	r2, [r4, #0]
 8001060:	6953      	ldr	r3, [r2, #20]
 8001062:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001066:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001068:	6822      	ldr	r2, [r4, #0]
 800106a:	68d3      	ldr	r3, [r2, #12]
 800106c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001070:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001072:	2000      	movs	r0, #0
 8001074:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001076:	2320      	movs	r3, #32
 8001078:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800107c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8001080:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001082:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8001086:	f7ff ffd3 	bl	8001030 <HAL_UART_MspInit>
 800108a:	e7d8      	b.n	800103e <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800108c:	2001      	movs	r0, #1
}
 800108e:	4770      	bx	lr

08001090 <GCControllerEmulation_Init>:
inline static void GCControllerEmulation_ProcessSwitchSnapshot();

// Function Implementations //
/* Initializes this module to properly emulate a GC controller */
void GCControllerEmulation_Init()
{
 8001090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001094:	b08b      	sub	sp, #44	; 0x2c
	/* Setup GC communication */
	// Clocks
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001096:	2400      	movs	r4, #0
 8001098:	9400      	str	r4, [sp, #0]
 800109a:	4ea1      	ldr	r6, [pc, #644]	; (8001320 <GCControllerEmulation_Init+0x290>)
 800109c:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800109e:	f043 0302 	orr.w	r3, r3, #2
 80010a2:	6333      	str	r3, [r6, #48]	; 0x30
 80010a4:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	9b00      	ldr	r3, [sp, #0]
	__HAL_RCC_USART1_CLK_ENABLE();
 80010ae:	9401      	str	r4, [sp, #4]
 80010b0:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80010b2:	f043 0310 	orr.w	r3, r3, #16
 80010b6:	6473      	str	r3, [r6, #68]	; 0x44
 80010b8:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80010ba:	f003 0310 	and.w	r3, r3, #16
 80010be:	9301      	str	r3, [sp, #4]
 80010c0:	9b01      	ldr	r3, [sp, #4]

	// Init structure
	GPIO_InitTypeDef GPIO_InitStruct_GCControllerEmulation = {0};
 80010c2:	9407      	str	r4, [sp, #28]
 80010c4:	9409      	str	r4, [sp, #36]	; 0x24

	// Stop bit control
	GPIO_InitStruct_GCControllerEmulation.Pin = GC_STOP_PIN_HAL;
 80010c6:	f04f 0a20 	mov.w	sl, #32
 80010ca:	f8cd a014 	str.w	sl, [sp, #20]
	GPIO_InitStruct_GCControllerEmulation.Mode = GPIO_MODE_OUTPUT_OD;
 80010ce:	2311      	movs	r3, #17
 80010d0:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct_GCControllerEmulation.Pull = GPIO_NOPULL;
	GPIO_InitStruct_GCControllerEmulation.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d2:	2503      	movs	r5, #3
 80010d4:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(GC_STOP_PORT, &GPIO_InitStruct_GCControllerEmulation);
 80010d6:	f8df 825c 	ldr.w	r8, [pc, #604]	; 8001334 <GCControllerEmulation_Init+0x2a4>
 80010da:	a905      	add	r1, sp, #20
 80010dc:	4640      	mov	r0, r8
 80010de:	f7ff faa9 	bl	8000634 <HAL_GPIO_Init>
	GC_STOP_PORT->BSRR = GC_STOP_SET;
 80010e2:	f8c8 a018 	str.w	sl, [r8, #24]

	// USART1 TX/RX
	GPIO_InitStruct_GCControllerEmulation.Pin = GC_TX_PIN_HAL | GC_RX_PIN_HAL;
 80010e6:	23c0      	movs	r3, #192	; 0xc0
 80010e8:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct_GCControllerEmulation.Mode = GPIO_MODE_AF_OD;
 80010ea:	2312      	movs	r3, #18
 80010ec:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct_GCControllerEmulation.Alternate = GPIO_AF7_USART1;
 80010ee:	2307      	movs	r3, #7
 80010f0:	9309      	str	r3, [sp, #36]	; 0x24
	GPIO_InitStruct_GCControllerEmulation.Pull = GPIO_NOPULL;
 80010f2:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct_GCControllerEmulation.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f4:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(GC_TX_PORT, &GPIO_InitStruct_GCControllerEmulation);
 80010f6:	a905      	add	r1, sp, #20
 80010f8:	4640      	mov	r0, r8
 80010fa:	f7ff fa9b 	bl	8000634 <HAL_GPIO_Init>

	// Configure USART1
	huart1.Instance = USART1;
 80010fe:	4889      	ldr	r0, [pc, #548]	; (8001324 <GCControllerEmulation_Init+0x294>)
 8001100:	4b89      	ldr	r3, [pc, #548]	; (8001328 <GCControllerEmulation_Init+0x298>)
 8001102:	6003      	str	r3, [r0, #0]
	huart1.Init.BaudRate = 1100000; // 1100000 works
 8001104:	4b89      	ldr	r3, [pc, #548]	; (800132c <GCControllerEmulation_Init+0x29c>)
 8001106:	6043      	str	r3, [r0, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001108:	6084      	str	r4, [r0, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800110a:	60c4      	str	r4, [r0, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800110c:	6104      	str	r4, [r0, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800110e:	230c      	movs	r3, #12
 8001110:	6143      	str	r3, [r0, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001112:	6184      	str	r4, [r0, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001114:	f44f 4900 	mov.w	r9, #32768	; 0x8000
 8001118:	f8c0 901c 	str.w	r9, [r0, #28]
	HAL_UART_Init(&huart1);
 800111c:	f7ff ff89 	bl	8001032 <HAL_UART_Init>

	// Default command state from console
	command = GC_COMMAND_UNKNOWN;

	/* Setup buttons */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001120:	9402      	str	r4, [sp, #8]
 8001122:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	6333      	str	r3, [r6, #48]	; 0x30
 800112a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800112c:	f003 0301 	and.w	r3, r3, #1
 8001130:	9302      	str	r3, [sp, #8]
 8001132:	9b02      	ldr	r3, [sp, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001134:	9403      	str	r4, [sp, #12]
 8001136:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001138:	f043 0302 	orr.w	r3, r3, #2
 800113c:	6333      	str	r3, [r6, #48]	; 0x30
 800113e:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	9303      	str	r3, [sp, #12]
 8001146:	9b03      	ldr	r3, [sp, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001148:	9404      	str	r4, [sp, #16]
 800114a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800114c:	f043 0304 	orr.w	r3, r3, #4
 8001150:	6333      	str	r3, [r6, #48]	; 0x30
 8001152:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001154:	f003 0304 	and.w	r3, r3, #4
 8001158:	9304      	str	r3, [sp, #16]
 800115a:	9b04      	ldr	r3, [sp, #16]

	// A Button
	GPIO_InitStruct_GCControllerEmulation.Pin = BUTTON_A_PIN_HAL;
 800115c:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8001160:	9705      	str	r7, [sp, #20]
	GPIO_InitStruct_GCControllerEmulation.Mode = GPIO_MODE_INPUT;
 8001162:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct_GCControllerEmulation.Pull = GPIO_PULLUP;
 8001164:	2601      	movs	r6, #1
 8001166:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct_GCControllerEmulation.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001168:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(BUTTON_A_PORT, &GPIO_InitStruct_GCControllerEmulation);
 800116a:	a905      	add	r1, sp, #20
 800116c:	4640      	mov	r0, r8
 800116e:	f7ff fa61 	bl	8000634 <HAL_GPIO_Init>

	// B Button
	GPIO_InitStruct_GCControllerEmulation.Pin = BUTTON_B_PIN_HAL;
 8001172:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001176:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct_GCControllerEmulation.Mode = GPIO_MODE_INPUT;
 8001178:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct_GCControllerEmulation.Pull = GPIO_PULLUP;
 800117a:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct_GCControllerEmulation.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117c:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(BUTTON_B_PORT, &GPIO_InitStruct_GCControllerEmulation);
 800117e:	a905      	add	r1, sp, #20
 8001180:	4640      	mov	r0, r8
 8001182:	f7ff fa57 	bl	8000634 <HAL_GPIO_Init>

	// X Button
	GPIO_InitStruct_GCControllerEmulation.Pin = BUTTON_X_PIN_HAL;
 8001186:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800118a:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct_GCControllerEmulation.Mode = GPIO_MODE_INPUT;
 800118c:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct_GCControllerEmulation.Pull = GPIO_PULLUP;
 800118e:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct_GCControllerEmulation.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001190:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(BUTTON_X_PORT, &GPIO_InitStruct_GCControllerEmulation);
 8001192:	a905      	add	r1, sp, #20
 8001194:	4640      	mov	r0, r8
 8001196:	f7ff fa4d 	bl	8000634 <HAL_GPIO_Init>

	// Y Button
	GPIO_InitStruct_GCControllerEmulation.Pin = BUTTON_Y_PIN_HAL;
 800119a:	f8cd 9014 	str.w	r9, [sp, #20]
	GPIO_InitStruct_GCControllerEmulation.Mode = GPIO_MODE_INPUT;
 800119e:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct_GCControllerEmulation.Pull = GPIO_PULLUP;
 80011a0:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct_GCControllerEmulation.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a2:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(BUTTON_Y_PORT, &GPIO_InitStruct_GCControllerEmulation);
 80011a4:	a905      	add	r1, sp, #20
 80011a6:	4640      	mov	r0, r8
 80011a8:	f7ff fa44 	bl	8000634 <HAL_GPIO_Init>

	// L Button
	GPIO_InitStruct_GCControllerEmulation.Pin = BUTTON_L_PIN_HAL;
 80011ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011b0:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct_GCControllerEmulation.Mode = GPIO_MODE_INPUT;
 80011b2:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct_GCControllerEmulation.Pull = GPIO_PULLUP;
 80011b4:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct_GCControllerEmulation.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b6:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(BUTTON_L_PORT, &GPIO_InitStruct_GCControllerEmulation);
 80011b8:	a905      	add	r1, sp, #20
 80011ba:	485d      	ldr	r0, [pc, #372]	; (8001330 <GCControllerEmulation_Init+0x2a0>)
 80011bc:	f7ff fa3a 	bl	8000634 <HAL_GPIO_Init>

	// R Button
	GPIO_InitStruct_GCControllerEmulation.Pin = BUTTON_R_PIN_HAL;
 80011c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011c4:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct_GCControllerEmulation.Mode = GPIO_MODE_INPUT;
 80011c6:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct_GCControllerEmulation.Pull = GPIO_PULLUP;
 80011c8:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct_GCControllerEmulation.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ca:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(BUTTON_R_PORT, &GPIO_InitStruct_GCControllerEmulation);
 80011cc:	a905      	add	r1, sp, #20
 80011ce:	4858      	ldr	r0, [pc, #352]	; (8001330 <GCControllerEmulation_Init+0x2a0>)
 80011d0:	f7ff fa30 	bl	8000634 <HAL_GPIO_Init>

	// Z Button
	GPIO_InitStruct_GCControllerEmulation.Pin = BUTTON_Z_PIN_HAL;
 80011d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011d8:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct_GCControllerEmulation.Mode = GPIO_MODE_INPUT;
 80011da:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct_GCControllerEmulation.Pull = GPIO_PULLUP;
 80011dc:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct_GCControllerEmulation.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011de:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(BUTTON_Z_PORT, &GPIO_InitStruct_GCControllerEmulation);
 80011e0:	a905      	add	r1, sp, #20
 80011e2:	4853      	ldr	r0, [pc, #332]	; (8001330 <GCControllerEmulation_Init+0x2a0>)
 80011e4:	f7ff fa26 	bl	8000634 <HAL_GPIO_Init>

	// START Button
	GPIO_InitStruct_GCControllerEmulation.Pin = BUTTON_START_PIN_HAL;
 80011e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011ec:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct_GCControllerEmulation.Mode = GPIO_MODE_INPUT;
 80011ee:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct_GCControllerEmulation.Pull = GPIO_PULLUP;
 80011f0:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct_GCControllerEmulation.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f2:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(BUTTON_START_PORT, &GPIO_InitStruct_GCControllerEmulation);
 80011f4:	a905      	add	r1, sp, #20
 80011f6:	484e      	ldr	r0, [pc, #312]	; (8001330 <GCControllerEmulation_Init+0x2a0>)
 80011f8:	f7ff fa1c 	bl	8000634 <HAL_GPIO_Init>

	// DU Button
	GPIO_InitStruct_GCControllerEmulation.Pin = BUTTON_DU_PIN_HAL;
 80011fc:	f8cd a014 	str.w	sl, [sp, #20]
	GPIO_InitStruct_GCControllerEmulation.Mode = GPIO_MODE_INPUT;
 8001200:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct_GCControllerEmulation.Pull = GPIO_PULLUP;
 8001202:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct_GCControllerEmulation.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001204:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(BUTTON_DU_PORT, &GPIO_InitStruct_GCControllerEmulation);
 8001206:	a905      	add	r1, sp, #20
 8001208:	4849      	ldr	r0, [pc, #292]	; (8001330 <GCControllerEmulation_Init+0x2a0>)
 800120a:	f7ff fa13 	bl	8000634 <HAL_GPIO_Init>

	// DD Button
	GPIO_InitStruct_GCControllerEmulation.Pin = BUTTON_DD_PIN_HAL;
 800120e:	f04f 0a10 	mov.w	sl, #16
 8001212:	f8cd a014 	str.w	sl, [sp, #20]
	GPIO_InitStruct_GCControllerEmulation.Mode = GPIO_MODE_INPUT;
 8001216:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct_GCControllerEmulation.Pull = GPIO_PULLUP;
 8001218:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct_GCControllerEmulation.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121a:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(BUTTON_DD_PORT, &GPIO_InitStruct_GCControllerEmulation);
 800121c:	a905      	add	r1, sp, #20
 800121e:	4844      	ldr	r0, [pc, #272]	; (8001330 <GCControllerEmulation_Init+0x2a0>)
 8001220:	f7ff fa08 	bl	8000634 <HAL_GPIO_Init>

	// DL Button
	GPIO_InitStruct_GCControllerEmulation.Pin = BUTTON_DL_PIN_HAL;
 8001224:	f04f 0b02 	mov.w	fp, #2
 8001228:	f8cd b014 	str.w	fp, [sp, #20]
	GPIO_InitStruct_GCControllerEmulation.Mode = GPIO_MODE_INPUT;
 800122c:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct_GCControllerEmulation.Pull = GPIO_PULLUP;
 800122e:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct_GCControllerEmulation.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001230:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(BUTTON_DL_PORT, &GPIO_InitStruct_GCControllerEmulation);
 8001232:	a905      	add	r1, sp, #20
 8001234:	483e      	ldr	r0, [pc, #248]	; (8001330 <GCControllerEmulation_Init+0x2a0>)
 8001236:	f7ff f9fd 	bl	8000634 <HAL_GPIO_Init>

	// DR Button
	GPIO_InitStruct_GCControllerEmulation.Pin = BUTTON_DR_PIN_HAL;
 800123a:	9605      	str	r6, [sp, #20]
	GPIO_InitStruct_GCControllerEmulation.Mode = GPIO_MODE_INPUT;
 800123c:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct_GCControllerEmulation.Pull = GPIO_PULLUP;
 800123e:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct_GCControllerEmulation.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001240:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(BUTTON_DR_PORT, &GPIO_InitStruct_GCControllerEmulation);
 8001242:	a905      	add	r1, sp, #20
 8001244:	483a      	ldr	r0, [pc, #232]	; (8001330 <GCControllerEmulation_Init+0x2a0>)
 8001246:	f7ff f9f5 	bl	8000634 <HAL_GPIO_Init>

	// LSU Button
	GPIO_InitStruct_GCControllerEmulation.Pin = BUTTON_LSU_PIN_HAL;
 800124a:	f8cd b014 	str.w	fp, [sp, #20]
	GPIO_InitStruct_GCControllerEmulation.Mode = GPIO_MODE_INPUT;
 800124e:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct_GCControllerEmulation.Pull = GPIO_PULLUP;
 8001250:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct_GCControllerEmulation.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001252:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(BUTTON_LSU_PORT, &GPIO_InitStruct_GCControllerEmulation);
 8001254:	a905      	add	r1, sp, #20
 8001256:	4640      	mov	r0, r8
 8001258:	f7ff f9ec 	bl	8000634 <HAL_GPIO_Init>

	// LSD Button
	GPIO_InitStruct_GCControllerEmulation.Pin = BUTTON_LSD_PIN_HAL;
 800125c:	9605      	str	r6, [sp, #20]
	GPIO_InitStruct_GCControllerEmulation.Mode = GPIO_MODE_INPUT;
 800125e:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct_GCControllerEmulation.Pull = GPIO_PULLUP;
 8001260:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct_GCControllerEmulation.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001262:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(BUTTON_LSD_PORT, &GPIO_InitStruct_GCControllerEmulation);
 8001264:	a905      	add	r1, sp, #20
 8001266:	4640      	mov	r0, r8
 8001268:	f7ff f9e4 	bl	8000634 <HAL_GPIO_Init>

	// LSL Button
	GPIO_InitStruct_GCControllerEmulation.Pin = BUTTON_LSL_PIN_HAL;
 800126c:	2380      	movs	r3, #128	; 0x80
 800126e:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct_GCControllerEmulation.Mode = GPIO_MODE_INPUT;
 8001270:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct_GCControllerEmulation.Pull = GPIO_PULLUP;
 8001272:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct_GCControllerEmulation.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001274:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(BUTTON_LSL_PORT, &GPIO_InitStruct_GCControllerEmulation);
 8001276:	a905      	add	r1, sp, #20
 8001278:	482d      	ldr	r0, [pc, #180]	; (8001330 <GCControllerEmulation_Init+0x2a0>)
 800127a:	f7ff f9db 	bl	8000634 <HAL_GPIO_Init>

	// LSR Button
	GPIO_InitStruct_GCControllerEmulation.Pin = BUTTON_LSR_PIN_HAL;
 800127e:	2340      	movs	r3, #64	; 0x40
 8001280:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct_GCControllerEmulation.Mode = GPIO_MODE_INPUT;
 8001282:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct_GCControllerEmulation.Pull = GPIO_PULLUP;
 8001284:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct_GCControllerEmulation.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001286:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(BUTTON_LSR_PORT, &GPIO_InitStruct_GCControllerEmulation);
 8001288:	a905      	add	r1, sp, #20
 800128a:	4829      	ldr	r0, [pc, #164]	; (8001330 <GCControllerEmulation_Init+0x2a0>)
 800128c:	f7ff f9d2 	bl	8000634 <HAL_GPIO_Init>

	// CU Button
	GPIO_InitStruct_GCControllerEmulation.Pin = BUTTON_CU_PIN_HAL;
 8001290:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001294:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct_GCControllerEmulation.Mode = GPIO_MODE_INPUT;
 8001296:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct_GCControllerEmulation.Pull = GPIO_PULLUP;
 8001298:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct_GCControllerEmulation.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129a:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(BUTTON_CU_PORT, &GPIO_InitStruct_GCControllerEmulation);
 800129c:	a905      	add	r1, sp, #20
 800129e:	4824      	ldr	r0, [pc, #144]	; (8001330 <GCControllerEmulation_Init+0x2a0>)
 80012a0:	f7ff f9c8 	bl	8000634 <HAL_GPIO_Init>

	// CD Button
	GPIO_InitStruct_GCControllerEmulation.Pin = BUTTON_CD_PIN_HAL;
 80012a4:	9705      	str	r7, [sp, #20]
	GPIO_InitStruct_GCControllerEmulation.Mode = GPIO_MODE_INPUT;
 80012a6:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct_GCControllerEmulation.Pull = GPIO_PULLUP;
 80012a8:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct_GCControllerEmulation.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012aa:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(BUTTON_CD_PORT, &GPIO_InitStruct_GCControllerEmulation);
 80012ac:	a905      	add	r1, sp, #20
 80012ae:	4820      	ldr	r0, [pc, #128]	; (8001330 <GCControllerEmulation_Init+0x2a0>)
 80012b0:	f7ff f9c0 	bl	8000634 <HAL_GPIO_Init>

	// CL Button
	GPIO_InitStruct_GCControllerEmulation.Pin = BUTTON_CL_PIN_HAL;
 80012b4:	2308      	movs	r3, #8
 80012b6:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct_GCControllerEmulation.Mode = GPIO_MODE_INPUT;
 80012b8:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct_GCControllerEmulation.Pull = GPIO_PULLUP;
 80012ba:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct_GCControllerEmulation.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012bc:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(BUTTON_CL_PORT, &GPIO_InitStruct_GCControllerEmulation);
 80012be:	a905      	add	r1, sp, #20
 80012c0:	4640      	mov	r0, r8
 80012c2:	f7ff f9b7 	bl	8000634 <HAL_GPIO_Init>

	// CR Button
	GPIO_InitStruct_GCControllerEmulation.Pin = BUTTON_CR_PIN_HAL;
 80012c6:	f8cd a014 	str.w	sl, [sp, #20]
	GPIO_InitStruct_GCControllerEmulation.Mode = GPIO_MODE_INPUT;
 80012ca:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct_GCControllerEmulation.Pull = GPIO_PULLUP;
 80012cc:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct_GCControllerEmulation.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ce:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(BUTTON_CR_PORT, &GPIO_InitStruct_GCControllerEmulation);
 80012d0:	a905      	add	r1, sp, #20
 80012d2:	4640      	mov	r0, r8
 80012d4:	f7ff f9ae 	bl	8000634 <HAL_GPIO_Init>

	// MACRO Button
	GPIO_InitStruct_GCControllerEmulation.Pin = BUTTON_MACRO_PIN_HAL;
 80012d8:	f8cd 9014 	str.w	r9, [sp, #20]
	GPIO_InitStruct_GCControllerEmulation.Mode = GPIO_MODE_INPUT;
 80012dc:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct_GCControllerEmulation.Pull = GPIO_PULLUP;
 80012de:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct_GCControllerEmulation.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e0:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(BUTTON_MACRO_PORT, &GPIO_InitStruct_GCControllerEmulation);
 80012e2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80012e6:	f507 37fc 	add.w	r7, r7, #129024	; 0x1f800
 80012ea:	a905      	add	r1, sp, #20
 80012ec:	4638      	mov	r0, r7
 80012ee:	f7ff f9a1 	bl	8000634 <HAL_GPIO_Init>

	// TILT_X Button
	GPIO_InitStruct_GCControllerEmulation.Pin = BUTTON_TILT_X_PIN_HAL;
 80012f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012f6:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct_GCControllerEmulation.Mode = GPIO_MODE_INPUT;
 80012f8:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct_GCControllerEmulation.Pull = GPIO_PULLUP;
 80012fa:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct_GCControllerEmulation.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fc:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(BUTTON_TILT_X_PORT, &GPIO_InitStruct_GCControllerEmulation);
 80012fe:	a905      	add	r1, sp, #20
 8001300:	4638      	mov	r0, r7
 8001302:	f7ff f997 	bl	8000634 <HAL_GPIO_Init>

	// TILT_Y Button
	GPIO_InitStruct_GCControllerEmulation.Pin = BUTTON_TILT_Y_PIN_HAL;
 8001306:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800130a:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct_GCControllerEmulation.Mode = GPIO_MODE_INPUT;
 800130c:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct_GCControllerEmulation.Pull = GPIO_PULLUP;
 800130e:	9607      	str	r6, [sp, #28]
	GPIO_InitStruct_GCControllerEmulation.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001310:	9508      	str	r5, [sp, #32]
	HAL_GPIO_Init(BUTTON_TILT_Y_PORT, &GPIO_InitStruct_GCControllerEmulation);
 8001312:	a905      	add	r1, sp, #20
 8001314:	4638      	mov	r0, r7
 8001316:	f7ff f98d 	bl	8000634 <HAL_GPIO_Init>
}
 800131a:	b00b      	add	sp, #44	; 0x2c
 800131c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001320:	40023800 	.word	0x40023800
 8001324:	20000058 	.word	0x20000058
 8001328:	40011000 	.word	0x40011000
 800132c:	0010c8e0 	.word	0x0010c8e0
 8001330:	40020000 	.word	0x40020000
 8001334:	40020400 	.word	0x40020400

08001338 <GCControllerEmulation_GetButtonState>:
	gcButtonInputSnapShot[GC_TILT_Y] = GCControllerEmulation_GetButtonState(GC_TILT_Y);
}

// Private Function Implementations //
ButtonState_t GCControllerEmulation_GetButtonState(GCButtonInput_t gcButton)
{
 8001338:	b508      	push	{r3, lr}
	ButtonState_t gcButtonState = RELEASED;

	switch(gcButton)
 800133a:	2816      	cmp	r0, #22
 800133c:	f200 808e 	bhi.w	800145c <GCControllerEmulation_GetButtonState+0x124>
 8001340:	e8df f000 	tbb	[pc, r0]
 8001344:	1e18120c 	.word	0x1e18120c
 8001348:	36302a24 	.word	0x36302a24
 800134c:	4b46413c 	.word	0x4b46413c
 8001350:	5f5a5550 	.word	0x5f5a5550
 8001354:	75706a64 	.word	0x75706a64
 8001358:	807a      	.short	0x807a
 800135a:	86          	.byte	0x86
 800135b:	00          	.byte	0x00
	{
		case GC_A:
			gcButtonState = (ButtonState_t)HAL_GPIO_ReadPin(BUTTON_A_PORT, BUTTON_A_PIN_HAL);
 800135c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001360:	483f      	ldr	r0, [pc, #252]	; (8001460 <GCControllerEmulation_GetButtonState+0x128>)
 8001362:	f7ff fa57 	bl	8000814 <HAL_GPIO_ReadPin>
		default:
			break;
	}

	return gcButtonState;
}
 8001366:	bd08      	pop	{r3, pc}
			gcButtonState = (ButtonState_t)HAL_GPIO_ReadPin(BUTTON_B_PORT, BUTTON_B_PIN_HAL);
 8001368:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800136c:	483c      	ldr	r0, [pc, #240]	; (8001460 <GCControllerEmulation_GetButtonState+0x128>)
 800136e:	f7ff fa51 	bl	8000814 <HAL_GPIO_ReadPin>
			break;
 8001372:	e7f8      	b.n	8001366 <GCControllerEmulation_GetButtonState+0x2e>
			gcButtonState = (ButtonState_t)HAL_GPIO_ReadPin(BUTTON_X_PORT, BUTTON_X_PIN_HAL);
 8001374:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001378:	4839      	ldr	r0, [pc, #228]	; (8001460 <GCControllerEmulation_GetButtonState+0x128>)
 800137a:	f7ff fa4b 	bl	8000814 <HAL_GPIO_ReadPin>
			break;
 800137e:	e7f2      	b.n	8001366 <GCControllerEmulation_GetButtonState+0x2e>
			gcButtonState = (ButtonState_t)HAL_GPIO_ReadPin(BUTTON_Y_PORT, BUTTON_Y_PIN_HAL);
 8001380:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001384:	4836      	ldr	r0, [pc, #216]	; (8001460 <GCControllerEmulation_GetButtonState+0x128>)
 8001386:	f7ff fa45 	bl	8000814 <HAL_GPIO_ReadPin>
			break;
 800138a:	e7ec      	b.n	8001366 <GCControllerEmulation_GetButtonState+0x2e>
			gcButtonState = (ButtonState_t)HAL_GPIO_ReadPin(BUTTON_L_PORT, BUTTON_L_PIN_HAL);
 800138c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001390:	4834      	ldr	r0, [pc, #208]	; (8001464 <GCControllerEmulation_GetButtonState+0x12c>)
 8001392:	f7ff fa3f 	bl	8000814 <HAL_GPIO_ReadPin>
			break;
 8001396:	e7e6      	b.n	8001366 <GCControllerEmulation_GetButtonState+0x2e>
			gcButtonState = (ButtonState_t)HAL_GPIO_ReadPin(BUTTON_R_PORT, BUTTON_R_PIN_HAL);
 8001398:	f44f 7100 	mov.w	r1, #512	; 0x200
 800139c:	4831      	ldr	r0, [pc, #196]	; (8001464 <GCControllerEmulation_GetButtonState+0x12c>)
 800139e:	f7ff fa39 	bl	8000814 <HAL_GPIO_ReadPin>
			break;
 80013a2:	e7e0      	b.n	8001366 <GCControllerEmulation_GetButtonState+0x2e>
			gcButtonState = (ButtonState_t)HAL_GPIO_ReadPin(BUTTON_Z_PORT, BUTTON_Z_PIN_HAL);
 80013a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013a8:	482e      	ldr	r0, [pc, #184]	; (8001464 <GCControllerEmulation_GetButtonState+0x12c>)
 80013aa:	f7ff fa33 	bl	8000814 <HAL_GPIO_ReadPin>
			break;
 80013ae:	e7da      	b.n	8001366 <GCControllerEmulation_GetButtonState+0x2e>
			gcButtonState = (ButtonState_t)HAL_GPIO_ReadPin(BUTTON_START_PORT, BUTTON_START_PIN_HAL);
 80013b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013b4:	482b      	ldr	r0, [pc, #172]	; (8001464 <GCControllerEmulation_GetButtonState+0x12c>)
 80013b6:	f7ff fa2d 	bl	8000814 <HAL_GPIO_ReadPin>
			break;
 80013ba:	e7d4      	b.n	8001366 <GCControllerEmulation_GetButtonState+0x2e>
			gcButtonState = (ButtonState_t)HAL_GPIO_ReadPin(BUTTON_DU_PORT, BUTTON_DU_PIN_HAL);
 80013bc:	2120      	movs	r1, #32
 80013be:	4829      	ldr	r0, [pc, #164]	; (8001464 <GCControllerEmulation_GetButtonState+0x12c>)
 80013c0:	f7ff fa28 	bl	8000814 <HAL_GPIO_ReadPin>
			break;
 80013c4:	e7cf      	b.n	8001366 <GCControllerEmulation_GetButtonState+0x2e>
			gcButtonState = (ButtonState_t)HAL_GPIO_ReadPin(BUTTON_DD_PORT, BUTTON_DD_PIN_HAL);
 80013c6:	2110      	movs	r1, #16
 80013c8:	4826      	ldr	r0, [pc, #152]	; (8001464 <GCControllerEmulation_GetButtonState+0x12c>)
 80013ca:	f7ff fa23 	bl	8000814 <HAL_GPIO_ReadPin>
			break;
 80013ce:	e7ca      	b.n	8001366 <GCControllerEmulation_GetButtonState+0x2e>
			gcButtonState = (ButtonState_t)HAL_GPIO_ReadPin(BUTTON_DL_PORT, BUTTON_DL_PIN_HAL);
 80013d0:	2102      	movs	r1, #2
 80013d2:	4824      	ldr	r0, [pc, #144]	; (8001464 <GCControllerEmulation_GetButtonState+0x12c>)
 80013d4:	f7ff fa1e 	bl	8000814 <HAL_GPIO_ReadPin>
			break;
 80013d8:	e7c5      	b.n	8001366 <GCControllerEmulation_GetButtonState+0x2e>
			gcButtonState = (ButtonState_t)HAL_GPIO_ReadPin(BUTTON_DR_PORT, BUTTON_DR_PIN_HAL);
 80013da:	2101      	movs	r1, #1
 80013dc:	4821      	ldr	r0, [pc, #132]	; (8001464 <GCControllerEmulation_GetButtonState+0x12c>)
 80013de:	f7ff fa19 	bl	8000814 <HAL_GPIO_ReadPin>
			break;
 80013e2:	e7c0      	b.n	8001366 <GCControllerEmulation_GetButtonState+0x2e>
			gcButtonState = (ButtonState_t)HAL_GPIO_ReadPin(BUTTON_LSU_PORT, BUTTON_LSU_PIN_HAL);
 80013e4:	2102      	movs	r1, #2
 80013e6:	481e      	ldr	r0, [pc, #120]	; (8001460 <GCControllerEmulation_GetButtonState+0x128>)
 80013e8:	f7ff fa14 	bl	8000814 <HAL_GPIO_ReadPin>
			break;
 80013ec:	e7bb      	b.n	8001366 <GCControllerEmulation_GetButtonState+0x2e>
			gcButtonState = (ButtonState_t)HAL_GPIO_ReadPin(BUTTON_LSD_PORT, BUTTON_LSD_PIN_HAL);
 80013ee:	2101      	movs	r1, #1
 80013f0:	481b      	ldr	r0, [pc, #108]	; (8001460 <GCControllerEmulation_GetButtonState+0x128>)
 80013f2:	f7ff fa0f 	bl	8000814 <HAL_GPIO_ReadPin>
			break;
 80013f6:	e7b6      	b.n	8001366 <GCControllerEmulation_GetButtonState+0x2e>
			gcButtonState = (ButtonState_t)HAL_GPIO_ReadPin(BUTTON_LSL_PORT, BUTTON_LSL_PIN_HAL);
 80013f8:	2180      	movs	r1, #128	; 0x80
 80013fa:	481a      	ldr	r0, [pc, #104]	; (8001464 <GCControllerEmulation_GetButtonState+0x12c>)
 80013fc:	f7ff fa0a 	bl	8000814 <HAL_GPIO_ReadPin>
			break;
 8001400:	e7b1      	b.n	8001366 <GCControllerEmulation_GetButtonState+0x2e>
			gcButtonState = (ButtonState_t)HAL_GPIO_ReadPin(BUTTON_LSR_PORT, BUTTON_LSR_PIN_HAL);
 8001402:	2140      	movs	r1, #64	; 0x40
 8001404:	4817      	ldr	r0, [pc, #92]	; (8001464 <GCControllerEmulation_GetButtonState+0x12c>)
 8001406:	f7ff fa05 	bl	8000814 <HAL_GPIO_ReadPin>
			break;
 800140a:	e7ac      	b.n	8001366 <GCControllerEmulation_GetButtonState+0x2e>
			gcButtonState = (ButtonState_t)HAL_GPIO_ReadPin(BUTTON_CU_PORT, BUTTON_CU_PIN_HAL);
 800140c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001410:	4814      	ldr	r0, [pc, #80]	; (8001464 <GCControllerEmulation_GetButtonState+0x12c>)
 8001412:	f7ff f9ff 	bl	8000814 <HAL_GPIO_ReadPin>
			break;
 8001416:	e7a6      	b.n	8001366 <GCControllerEmulation_GetButtonState+0x2e>
			gcButtonState = (ButtonState_t)HAL_GPIO_ReadPin(BUTTON_CD_PORT, BUTTON_CD_PIN_HAL);
 8001418:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800141c:	4811      	ldr	r0, [pc, #68]	; (8001464 <GCControllerEmulation_GetButtonState+0x12c>)
 800141e:	f7ff f9f9 	bl	8000814 <HAL_GPIO_ReadPin>
			break;
 8001422:	e7a0      	b.n	8001366 <GCControllerEmulation_GetButtonState+0x2e>
			gcButtonState = (ButtonState_t)HAL_GPIO_ReadPin(BUTTON_CL_PORT, BUTTON_CL_PIN_HAL);
 8001424:	2108      	movs	r1, #8
 8001426:	480e      	ldr	r0, [pc, #56]	; (8001460 <GCControllerEmulation_GetButtonState+0x128>)
 8001428:	f7ff f9f4 	bl	8000814 <HAL_GPIO_ReadPin>
			break;
 800142c:	e79b      	b.n	8001366 <GCControllerEmulation_GetButtonState+0x2e>
			gcButtonState = (ButtonState_t)HAL_GPIO_ReadPin(BUTTON_CR_PORT, BUTTON_CR_PIN_HAL);
 800142e:	2110      	movs	r1, #16
 8001430:	480b      	ldr	r0, [pc, #44]	; (8001460 <GCControllerEmulation_GetButtonState+0x128>)
 8001432:	f7ff f9ef 	bl	8000814 <HAL_GPIO_ReadPin>
			break;
 8001436:	e796      	b.n	8001366 <GCControllerEmulation_GetButtonState+0x2e>
			gcButtonState = (ButtonState_t)HAL_GPIO_ReadPin(BUTTON_MACRO_PORT, BUTTON_MACRO_PIN_HAL);
 8001438:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800143c:	480a      	ldr	r0, [pc, #40]	; (8001468 <GCControllerEmulation_GetButtonState+0x130>)
 800143e:	f7ff f9e9 	bl	8000814 <HAL_GPIO_ReadPin>
			break;
 8001442:	e790      	b.n	8001366 <GCControllerEmulation_GetButtonState+0x2e>
			gcButtonState = (ButtonState_t)HAL_GPIO_ReadPin(BUTTON_TILT_X_PORT, BUTTON_TILT_X_PIN_HAL);
 8001444:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001448:	4807      	ldr	r0, [pc, #28]	; (8001468 <GCControllerEmulation_GetButtonState+0x130>)
 800144a:	f7ff f9e3 	bl	8000814 <HAL_GPIO_ReadPin>
			break;
 800144e:	e78a      	b.n	8001366 <GCControllerEmulation_GetButtonState+0x2e>
			gcButtonState = (ButtonState_t)HAL_GPIO_ReadPin(BUTTON_TILT_Y_PORT, BUTTON_TILT_Y_PIN_HAL);
 8001450:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001454:	4804      	ldr	r0, [pc, #16]	; (8001468 <GCControllerEmulation_GetButtonState+0x130>)
 8001456:	f7ff f9dd 	bl	8000814 <HAL_GPIO_ReadPin>
			break;
 800145a:	e784      	b.n	8001366 <GCControllerEmulation_GetButtonState+0x2e>
	ButtonState_t gcButtonState = RELEASED;
 800145c:	2001      	movs	r0, #1
 800145e:	e782      	b.n	8001366 <GCControllerEmulation_GetButtonState+0x2e>
 8001460:	40020400 	.word	0x40020400
 8001464:	40020000 	.word	0x40020000
 8001468:	40020800 	.word	0x40020800

0800146c <GCControllerEmulation_GetSwitchSnapshot>:
{
 800146c:	b510      	push	{r4, lr}
	gcButtonInputSnapShot[GC_A] = GCControllerEmulation_GetButtonState(GC_A);
 800146e:	2000      	movs	r0, #0
 8001470:	f7ff ff62 	bl	8001338 <GCControllerEmulation_GetButtonState>
 8001474:	4c2d      	ldr	r4, [pc, #180]	; (800152c <GCControllerEmulation_GetSwitchSnapshot+0xc0>)
 8001476:	7020      	strb	r0, [r4, #0]
	gcButtonInputSnapShot[GC_B] = GCControllerEmulation_GetButtonState(GC_B);
 8001478:	2001      	movs	r0, #1
 800147a:	f7ff ff5d 	bl	8001338 <GCControllerEmulation_GetButtonState>
 800147e:	7060      	strb	r0, [r4, #1]
	gcButtonInputSnapShot[GC_X] = GCControllerEmulation_GetButtonState(GC_X);
 8001480:	2002      	movs	r0, #2
 8001482:	f7ff ff59 	bl	8001338 <GCControllerEmulation_GetButtonState>
 8001486:	70a0      	strb	r0, [r4, #2]
	gcButtonInputSnapShot[GC_Y] = GCControllerEmulation_GetButtonState(GC_Y);
 8001488:	2003      	movs	r0, #3
 800148a:	f7ff ff55 	bl	8001338 <GCControllerEmulation_GetButtonState>
 800148e:	70e0      	strb	r0, [r4, #3]
	gcButtonInputSnapShot[GC_L] = GCControllerEmulation_GetButtonState(GC_L);
 8001490:	2004      	movs	r0, #4
 8001492:	f7ff ff51 	bl	8001338 <GCControllerEmulation_GetButtonState>
 8001496:	7120      	strb	r0, [r4, #4]
	gcButtonInputSnapShot[GC_R] = GCControllerEmulation_GetButtonState(GC_R);
 8001498:	2005      	movs	r0, #5
 800149a:	f7ff ff4d 	bl	8001338 <GCControllerEmulation_GetButtonState>
 800149e:	7160      	strb	r0, [r4, #5]
	gcButtonInputSnapShot[GC_Z] = GCControllerEmulation_GetButtonState(GC_Z);
 80014a0:	2006      	movs	r0, #6
 80014a2:	f7ff ff49 	bl	8001338 <GCControllerEmulation_GetButtonState>
 80014a6:	71a0      	strb	r0, [r4, #6]
	gcButtonInputSnapShot[GC_START] = GCControllerEmulation_GetButtonState(GC_START);
 80014a8:	2007      	movs	r0, #7
 80014aa:	f7ff ff45 	bl	8001338 <GCControllerEmulation_GetButtonState>
 80014ae:	71e0      	strb	r0, [r4, #7]
	gcButtonInputSnapShot[GC_DPAD_UP] = GCControllerEmulation_GetButtonState(GC_DPAD_UP);
 80014b0:	2008      	movs	r0, #8
 80014b2:	f7ff ff41 	bl	8001338 <GCControllerEmulation_GetButtonState>
 80014b6:	7220      	strb	r0, [r4, #8]
	gcButtonInputSnapShot[GC_DPAD_DOWN] = GCControllerEmulation_GetButtonState(GC_DPAD_DOWN);
 80014b8:	2009      	movs	r0, #9
 80014ba:	f7ff ff3d 	bl	8001338 <GCControllerEmulation_GetButtonState>
 80014be:	7260      	strb	r0, [r4, #9]
	gcButtonInputSnapShot[GC_DPAD_LEFT] = GCControllerEmulation_GetButtonState(GC_DPAD_LEFT);
 80014c0:	200a      	movs	r0, #10
 80014c2:	f7ff ff39 	bl	8001338 <GCControllerEmulation_GetButtonState>
 80014c6:	72a0      	strb	r0, [r4, #10]
	gcButtonInputSnapShot[GC_DPAD_RIGHT] = GCControllerEmulation_GetButtonState(GC_DPAD_RIGHT);
 80014c8:	200b      	movs	r0, #11
 80014ca:	f7ff ff35 	bl	8001338 <GCControllerEmulation_GetButtonState>
 80014ce:	72e0      	strb	r0, [r4, #11]
	gcButtonInputSnapShot[GC_MAIN_STICK_UP] = GCControllerEmulation_GetButtonState(GC_MAIN_STICK_UP);
 80014d0:	200c      	movs	r0, #12
 80014d2:	f7ff ff31 	bl	8001338 <GCControllerEmulation_GetButtonState>
 80014d6:	7320      	strb	r0, [r4, #12]
	gcButtonInputSnapShot[GC_MAIN_STICK_DOWN] = GCControllerEmulation_GetButtonState(GC_MAIN_STICK_DOWN);
 80014d8:	200d      	movs	r0, #13
 80014da:	f7ff ff2d 	bl	8001338 <GCControllerEmulation_GetButtonState>
 80014de:	7360      	strb	r0, [r4, #13]
	gcButtonInputSnapShot[GC_MAIN_STICK_LEFT] = GCControllerEmulation_GetButtonState(GC_MAIN_STICK_LEFT);
 80014e0:	200e      	movs	r0, #14
 80014e2:	f7ff ff29 	bl	8001338 <GCControllerEmulation_GetButtonState>
 80014e6:	73a0      	strb	r0, [r4, #14]
	gcButtonInputSnapShot[GC_MAIN_STICK_RIGHT] = GCControllerEmulation_GetButtonState(GC_MAIN_STICK_RIGHT);
 80014e8:	200f      	movs	r0, #15
 80014ea:	f7ff ff25 	bl	8001338 <GCControllerEmulation_GetButtonState>
 80014ee:	73e0      	strb	r0, [r4, #15]
	gcButtonInputSnapShot[GC_C_STICK_UP] = GCControllerEmulation_GetButtonState(GC_C_STICK_UP);
 80014f0:	2010      	movs	r0, #16
 80014f2:	f7ff ff21 	bl	8001338 <GCControllerEmulation_GetButtonState>
 80014f6:	7420      	strb	r0, [r4, #16]
	gcButtonInputSnapShot[GC_C_STICK_DOWN] = GCControllerEmulation_GetButtonState(GC_C_STICK_DOWN);
 80014f8:	2011      	movs	r0, #17
 80014fa:	f7ff ff1d 	bl	8001338 <GCControllerEmulation_GetButtonState>
 80014fe:	7460      	strb	r0, [r4, #17]
	gcButtonInputSnapShot[GC_C_STICK_LEFT] = GCControllerEmulation_GetButtonState(GC_C_STICK_LEFT);
 8001500:	2012      	movs	r0, #18
 8001502:	f7ff ff19 	bl	8001338 <GCControllerEmulation_GetButtonState>
 8001506:	74a0      	strb	r0, [r4, #18]
	gcButtonInputSnapShot[GC_C_STICK_RIGHT] = GCControllerEmulation_GetButtonState(GC_C_STICK_RIGHT);
 8001508:	2013      	movs	r0, #19
 800150a:	f7ff ff15 	bl	8001338 <GCControllerEmulation_GetButtonState>
 800150e:	74e0      	strb	r0, [r4, #19]
	gcButtonInputSnapShot[GC_MACRO] = GCControllerEmulation_GetButtonState(GC_MACRO);
 8001510:	2014      	movs	r0, #20
 8001512:	f7ff ff11 	bl	8001338 <GCControllerEmulation_GetButtonState>
 8001516:	7520      	strb	r0, [r4, #20]
	gcButtonInputSnapShot[GC_TILT_X] = GCControllerEmulation_GetButtonState(GC_TILT_X);
 8001518:	2015      	movs	r0, #21
 800151a:	f7ff ff0d 	bl	8001338 <GCControllerEmulation_GetButtonState>
 800151e:	7560      	strb	r0, [r4, #21]
	gcButtonInputSnapShot[GC_TILT_Y] = GCControllerEmulation_GetButtonState(GC_TILT_Y);
 8001520:	2016      	movs	r0, #22
 8001522:	f7ff ff09 	bl	8001338 <GCControllerEmulation_GetButtonState>
 8001526:	75a0      	strb	r0, [r4, #22]
}
 8001528:	bd10      	pop	{r4, pc}
 800152a:	bf00      	nop
 800152c:	20000028 	.word	0x20000028

08001530 <GCControllerEmulation_SendControllerState>:
	while(!(USART1->SR & USART_SR_TC)){};
	GCControllerEmulation_SendStopBit();
}

void GCControllerEmulation_SendControllerState(GCCommand_t command)
{
 8001530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001532:	b083      	sub	sp, #12
 8001534:	4604      	mov	r4, r0
	 * causes the UART to delay a little. Most reliable way is to place
	 * code directly into if...then statements for direct data transmission
	 * via DR in UART.
	 */
	/* Get snapshot of all button and switch inputs */
	GCControllerEmulation_GetSwitchSnapshot();
 8001536:	f7ff ff99 	bl	800146c <GCControllerEmulation_GetSwitchSnapshot>
	 * feature buttons" like the tilt buttons, but I have no idea if you want to do
	 * something with the "digital action buttons" like the A, B, X, etc buttons.
	 */
	/* Apply basic SOCD cleaning (clean to neutral) */
	// Clean d-pad x-axis
	if ( (gcButtonInputSnapShot[GC_DPAD_LEFT] == RELEASED) && (gcButtonInputSnapShot[GC_DPAD_RIGHT] == RELEASED) )
 800153a:	4ba0      	ldr	r3, [pc, #640]	; (80017bc <GCControllerEmulation_SendControllerState+0x28c>)
 800153c:	7a9b      	ldrb	r3, [r3, #10]
 800153e:	2b01      	cmp	r3, #1
 8001540:	f000 81d9 	beq.w	80018f6 <GCControllerEmulation_SendControllerState+0x3c6>
	else if ( (gcButtonInputSnapShot[GC_DPAD_LEFT] == RELEASED) && (gcButtonInputSnapShot[GC_DPAD_RIGHT] == PUSHED) )
	{
		gcProcessedButtonStates[GC_DPAD_LEFT] = RELEASED;
		gcProcessedButtonStates[GC_DPAD_RIGHT] = PUSHED;
	}
	else if ( (gcButtonInputSnapShot[GC_DPAD_LEFT] == PUSHED) && (gcButtonInputSnapShot[GC_DPAD_RIGHT] == RELEASED) )
 8001544:	b923      	cbnz	r3, 8001550 <GCControllerEmulation_SendControllerState+0x20>
 8001546:	4b9d      	ldr	r3, [pc, #628]	; (80017bc <GCControllerEmulation_SendControllerState+0x28c>)
 8001548:	7adb      	ldrb	r3, [r3, #11]
 800154a:	2b01      	cmp	r3, #1
 800154c:	f000 81e5 	beq.w	800191a <GCControllerEmulation_SendControllerState+0x3ea>
		gcProcessedButtonStates[GC_DPAD_LEFT] = PUSHED;
		gcProcessedButtonStates[GC_DPAD_RIGHT] = RELEASED;
	}
	else
	{
		gcProcessedButtonStates[GC_DPAD_LEFT] = RELEASED;
 8001550:	4b9b      	ldr	r3, [pc, #620]	; (80017c0 <GCControllerEmulation_SendControllerState+0x290>)
 8001552:	2201      	movs	r2, #1
 8001554:	729a      	strb	r2, [r3, #10]
		gcProcessedButtonStates[GC_DPAD_RIGHT] = RELEASED;
 8001556:	72da      	strb	r2, [r3, #11]
	}

	// Clean d-pad y-axis
	if ( (gcButtonInputSnapShot[GC_DPAD_DOWN] == RELEASED) && (gcButtonInputSnapShot[GC_DPAD_UP] == RELEASED) )
 8001558:	4b98      	ldr	r3, [pc, #608]	; (80017bc <GCControllerEmulation_SendControllerState+0x28c>)
 800155a:	7a5b      	ldrb	r3, [r3, #9]
 800155c:	2b01      	cmp	r3, #1
 800155e:	f000 81e2 	beq.w	8001926 <GCControllerEmulation_SendControllerState+0x3f6>
	else if ( (gcButtonInputSnapShot[GC_DPAD_DOWN] == RELEASED) && (gcButtonInputSnapShot[GC_DPAD_UP] == PUSHED) )
	{
		gcProcessedButtonStates[GC_DPAD_DOWN] = RELEASED;
		gcProcessedButtonStates[GC_DPAD_UP] = PUSHED;
	}
	else if ( (gcButtonInputSnapShot[GC_DPAD_DOWN] == PUSHED) && (gcButtonInputSnapShot[GC_DPAD_UP] == RELEASED) )
 8001562:	b923      	cbnz	r3, 800156e <GCControllerEmulation_SendControllerState+0x3e>
 8001564:	4b95      	ldr	r3, [pc, #596]	; (80017bc <GCControllerEmulation_SendControllerState+0x28c>)
 8001566:	7a1b      	ldrb	r3, [r3, #8]
 8001568:	2b01      	cmp	r3, #1
 800156a:	f000 81ee 	beq.w	800194a <GCControllerEmulation_SendControllerState+0x41a>
		gcProcessedButtonStates[GC_DPAD_DOWN] = PUSHED;
		gcProcessedButtonStates[GC_DPAD_UP] = RELEASED;
	}
	else
	{
		gcProcessedButtonStates[GC_DPAD_DOWN] = RELEASED;
 800156e:	4b94      	ldr	r3, [pc, #592]	; (80017c0 <GCControllerEmulation_SendControllerState+0x290>)
 8001570:	2201      	movs	r2, #1
 8001572:	725a      	strb	r2, [r3, #9]
		gcProcessedButtonStates[GC_DPAD_UP] = RELEASED;
 8001574:	721a      	strb	r2, [r3, #8]
	}

	// Clean main stick x-axis
	if ( (gcButtonInputSnapShot[GC_MAIN_STICK_LEFT] == RELEASED) && (gcButtonInputSnapShot[GC_MAIN_STICK_RIGHT] == RELEASED) )
 8001576:	4b91      	ldr	r3, [pc, #580]	; (80017bc <GCControllerEmulation_SendControllerState+0x28c>)
 8001578:	7b9b      	ldrb	r3, [r3, #14]
 800157a:	2b01      	cmp	r3, #1
 800157c:	f000 81eb 	beq.w	8001956 <GCControllerEmulation_SendControllerState+0x426>
	else if ( (gcButtonInputSnapShot[GC_MAIN_STICK_LEFT] == RELEASED) && (gcButtonInputSnapShot[GC_MAIN_STICK_RIGHT] == PUSHED) )
	{
		gcProcessedButtonStates[GC_MAIN_STICK_LEFT] = RELEASED;
		gcProcessedButtonStates[GC_MAIN_STICK_RIGHT] = PUSHED;
	}
	else if ( (gcButtonInputSnapShot[GC_MAIN_STICK_LEFT] == PUSHED) && (gcButtonInputSnapShot[GC_MAIN_STICK_RIGHT] == RELEASED) )
 8001580:	b923      	cbnz	r3, 800158c <GCControllerEmulation_SendControllerState+0x5c>
 8001582:	4b8e      	ldr	r3, [pc, #568]	; (80017bc <GCControllerEmulation_SendControllerState+0x28c>)
 8001584:	7bdb      	ldrb	r3, [r3, #15]
 8001586:	2b01      	cmp	r3, #1
 8001588:	f000 81f7 	beq.w	800197a <GCControllerEmulation_SendControllerState+0x44a>
		gcProcessedButtonStates[GC_MAIN_STICK_LEFT] = PUSHED;
		gcProcessedButtonStates[GC_MAIN_STICK_RIGHT] = RELEASED;
	}
	else
	{
		gcProcessedButtonStates[GC_MAIN_STICK_LEFT] = RELEASED;
 800158c:	4b8c      	ldr	r3, [pc, #560]	; (80017c0 <GCControllerEmulation_SendControllerState+0x290>)
 800158e:	2201      	movs	r2, #1
 8001590:	739a      	strb	r2, [r3, #14]
		gcProcessedButtonStates[GC_MAIN_STICK_RIGHT] = RELEASED;
 8001592:	73da      	strb	r2, [r3, #15]
	}

	// Clean main stick y-axis
	if ( (gcButtonInputSnapShot[GC_MAIN_STICK_DOWN] == RELEASED) && (gcButtonInputSnapShot[GC_MAIN_STICK_UP] == RELEASED) )
 8001594:	4b89      	ldr	r3, [pc, #548]	; (80017bc <GCControllerEmulation_SendControllerState+0x28c>)
 8001596:	7b5b      	ldrb	r3, [r3, #13]
 8001598:	2b01      	cmp	r3, #1
 800159a:	f000 81f4 	beq.w	8001986 <GCControllerEmulation_SendControllerState+0x456>
	else if ( (gcButtonInputSnapShot[GC_MAIN_STICK_DOWN] == RELEASED) && (gcButtonInputSnapShot[GC_MAIN_STICK_UP] == PUSHED) )
	{
		gcProcessedButtonStates[GC_MAIN_STICK_DOWN] = RELEASED;
		gcProcessedButtonStates[GC_MAIN_STICK_UP] = PUSHED;
	}
	else if ( (gcButtonInputSnapShot[GC_MAIN_STICK_DOWN] == PUSHED) && (gcButtonInputSnapShot[GC_MAIN_STICK_UP] == RELEASED) )
 800159e:	b923      	cbnz	r3, 80015aa <GCControllerEmulation_SendControllerState+0x7a>
 80015a0:	4b86      	ldr	r3, [pc, #536]	; (80017bc <GCControllerEmulation_SendControllerState+0x28c>)
 80015a2:	7b1b      	ldrb	r3, [r3, #12]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	f000 8200 	beq.w	80019aa <GCControllerEmulation_SendControllerState+0x47a>
		gcProcessedButtonStates[GC_MAIN_STICK_DOWN] = PUSHED;
		gcProcessedButtonStates[GC_MAIN_STICK_UP] = RELEASED;
	}
	else
	{
		gcProcessedButtonStates[GC_MAIN_STICK_DOWN] = RELEASED;
 80015aa:	4b85      	ldr	r3, [pc, #532]	; (80017c0 <GCControllerEmulation_SendControllerState+0x290>)
 80015ac:	2201      	movs	r2, #1
 80015ae:	735a      	strb	r2, [r3, #13]
		gcProcessedButtonStates[GC_MAIN_STICK_UP] = RELEASED;
 80015b0:	731a      	strb	r2, [r3, #12]
	}

	// Clean c stick x-axis
	if ( (gcButtonInputSnapShot[GC_C_STICK_LEFT] == RELEASED) && (gcButtonInputSnapShot[GC_C_STICK_RIGHT] == RELEASED) )
 80015b2:	4b82      	ldr	r3, [pc, #520]	; (80017bc <GCControllerEmulation_SendControllerState+0x28c>)
 80015b4:	7c9b      	ldrb	r3, [r3, #18]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	f000 81fd 	beq.w	80019b6 <GCControllerEmulation_SendControllerState+0x486>
	else if ( (gcButtonInputSnapShot[GC_C_STICK_LEFT] == RELEASED) && (gcButtonInputSnapShot[GC_C_STICK_RIGHT] == PUSHED) )
	{
		gcProcessedButtonStates[GC_C_STICK_LEFT] = RELEASED;
		gcProcessedButtonStates[GC_C_STICK_RIGHT] = PUSHED;
	}
	else if ( (gcButtonInputSnapShot[GC_C_STICK_LEFT] == PUSHED) && (gcButtonInputSnapShot[GC_C_STICK_RIGHT] == RELEASED) )
 80015bc:	b923      	cbnz	r3, 80015c8 <GCControllerEmulation_SendControllerState+0x98>
 80015be:	4b7f      	ldr	r3, [pc, #508]	; (80017bc <GCControllerEmulation_SendControllerState+0x28c>)
 80015c0:	7cdb      	ldrb	r3, [r3, #19]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	f000 8209 	beq.w	80019da <GCControllerEmulation_SendControllerState+0x4aa>
		gcProcessedButtonStates[GC_C_STICK_LEFT] = PUSHED;
		gcProcessedButtonStates[GC_C_STICK_RIGHT] = RELEASED;
	}
	else
	{
		gcProcessedButtonStates[GC_C_STICK_LEFT] = RELEASED;
 80015c8:	4b7d      	ldr	r3, [pc, #500]	; (80017c0 <GCControllerEmulation_SendControllerState+0x290>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	749a      	strb	r2, [r3, #18]
		gcProcessedButtonStates[GC_C_STICK_RIGHT] = RELEASED;
 80015ce:	74da      	strb	r2, [r3, #19]
	}

	// Clean c stick y-axis
	if ( (gcButtonInputSnapShot[GC_C_STICK_DOWN] == RELEASED) && (gcButtonInputSnapShot[GC_C_STICK_UP] == RELEASED) )
 80015d0:	4b7a      	ldr	r3, [pc, #488]	; (80017bc <GCControllerEmulation_SendControllerState+0x28c>)
 80015d2:	7c5b      	ldrb	r3, [r3, #17]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	f000 8206 	beq.w	80019e6 <GCControllerEmulation_SendControllerState+0x4b6>
	else if ( (gcButtonInputSnapShot[GC_C_STICK_DOWN] == RELEASED) && (gcButtonInputSnapShot[GC_C_STICK_UP] == PUSHED) )
	{
		gcProcessedButtonStates[GC_C_STICK_DOWN] = RELEASED;
		gcProcessedButtonStates[GC_C_STICK_UP] = PUSHED;
	}
	else if ( (gcButtonInputSnapShot[GC_C_STICK_DOWN] == PUSHED) && (gcButtonInputSnapShot[GC_C_STICK_UP] == RELEASED) )
 80015da:	b923      	cbnz	r3, 80015e6 <GCControllerEmulation_SendControllerState+0xb6>
 80015dc:	4b77      	ldr	r3, [pc, #476]	; (80017bc <GCControllerEmulation_SendControllerState+0x28c>)
 80015de:	7c1b      	ldrb	r3, [r3, #16]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	f000 8212 	beq.w	8001a0a <GCControllerEmulation_SendControllerState+0x4da>
		gcProcessedButtonStates[GC_C_STICK_DOWN] = PUSHED;
		gcProcessedButtonStates[GC_C_STICK_UP] = RELEASED;
	}
	else
	{
		gcProcessedButtonStates[GC_C_STICK_DOWN] = RELEASED;
 80015e6:	4b76      	ldr	r3, [pc, #472]	; (80017c0 <GCControllerEmulation_SendControllerState+0x290>)
 80015e8:	2201      	movs	r2, #1
 80015ea:	745a      	strb	r2, [r3, #17]
		gcProcessedButtonStates[GC_C_STICK_UP] = RELEASED;
 80015ec:	741a      	strb	r2, [r3, #16]
	/* End of SOCD cleaning */

	/* Process digital action buttons. For the meantime, they do not need
	 * any sort of special processing so just copy them over.
	 */
	gcProcessedButtonStates[GC_A] = gcButtonInputSnapShot[GC_A];
 80015ee:	4a73      	ldr	r2, [pc, #460]	; (80017bc <GCControllerEmulation_SendControllerState+0x28c>)
 80015f0:	7815      	ldrb	r5, [r2, #0]
 80015f2:	4b73      	ldr	r3, [pc, #460]	; (80017c0 <GCControllerEmulation_SendControllerState+0x290>)
 80015f4:	701d      	strb	r5, [r3, #0]
	gcProcessedButtonStates[GC_B] = gcButtonInputSnapShot[GC_B];
 80015f6:	7851      	ldrb	r1, [r2, #1]
 80015f8:	7059      	strb	r1, [r3, #1]
	gcProcessedButtonStates[GC_X] = gcButtonInputSnapShot[GC_X];
 80015fa:	7896      	ldrb	r6, [r2, #2]
 80015fc:	709e      	strb	r6, [r3, #2]
	gcProcessedButtonStates[GC_Y] = gcButtonInputSnapShot[GC_Y];
 80015fe:	78d0      	ldrb	r0, [r2, #3]
 8001600:	70d8      	strb	r0, [r3, #3]
	gcProcessedButtonStates[GC_L] = gcButtonInputSnapShot[GC_L];
 8001602:	7917      	ldrb	r7, [r2, #4]
 8001604:	711f      	strb	r7, [r3, #4]
	gcProcessedButtonStates[GC_R] = gcButtonInputSnapShot[GC_R];
 8001606:	7957      	ldrb	r7, [r2, #5]
 8001608:	715f      	strb	r7, [r3, #5]
	gcProcessedButtonStates[GC_Z] = gcButtonInputSnapShot[GC_Z];
 800160a:	7997      	ldrb	r7, [r2, #6]
 800160c:	719f      	strb	r7, [r3, #6]
	gcProcessedButtonStates[GC_START] = gcButtonInputSnapShot[GC_START];
 800160e:	79d7      	ldrb	r7, [r2, #7]
 8001610:	71df      	strb	r7, [r3, #7]
	/* End processing of digital action buttons */

	/* Process digital feature buttons. For the meantime, they do not need
	 * any sort of special processing so just copy them over.
	 */
	gcProcessedButtonStates[GC_MACRO] = gcButtonInputSnapShot[GC_MACRO];
 8001612:	7d17      	ldrb	r7, [r2, #20]
 8001614:	751f      	strb	r7, [r3, #20]
	gcProcessedButtonStates[GC_TILT_X] = gcButtonInputSnapShot[GC_TILT_X];
 8001616:	7d57      	ldrb	r7, [r2, #21]
 8001618:	755f      	strb	r7, [r3, #21]
	gcProcessedButtonStates[GC_TILT_Y] = gcButtonInputSnapShot[GC_TILT_Y];
 800161a:	7d92      	ldrb	r2, [r2, #22]
 800161c:	759a      	strb	r2, [r3, #22]
	while(!(USART1->SR & USART_SR_TXE)){};
 800161e:	4a69      	ldr	r2, [pc, #420]	; (80017c4 <GCControllerEmulation_SendControllerState+0x294>)
 8001620:	6813      	ldr	r3, [r2, #0]
 8001622:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001626:	d0fb      	beq.n	8001620 <GCControllerEmulation_SendControllerState+0xf0>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001628:	4b66      	ldr	r3, [pc, #408]	; (80017c4 <GCControllerEmulation_SendControllerState+0x294>)
 800162a:	2208      	movs	r2, #8
 800162c:	605a      	str	r2, [r3, #4]
	rightButtonState = gcProcessedButtonStates[GC_START];
 800162e:	4b64      	ldr	r3, [pc, #400]	; (80017c0 <GCControllerEmulation_SendControllerState+0x290>)
 8001630:	79df      	ldrb	r7, [r3, #7]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001632:	4a64      	ldr	r2, [pc, #400]	; (80017c4 <GCControllerEmulation_SendControllerState+0x294>)
 8001634:	6813      	ldr	r3, [r2, #0]
 8001636:	f013 0f80 	tst.w	r3, #128	; 0x80
 800163a:	d0fb      	beq.n	8001634 <GCControllerEmulation_SendControllerState+0x104>
	if(rightButtonState == RELEASED)
 800163c:	2f01      	cmp	r7, #1
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 800163e:	4b61      	ldr	r3, [pc, #388]	; (80017c4 <GCControllerEmulation_SendControllerState+0x294>)
 8001640:	bf0c      	ite	eq
 8001642:	2208      	moveq	r2, #8
		USART1->DR = (GC_BITS_01_CASE1 & 0xFF);
 8001644:	22e8      	movne	r2, #232	; 0xe8
 8001646:	605a      	str	r2, [r3, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001648:	4a5e      	ldr	r2, [pc, #376]	; (80017c4 <GCControllerEmulation_SendControllerState+0x294>)
 800164a:	6813      	ldr	r3, [r2, #0]
 800164c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001650:	d0fb      	beq.n	800164a <GCControllerEmulation_SendControllerState+0x11a>
	if( (leftButtonState == RELEASED) && (rightButtonState == RELEASED) )
 8001652:	2801      	cmp	r0, #1
 8001654:	f000 81df 	beq.w	8001a16 <GCControllerEmulation_SendControllerState+0x4e6>
	else if( (leftButtonState == PUSHED) && (rightButtonState == RELEASED) )
 8001658:	b910      	cbnz	r0, 8001660 <GCControllerEmulation_SendControllerState+0x130>
 800165a:	2e01      	cmp	r6, #1
 800165c:	f000 81e8 	beq.w	8001a30 <GCControllerEmulation_SendControllerState+0x500>
		USART1->DR = (GC_BITS_11_CASE1 & 0xFF);
 8001660:	4b58      	ldr	r3, [pc, #352]	; (80017c4 <GCControllerEmulation_SendControllerState+0x294>)
 8001662:	22ef      	movs	r2, #239	; 0xef
 8001664:	605a      	str	r2, [r3, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001666:	4a57      	ldr	r2, [pc, #348]	; (80017c4 <GCControllerEmulation_SendControllerState+0x294>)
 8001668:	6813      	ldr	r3, [r2, #0]
 800166a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800166e:	d0fb      	beq.n	8001668 <GCControllerEmulation_SendControllerState+0x138>
	if( (leftButtonState == RELEASED) && (rightButtonState == RELEASED) )
 8001670:	2901      	cmp	r1, #1
 8001672:	f000 81e1 	beq.w	8001a38 <GCControllerEmulation_SendControllerState+0x508>
	else if( (leftButtonState == PUSHED) && (rightButtonState == RELEASED) )
 8001676:	b911      	cbnz	r1, 800167e <GCControllerEmulation_SendControllerState+0x14e>
 8001678:	2d01      	cmp	r5, #1
 800167a:	f000 81ea 	beq.w	8001a52 <GCControllerEmulation_SendControllerState+0x522>
		USART1->DR = (GC_BITS_11_CASE1 & 0xFF);
 800167e:	4b51      	ldr	r3, [pc, #324]	; (80017c4 <GCControllerEmulation_SendControllerState+0x294>)
 8001680:	22ef      	movs	r2, #239	; 0xef
 8001682:	605a      	str	r2, [r3, #4]
	rightButtonState = gcProcessedButtonStates[GC_L];
 8001684:	4b4e      	ldr	r3, [pc, #312]	; (80017c0 <GCControllerEmulation_SendControllerState+0x290>)
 8001686:	7919      	ldrb	r1, [r3, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001688:	4a4e      	ldr	r2, [pc, #312]	; (80017c4 <GCControllerEmulation_SendControllerState+0x294>)
 800168a:	6813      	ldr	r3, [r2, #0]
 800168c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001690:	d0fb      	beq.n	800168a <GCControllerEmulation_SendControllerState+0x15a>
	if(rightButtonState == RELEASED)
 8001692:	2901      	cmp	r1, #1
		USART1->DR = (GC_BITS_10_CASE1 & 0xFF);
 8001694:	4b4b      	ldr	r3, [pc, #300]	; (80017c4 <GCControllerEmulation_SendControllerState+0x294>)
 8001696:	bf0c      	ite	eq
 8001698:	220f      	moveq	r2, #15
		USART1->DR = (GC_BITS_11_CASE1 & 0xFF);
 800169a:	22ef      	movne	r2, #239	; 0xef
 800169c:	605a      	str	r2, [r3, #4]
	leftButtonState = gcProcessedButtonStates[GC_R];
 800169e:	4b48      	ldr	r3, [pc, #288]	; (80017c0 <GCControllerEmulation_SendControllerState+0x290>)
 80016a0:	7959      	ldrb	r1, [r3, #5]
	rightButtonState = gcProcessedButtonStates[GC_Z];
 80016a2:	7998      	ldrb	r0, [r3, #6]
	while(!(USART1->SR & USART_SR_TXE)){};
 80016a4:	4a47      	ldr	r2, [pc, #284]	; (80017c4 <GCControllerEmulation_SendControllerState+0x294>)
 80016a6:	6813      	ldr	r3, [r2, #0]
 80016a8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80016ac:	d0fb      	beq.n	80016a6 <GCControllerEmulation_SendControllerState+0x176>
	if( (leftButtonState == RELEASED) && (rightButtonState == RELEASED) )
 80016ae:	2901      	cmp	r1, #1
 80016b0:	f000 81d3 	beq.w	8001a5a <GCControllerEmulation_SendControllerState+0x52a>
	else if( (leftButtonState == PUSHED) && (rightButtonState == RELEASED) )
 80016b4:	b911      	cbnz	r1, 80016bc <GCControllerEmulation_SendControllerState+0x18c>
 80016b6:	2801      	cmp	r0, #1
 80016b8:	f000 81e4 	beq.w	8001a84 <GCControllerEmulation_SendControllerState+0x554>
		USART1->DR = (GC_BITS_11_CASE1 & 0xFF);
 80016bc:	4b41      	ldr	r3, [pc, #260]	; (80017c4 <GCControllerEmulation_SendControllerState+0x294>)
 80016be:	22ef      	movs	r2, #239	; 0xef
 80016c0:	605a      	str	r2, [r3, #4]
	leftButtonState = gcProcessedButtonStates[GC_DPAD_UP];
 80016c2:	4b3f      	ldr	r3, [pc, #252]	; (80017c0 <GCControllerEmulation_SendControllerState+0x290>)
 80016c4:	7a19      	ldrb	r1, [r3, #8]
	rightButtonState = gcProcessedButtonStates[GC_DPAD_DOWN];;
 80016c6:	7a58      	ldrb	r0, [r3, #9]
	while(!(USART1->SR & USART_SR_TXE)){};
 80016c8:	4a3e      	ldr	r2, [pc, #248]	; (80017c4 <GCControllerEmulation_SendControllerState+0x294>)
 80016ca:	6813      	ldr	r3, [r2, #0]
 80016cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80016d0:	d0fb      	beq.n	80016ca <GCControllerEmulation_SendControllerState+0x19a>
	if( (leftButtonState == RELEASED) && (rightButtonState == RELEASED) )
 80016d2:	2901      	cmp	r1, #1
 80016d4:	f000 81da 	beq.w	8001a8c <GCControllerEmulation_SendControllerState+0x55c>
	else if( (leftButtonState == PUSHED) && (rightButtonState == RELEASED) )
 80016d8:	b911      	cbnz	r1, 80016e0 <GCControllerEmulation_SendControllerState+0x1b0>
 80016da:	2801      	cmp	r0, #1
 80016dc:	f000 81e3 	beq.w	8001aa6 <GCControllerEmulation_SendControllerState+0x576>
		USART1->DR = (GC_BITS_11_CASE1 & 0xFF);
 80016e0:	4b38      	ldr	r3, [pc, #224]	; (80017c4 <GCControllerEmulation_SendControllerState+0x294>)
 80016e2:	22ef      	movs	r2, #239	; 0xef
 80016e4:	605a      	str	r2, [r3, #4]
	leftButtonState = gcProcessedButtonStates[GC_DPAD_RIGHT];
 80016e6:	4b36      	ldr	r3, [pc, #216]	; (80017c0 <GCControllerEmulation_SendControllerState+0x290>)
 80016e8:	7ad9      	ldrb	r1, [r3, #11]
	rightButtonState = gcProcessedButtonStates[GC_DPAD_LEFT];
 80016ea:	7a98      	ldrb	r0, [r3, #10]
	while(!(USART1->SR & USART_SR_TXE)){};
 80016ec:	4a35      	ldr	r2, [pc, #212]	; (80017c4 <GCControllerEmulation_SendControllerState+0x294>)
 80016ee:	6813      	ldr	r3, [r2, #0]
 80016f0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80016f4:	d0fb      	beq.n	80016ee <GCControllerEmulation_SendControllerState+0x1be>
	if( (leftButtonState == RELEASED) && (rightButtonState == RELEASED) )
 80016f6:	2901      	cmp	r1, #1
 80016f8:	f000 81d9 	beq.w	8001aae <GCControllerEmulation_SendControllerState+0x57e>
	else if( (leftButtonState == PUSHED) && (rightButtonState == RELEASED) )
 80016fc:	b911      	cbnz	r1, 8001704 <GCControllerEmulation_SendControllerState+0x1d4>
 80016fe:	2801      	cmp	r0, #1
 8001700:	f000 81e2 	beq.w	8001ac8 <GCControllerEmulation_SendControllerState+0x598>
		USART1->DR = (GC_BITS_11_CASE1 & 0xFF);
 8001704:	4b2f      	ldr	r3, [pc, #188]	; (80017c4 <GCControllerEmulation_SendControllerState+0x294>)
 8001706:	22ef      	movs	r2, #239	; 0xef
 8001708:	605a      	str	r2, [r3, #4]
	if(gcProcessedButtonStates[GC_MAIN_STICK_LEFT] == PUSHED)
 800170a:	4b2d      	ldr	r3, [pc, #180]	; (80017c0 <GCControllerEmulation_SendControllerState+0x290>)
 800170c:	7b9b      	ldrb	r3, [r3, #14]
 800170e:	2b00      	cmp	r3, #0
 8001710:	f040 81de 	bne.w	8001ad0 <GCControllerEmulation_SendControllerState+0x5a0>
		while(!(USART1->SR & USART_SR_TXE)){};
 8001714:	4a2b      	ldr	r2, [pc, #172]	; (80017c4 <GCControllerEmulation_SendControllerState+0x294>)
 8001716:	6813      	ldr	r3, [r2, #0]
 8001718:	f013 0f80 	tst.w	r3, #128	; 0x80
 800171c:	d0fb      	beq.n	8001716 <GCControllerEmulation_SendControllerState+0x1e6>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 800171e:	4b29      	ldr	r3, [pc, #164]	; (80017c4 <GCControllerEmulation_SendControllerState+0x294>)
 8001720:	2208      	movs	r2, #8
 8001722:	605a      	str	r2, [r3, #4]
		while(!(USART1->SR & USART_SR_TXE)){};
 8001724:	461a      	mov	r2, r3
 8001726:	6813      	ldr	r3, [r2, #0]
 8001728:	f013 0f80 	tst.w	r3, #128	; 0x80
 800172c:	d0fb      	beq.n	8001726 <GCControllerEmulation_SendControllerState+0x1f6>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 800172e:	4b25      	ldr	r3, [pc, #148]	; (80017c4 <GCControllerEmulation_SendControllerState+0x294>)
 8001730:	2208      	movs	r2, #8
 8001732:	605a      	str	r2, [r3, #4]
		while(!(USART1->SR & USART_SR_TXE)){};
 8001734:	461a      	mov	r2, r3
 8001736:	6813      	ldr	r3, [r2, #0]
 8001738:	f013 0f80 	tst.w	r3, #128	; 0x80
 800173c:	d0fb      	beq.n	8001736 <GCControllerEmulation_SendControllerState+0x206>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 800173e:	4b21      	ldr	r3, [pc, #132]	; (80017c4 <GCControllerEmulation_SendControllerState+0x294>)
 8001740:	2208      	movs	r2, #8
 8001742:	605a      	str	r2, [r3, #4]
		while(!(USART1->SR & USART_SR_TXE)){};
 8001744:	461a      	mov	r2, r3
 8001746:	6813      	ldr	r3, [r2, #0]
 8001748:	f013 0f80 	tst.w	r3, #128	; 0x80
 800174c:	d0fb      	beq.n	8001746 <GCControllerEmulation_SendControllerState+0x216>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 800174e:	4b1d      	ldr	r3, [pc, #116]	; (80017c4 <GCControllerEmulation_SendControllerState+0x294>)
 8001750:	2208      	movs	r2, #8
 8001752:	605a      	str	r2, [r3, #4]
	if(gcProcessedButtonStates[GC_MAIN_STICK_DOWN] == PUSHED)
 8001754:	4b1a      	ldr	r3, [pc, #104]	; (80017c0 <GCControllerEmulation_SendControllerState+0x290>)
 8001756:	7b5b      	ldrb	r3, [r3, #13]
 8001758:	2b00      	cmp	r3, #0
 800175a:	f040 81fe 	bne.w	8001b5a <GCControllerEmulation_SendControllerState+0x62a>
		while(!(USART1->SR & USART_SR_TXE)){};
 800175e:	4a19      	ldr	r2, [pc, #100]	; (80017c4 <GCControllerEmulation_SendControllerState+0x294>)
 8001760:	6813      	ldr	r3, [r2, #0]
 8001762:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001766:	d0fb      	beq.n	8001760 <GCControllerEmulation_SendControllerState+0x230>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001768:	4b16      	ldr	r3, [pc, #88]	; (80017c4 <GCControllerEmulation_SendControllerState+0x294>)
 800176a:	2208      	movs	r2, #8
 800176c:	605a      	str	r2, [r3, #4]
		while(!(USART1->SR & USART_SR_TXE)){};
 800176e:	461a      	mov	r2, r3
 8001770:	6813      	ldr	r3, [r2, #0]
 8001772:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001776:	d0fb      	beq.n	8001770 <GCControllerEmulation_SendControllerState+0x240>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001778:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <GCControllerEmulation_SendControllerState+0x294>)
 800177a:	2208      	movs	r2, #8
 800177c:	605a      	str	r2, [r3, #4]
		while(!(USART1->SR & USART_SR_TXE)){};
 800177e:	461a      	mov	r2, r3
 8001780:	6813      	ldr	r3, [r2, #0]
 8001782:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001786:	d0fb      	beq.n	8001780 <GCControllerEmulation_SendControllerState+0x250>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001788:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <GCControllerEmulation_SendControllerState+0x294>)
 800178a:	2208      	movs	r2, #8
 800178c:	605a      	str	r2, [r3, #4]
		while(!(USART1->SR & USART_SR_TXE)){};
 800178e:	461a      	mov	r2, r3
 8001790:	6813      	ldr	r3, [r2, #0]
 8001792:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001796:	d0fb      	beq.n	8001790 <GCControllerEmulation_SendControllerState+0x260>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001798:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <GCControllerEmulation_SendControllerState+0x294>)
 800179a:	2208      	movs	r2, #8
 800179c:	605a      	str	r2, [r3, #4]
	if(gcProcessedButtonStates[GC_C_STICK_LEFT] == PUSHED)
 800179e:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <GCControllerEmulation_SendControllerState+0x290>)
 80017a0:	7c9b      	ldrb	r3, [r3, #18]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f040 821e 	bne.w	8001be4 <GCControllerEmulation_SendControllerState+0x6b4>
		while(!(USART1->SR & USART_SR_TXE)){};
 80017a8:	4a06      	ldr	r2, [pc, #24]	; (80017c4 <GCControllerEmulation_SendControllerState+0x294>)
 80017aa:	6813      	ldr	r3, [r2, #0]
 80017ac:	f013 0f80 	tst.w	r3, #128	; 0x80
 80017b0:	d0fb      	beq.n	80017aa <GCControllerEmulation_SendControllerState+0x27a>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 80017b2:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <GCControllerEmulation_SendControllerState+0x294>)
 80017b4:	2208      	movs	r2, #8
 80017b6:	605a      	str	r2, [r3, #4]
		while(!(USART1->SR & USART_SR_TXE)){};
 80017b8:	461a      	mov	r2, r3
 80017ba:	e005      	b.n	80017c8 <GCControllerEmulation_SendControllerState+0x298>
 80017bc:	20000028 	.word	0x20000028
 80017c0:	20000040 	.word	0x20000040
 80017c4:	40011000 	.word	0x40011000
 80017c8:	6813      	ldr	r3, [r2, #0]
 80017ca:	f013 0f80 	tst.w	r3, #128	; 0x80
 80017ce:	d0fb      	beq.n	80017c8 <GCControllerEmulation_SendControllerState+0x298>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 80017d0:	4ba8      	ldr	r3, [pc, #672]	; (8001a74 <GCControllerEmulation_SendControllerState+0x544>)
 80017d2:	2208      	movs	r2, #8
 80017d4:	605a      	str	r2, [r3, #4]
		while(!(USART1->SR & USART_SR_TXE)){};
 80017d6:	461a      	mov	r2, r3
 80017d8:	6813      	ldr	r3, [r2, #0]
 80017da:	f013 0f80 	tst.w	r3, #128	; 0x80
 80017de:	d0fb      	beq.n	80017d8 <GCControllerEmulation_SendControllerState+0x2a8>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 80017e0:	4ba4      	ldr	r3, [pc, #656]	; (8001a74 <GCControllerEmulation_SendControllerState+0x544>)
 80017e2:	2208      	movs	r2, #8
 80017e4:	605a      	str	r2, [r3, #4]
		while(!(USART1->SR & USART_SR_TXE)){};
 80017e6:	461a      	mov	r2, r3
 80017e8:	6813      	ldr	r3, [r2, #0]
 80017ea:	f013 0f80 	tst.w	r3, #128	; 0x80
 80017ee:	d0fb      	beq.n	80017e8 <GCControllerEmulation_SendControllerState+0x2b8>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 80017f0:	4ba0      	ldr	r3, [pc, #640]	; (8001a74 <GCControllerEmulation_SendControllerState+0x544>)
 80017f2:	2208      	movs	r2, #8
 80017f4:	605a      	str	r2, [r3, #4]
	if(gcProcessedButtonStates[GC_C_STICK_DOWN] == PUSHED)
 80017f6:	4ba0      	ldr	r3, [pc, #640]	; (8001a78 <GCControllerEmulation_SendControllerState+0x548>)
 80017f8:	7c5b      	ldrb	r3, [r3, #17]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f040 8237 	bne.w	8001c6e <GCControllerEmulation_SendControllerState+0x73e>
		while(!(USART1->SR & USART_SR_TXE)){};
 8001800:	4a9c      	ldr	r2, [pc, #624]	; (8001a74 <GCControllerEmulation_SendControllerState+0x544>)
 8001802:	6813      	ldr	r3, [r2, #0]
 8001804:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001808:	d0fb      	beq.n	8001802 <GCControllerEmulation_SendControllerState+0x2d2>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 800180a:	4b9a      	ldr	r3, [pc, #616]	; (8001a74 <GCControllerEmulation_SendControllerState+0x544>)
 800180c:	2208      	movs	r2, #8
 800180e:	605a      	str	r2, [r3, #4]
		while(!(USART1->SR & USART_SR_TXE)){};
 8001810:	461a      	mov	r2, r3
 8001812:	6813      	ldr	r3, [r2, #0]
 8001814:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001818:	d0fb      	beq.n	8001812 <GCControllerEmulation_SendControllerState+0x2e2>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 800181a:	4b96      	ldr	r3, [pc, #600]	; (8001a74 <GCControllerEmulation_SendControllerState+0x544>)
 800181c:	2208      	movs	r2, #8
 800181e:	605a      	str	r2, [r3, #4]
		while(!(USART1->SR & USART_SR_TXE)){};
 8001820:	461a      	mov	r2, r3
 8001822:	6813      	ldr	r3, [r2, #0]
 8001824:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001828:	d0fb      	beq.n	8001822 <GCControllerEmulation_SendControllerState+0x2f2>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 800182a:	4b92      	ldr	r3, [pc, #584]	; (8001a74 <GCControllerEmulation_SendControllerState+0x544>)
 800182c:	2208      	movs	r2, #8
 800182e:	605a      	str	r2, [r3, #4]
		while(!(USART1->SR & USART_SR_TXE)){};
 8001830:	461a      	mov	r2, r3
 8001832:	6813      	ldr	r3, [r2, #0]
 8001834:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001838:	d0fb      	beq.n	8001832 <GCControllerEmulation_SendControllerState+0x302>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 800183a:	4b8e      	ldr	r3, [pc, #568]	; (8001a74 <GCControllerEmulation_SendControllerState+0x544>)
 800183c:	2208      	movs	r2, #8
 800183e:	605a      	str	r2, [r3, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001840:	4a8c      	ldr	r2, [pc, #560]	; (8001a74 <GCControllerEmulation_SendControllerState+0x544>)
 8001842:	6813      	ldr	r3, [r2, #0]
 8001844:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001848:	d0fb      	beq.n	8001842 <GCControllerEmulation_SendControllerState+0x312>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 800184a:	4b8a      	ldr	r3, [pc, #552]	; (8001a74 <GCControllerEmulation_SendControllerState+0x544>)
 800184c:	2208      	movs	r2, #8
 800184e:	605a      	str	r2, [r3, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001850:	461a      	mov	r2, r3
 8001852:	6813      	ldr	r3, [r2, #0]
 8001854:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001858:	d0fb      	beq.n	8001852 <GCControllerEmulation_SendControllerState+0x322>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 800185a:	4b86      	ldr	r3, [pc, #536]	; (8001a74 <GCControllerEmulation_SendControllerState+0x544>)
 800185c:	2208      	movs	r2, #8
 800185e:	605a      	str	r2, [r3, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001860:	461a      	mov	r2, r3
 8001862:	6813      	ldr	r3, [r2, #0]
 8001864:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001868:	d0fb      	beq.n	8001862 <GCControllerEmulation_SendControllerState+0x332>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 800186a:	4b82      	ldr	r3, [pc, #520]	; (8001a74 <GCControllerEmulation_SendControllerState+0x544>)
 800186c:	2208      	movs	r2, #8
 800186e:	605a      	str	r2, [r3, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001870:	461a      	mov	r2, r3
 8001872:	6813      	ldr	r3, [r2, #0]
 8001874:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001878:	d0fb      	beq.n	8001872 <GCControllerEmulation_SendControllerState+0x342>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 800187a:	4b7e      	ldr	r3, [pc, #504]	; (8001a74 <GCControllerEmulation_SendControllerState+0x544>)
 800187c:	2208      	movs	r2, #8
 800187e:	605a      	str	r2, [r3, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001880:	461a      	mov	r2, r3
 8001882:	6813      	ldr	r3, [r2, #0]
 8001884:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001888:	d0fb      	beq.n	8001882 <GCControllerEmulation_SendControllerState+0x352>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 800188a:	4b7a      	ldr	r3, [pc, #488]	; (8001a74 <GCControllerEmulation_SendControllerState+0x544>)
 800188c:	2208      	movs	r2, #8
 800188e:	605a      	str	r2, [r3, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001890:	461a      	mov	r2, r3
 8001892:	6813      	ldr	r3, [r2, #0]
 8001894:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001898:	d0fb      	beq.n	8001892 <GCControllerEmulation_SendControllerState+0x362>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 800189a:	4b76      	ldr	r3, [pc, #472]	; (8001a74 <GCControllerEmulation_SendControllerState+0x544>)
 800189c:	2208      	movs	r2, #8
 800189e:	605a      	str	r2, [r3, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 80018a0:	461a      	mov	r2, r3
 80018a2:	6813      	ldr	r3, [r2, #0]
 80018a4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80018a8:	d0fb      	beq.n	80018a2 <GCControllerEmulation_SendControllerState+0x372>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 80018aa:	4b72      	ldr	r3, [pc, #456]	; (8001a74 <GCControllerEmulation_SendControllerState+0x544>)
 80018ac:	2208      	movs	r2, #8
 80018ae:	605a      	str	r2, [r3, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 80018b0:	461a      	mov	r2, r3
 80018b2:	6813      	ldr	r3, [r2, #0]
 80018b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80018b8:	d0fb      	beq.n	80018b2 <GCControllerEmulation_SendControllerState+0x382>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 80018ba:	4b6e      	ldr	r3, [pc, #440]	; (8001a74 <GCControllerEmulation_SendControllerState+0x544>)
 80018bc:	2208      	movs	r2, #8
 80018be:	605a      	str	r2, [r3, #4]
	if(command == GC_COMMAND_PROBE_ORIGIN)
 80018c0:	2c01      	cmp	r4, #1
 80018c2:	f000 821d 	beq.w	8001d00 <GCControllerEmulation_SendControllerState+0x7d0>
	while(!(USART1->SR & USART_SR_TC)){};
 80018c6:	4a6b      	ldr	r2, [pc, #428]	; (8001a74 <GCControllerEmulation_SendControllerState+0x544>)
 80018c8:	6813      	ldr	r3, [r2, #0]
 80018ca:	f013 0f40 	tst.w	r3, #64	; 0x40
 80018ce:	d0fb      	beq.n	80018c8 <GCControllerEmulation_SendControllerState+0x398>
	GC_STOP_PORT->BSRR = GC_STOP_CLEAR;
 80018d0:	4b6a      	ldr	r3, [pc, #424]	; (8001a7c <GCControllerEmulation_SendControllerState+0x54c>)
 80018d2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80018d6:	619a      	str	r2, [r3, #24]
	volatile uint32_t counter = 17;
 80018d8:	2311      	movs	r3, #17
 80018da:	9301      	str	r3, [sp, #4]
	while(counter--);
 80018dc:	9b01      	ldr	r3, [sp, #4]
 80018de:	1e5a      	subs	r2, r3, #1
 80018e0:	9201      	str	r2, [sp, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1fa      	bne.n	80018dc <GCControllerEmulation_SendControllerState+0x3ac>
	GC_STOP_PORT->BSRR = GC_STOP_SET;
 80018e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80018ea:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
 80018ee:	2220      	movs	r2, #32
 80018f0:	619a      	str	r2, [r3, #24]
}
 80018f2:	b003      	add	sp, #12
 80018f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ( (gcButtonInputSnapShot[GC_DPAD_LEFT] == RELEASED) && (gcButtonInputSnapShot[GC_DPAD_RIGHT] == RELEASED) )
 80018f6:	4b62      	ldr	r3, [pc, #392]	; (8001a80 <GCControllerEmulation_SendControllerState+0x550>)
 80018f8:	7adb      	ldrb	r3, [r3, #11]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d008      	beq.n	8001910 <GCControllerEmulation_SendControllerState+0x3e0>
	else if ( (gcButtonInputSnapShot[GC_DPAD_LEFT] == RELEASED) && (gcButtonInputSnapShot[GC_DPAD_RIGHT] == PUSHED) )
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f47f ae26 	bne.w	8001550 <GCControllerEmulation_SendControllerState+0x20>
		gcProcessedButtonStates[GC_DPAD_LEFT] = RELEASED;
 8001904:	4b5c      	ldr	r3, [pc, #368]	; (8001a78 <GCControllerEmulation_SendControllerState+0x548>)
 8001906:	2201      	movs	r2, #1
 8001908:	729a      	strb	r2, [r3, #10]
		gcProcessedButtonStates[GC_DPAD_RIGHT] = PUSHED;
 800190a:	2200      	movs	r2, #0
 800190c:	72da      	strb	r2, [r3, #11]
 800190e:	e623      	b.n	8001558 <GCControllerEmulation_SendControllerState+0x28>
		gcProcessedButtonStates[GC_DPAD_LEFT] = RELEASED;
 8001910:	4b59      	ldr	r3, [pc, #356]	; (8001a78 <GCControllerEmulation_SendControllerState+0x548>)
 8001912:	2201      	movs	r2, #1
 8001914:	729a      	strb	r2, [r3, #10]
		gcProcessedButtonStates[GC_DPAD_RIGHT] = RELEASED;
 8001916:	72da      	strb	r2, [r3, #11]
 8001918:	e61e      	b.n	8001558 <GCControllerEmulation_SendControllerState+0x28>
		gcProcessedButtonStates[GC_DPAD_LEFT] = PUSHED;
 800191a:	4b57      	ldr	r3, [pc, #348]	; (8001a78 <GCControllerEmulation_SendControllerState+0x548>)
 800191c:	2200      	movs	r2, #0
 800191e:	729a      	strb	r2, [r3, #10]
		gcProcessedButtonStates[GC_DPAD_RIGHT] = RELEASED;
 8001920:	2201      	movs	r2, #1
 8001922:	72da      	strb	r2, [r3, #11]
 8001924:	e618      	b.n	8001558 <GCControllerEmulation_SendControllerState+0x28>
	if ( (gcButtonInputSnapShot[GC_DPAD_DOWN] == RELEASED) && (gcButtonInputSnapShot[GC_DPAD_UP] == RELEASED) )
 8001926:	4b56      	ldr	r3, [pc, #344]	; (8001a80 <GCControllerEmulation_SendControllerState+0x550>)
 8001928:	7a1b      	ldrb	r3, [r3, #8]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d008      	beq.n	8001940 <GCControllerEmulation_SendControllerState+0x410>
	else if ( (gcButtonInputSnapShot[GC_DPAD_DOWN] == RELEASED) && (gcButtonInputSnapShot[GC_DPAD_UP] == PUSHED) )
 800192e:	2b00      	cmp	r3, #0
 8001930:	f47f ae1d 	bne.w	800156e <GCControllerEmulation_SendControllerState+0x3e>
		gcProcessedButtonStates[GC_DPAD_DOWN] = RELEASED;
 8001934:	4b50      	ldr	r3, [pc, #320]	; (8001a78 <GCControllerEmulation_SendControllerState+0x548>)
 8001936:	2201      	movs	r2, #1
 8001938:	725a      	strb	r2, [r3, #9]
		gcProcessedButtonStates[GC_DPAD_UP] = PUSHED;
 800193a:	2200      	movs	r2, #0
 800193c:	721a      	strb	r2, [r3, #8]
 800193e:	e61a      	b.n	8001576 <GCControllerEmulation_SendControllerState+0x46>
		gcProcessedButtonStates[GC_DPAD_DOWN] = RELEASED;
 8001940:	4b4d      	ldr	r3, [pc, #308]	; (8001a78 <GCControllerEmulation_SendControllerState+0x548>)
 8001942:	2201      	movs	r2, #1
 8001944:	725a      	strb	r2, [r3, #9]
		gcProcessedButtonStates[GC_DPAD_UP] = RELEASED;
 8001946:	721a      	strb	r2, [r3, #8]
 8001948:	e615      	b.n	8001576 <GCControllerEmulation_SendControllerState+0x46>
		gcProcessedButtonStates[GC_DPAD_DOWN] = PUSHED;
 800194a:	4b4b      	ldr	r3, [pc, #300]	; (8001a78 <GCControllerEmulation_SendControllerState+0x548>)
 800194c:	2200      	movs	r2, #0
 800194e:	725a      	strb	r2, [r3, #9]
		gcProcessedButtonStates[GC_DPAD_UP] = RELEASED;
 8001950:	2201      	movs	r2, #1
 8001952:	721a      	strb	r2, [r3, #8]
 8001954:	e60f      	b.n	8001576 <GCControllerEmulation_SendControllerState+0x46>
	if ( (gcButtonInputSnapShot[GC_MAIN_STICK_LEFT] == RELEASED) && (gcButtonInputSnapShot[GC_MAIN_STICK_RIGHT] == RELEASED) )
 8001956:	4b4a      	ldr	r3, [pc, #296]	; (8001a80 <GCControllerEmulation_SendControllerState+0x550>)
 8001958:	7bdb      	ldrb	r3, [r3, #15]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d008      	beq.n	8001970 <GCControllerEmulation_SendControllerState+0x440>
	else if ( (gcButtonInputSnapShot[GC_MAIN_STICK_LEFT] == RELEASED) && (gcButtonInputSnapShot[GC_MAIN_STICK_RIGHT] == PUSHED) )
 800195e:	2b00      	cmp	r3, #0
 8001960:	f47f ae14 	bne.w	800158c <GCControllerEmulation_SendControllerState+0x5c>
		gcProcessedButtonStates[GC_MAIN_STICK_LEFT] = RELEASED;
 8001964:	4b44      	ldr	r3, [pc, #272]	; (8001a78 <GCControllerEmulation_SendControllerState+0x548>)
 8001966:	2201      	movs	r2, #1
 8001968:	739a      	strb	r2, [r3, #14]
		gcProcessedButtonStates[GC_MAIN_STICK_RIGHT] = PUSHED;
 800196a:	2200      	movs	r2, #0
 800196c:	73da      	strb	r2, [r3, #15]
 800196e:	e611      	b.n	8001594 <GCControllerEmulation_SendControllerState+0x64>
		gcProcessedButtonStates[GC_MAIN_STICK_LEFT] = RELEASED;
 8001970:	4b41      	ldr	r3, [pc, #260]	; (8001a78 <GCControllerEmulation_SendControllerState+0x548>)
 8001972:	2201      	movs	r2, #1
 8001974:	739a      	strb	r2, [r3, #14]
		gcProcessedButtonStates[GC_MAIN_STICK_RIGHT] = RELEASED;
 8001976:	73da      	strb	r2, [r3, #15]
 8001978:	e60c      	b.n	8001594 <GCControllerEmulation_SendControllerState+0x64>
		gcProcessedButtonStates[GC_MAIN_STICK_LEFT] = PUSHED;
 800197a:	4b3f      	ldr	r3, [pc, #252]	; (8001a78 <GCControllerEmulation_SendControllerState+0x548>)
 800197c:	2200      	movs	r2, #0
 800197e:	739a      	strb	r2, [r3, #14]
		gcProcessedButtonStates[GC_MAIN_STICK_RIGHT] = RELEASED;
 8001980:	2201      	movs	r2, #1
 8001982:	73da      	strb	r2, [r3, #15]
 8001984:	e606      	b.n	8001594 <GCControllerEmulation_SendControllerState+0x64>
	if ( (gcButtonInputSnapShot[GC_MAIN_STICK_DOWN] == RELEASED) && (gcButtonInputSnapShot[GC_MAIN_STICK_UP] == RELEASED) )
 8001986:	4b3e      	ldr	r3, [pc, #248]	; (8001a80 <GCControllerEmulation_SendControllerState+0x550>)
 8001988:	7b1b      	ldrb	r3, [r3, #12]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d008      	beq.n	80019a0 <GCControllerEmulation_SendControllerState+0x470>
	else if ( (gcButtonInputSnapShot[GC_MAIN_STICK_DOWN] == RELEASED) && (gcButtonInputSnapShot[GC_MAIN_STICK_UP] == PUSHED) )
 800198e:	2b00      	cmp	r3, #0
 8001990:	f47f ae0b 	bne.w	80015aa <GCControllerEmulation_SendControllerState+0x7a>
		gcProcessedButtonStates[GC_MAIN_STICK_DOWN] = RELEASED;
 8001994:	4b38      	ldr	r3, [pc, #224]	; (8001a78 <GCControllerEmulation_SendControllerState+0x548>)
 8001996:	2201      	movs	r2, #1
 8001998:	735a      	strb	r2, [r3, #13]
		gcProcessedButtonStates[GC_MAIN_STICK_UP] = PUSHED;
 800199a:	2200      	movs	r2, #0
 800199c:	731a      	strb	r2, [r3, #12]
 800199e:	e608      	b.n	80015b2 <GCControllerEmulation_SendControllerState+0x82>
		gcProcessedButtonStates[GC_MAIN_STICK_DOWN] = RELEASED;
 80019a0:	4b35      	ldr	r3, [pc, #212]	; (8001a78 <GCControllerEmulation_SendControllerState+0x548>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	735a      	strb	r2, [r3, #13]
		gcProcessedButtonStates[GC_MAIN_STICK_UP] = RELEASED;
 80019a6:	731a      	strb	r2, [r3, #12]
 80019a8:	e603      	b.n	80015b2 <GCControllerEmulation_SendControllerState+0x82>
		gcProcessedButtonStates[GC_MAIN_STICK_DOWN] = PUSHED;
 80019aa:	4b33      	ldr	r3, [pc, #204]	; (8001a78 <GCControllerEmulation_SendControllerState+0x548>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	735a      	strb	r2, [r3, #13]
		gcProcessedButtonStates[GC_MAIN_STICK_UP] = RELEASED;
 80019b0:	2201      	movs	r2, #1
 80019b2:	731a      	strb	r2, [r3, #12]
 80019b4:	e5fd      	b.n	80015b2 <GCControllerEmulation_SendControllerState+0x82>
	if ( (gcButtonInputSnapShot[GC_C_STICK_LEFT] == RELEASED) && (gcButtonInputSnapShot[GC_C_STICK_RIGHT] == RELEASED) )
 80019b6:	4b32      	ldr	r3, [pc, #200]	; (8001a80 <GCControllerEmulation_SendControllerState+0x550>)
 80019b8:	7cdb      	ldrb	r3, [r3, #19]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d008      	beq.n	80019d0 <GCControllerEmulation_SendControllerState+0x4a0>
	else if ( (gcButtonInputSnapShot[GC_C_STICK_LEFT] == RELEASED) && (gcButtonInputSnapShot[GC_C_STICK_RIGHT] == PUSHED) )
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f47f ae02 	bne.w	80015c8 <GCControllerEmulation_SendControllerState+0x98>
		gcProcessedButtonStates[GC_C_STICK_LEFT] = RELEASED;
 80019c4:	4b2c      	ldr	r3, [pc, #176]	; (8001a78 <GCControllerEmulation_SendControllerState+0x548>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	749a      	strb	r2, [r3, #18]
		gcProcessedButtonStates[GC_C_STICK_RIGHT] = PUSHED;
 80019ca:	2200      	movs	r2, #0
 80019cc:	74da      	strb	r2, [r3, #19]
 80019ce:	e5ff      	b.n	80015d0 <GCControllerEmulation_SendControllerState+0xa0>
		gcProcessedButtonStates[GC_C_STICK_LEFT] = RELEASED;
 80019d0:	4b29      	ldr	r3, [pc, #164]	; (8001a78 <GCControllerEmulation_SendControllerState+0x548>)
 80019d2:	2201      	movs	r2, #1
 80019d4:	749a      	strb	r2, [r3, #18]
		gcProcessedButtonStates[GC_C_STICK_RIGHT] = RELEASED;
 80019d6:	74da      	strb	r2, [r3, #19]
 80019d8:	e5fa      	b.n	80015d0 <GCControllerEmulation_SendControllerState+0xa0>
		gcProcessedButtonStates[GC_C_STICK_LEFT] = PUSHED;
 80019da:	4b27      	ldr	r3, [pc, #156]	; (8001a78 <GCControllerEmulation_SendControllerState+0x548>)
 80019dc:	2200      	movs	r2, #0
 80019de:	749a      	strb	r2, [r3, #18]
		gcProcessedButtonStates[GC_C_STICK_RIGHT] = RELEASED;
 80019e0:	2201      	movs	r2, #1
 80019e2:	74da      	strb	r2, [r3, #19]
 80019e4:	e5f4      	b.n	80015d0 <GCControllerEmulation_SendControllerState+0xa0>
	if ( (gcButtonInputSnapShot[GC_C_STICK_DOWN] == RELEASED) && (gcButtonInputSnapShot[GC_C_STICK_UP] == RELEASED) )
 80019e6:	4b26      	ldr	r3, [pc, #152]	; (8001a80 <GCControllerEmulation_SendControllerState+0x550>)
 80019e8:	7c1b      	ldrb	r3, [r3, #16]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d008      	beq.n	8001a00 <GCControllerEmulation_SendControllerState+0x4d0>
	else if ( (gcButtonInputSnapShot[GC_C_STICK_DOWN] == RELEASED) && (gcButtonInputSnapShot[GC_C_STICK_UP] == PUSHED) )
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f47f adf9 	bne.w	80015e6 <GCControllerEmulation_SendControllerState+0xb6>
		gcProcessedButtonStates[GC_C_STICK_DOWN] = RELEASED;
 80019f4:	4b20      	ldr	r3, [pc, #128]	; (8001a78 <GCControllerEmulation_SendControllerState+0x548>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	745a      	strb	r2, [r3, #17]
		gcProcessedButtonStates[GC_C_STICK_UP] = PUSHED;
 80019fa:	2200      	movs	r2, #0
 80019fc:	741a      	strb	r2, [r3, #16]
 80019fe:	e5f6      	b.n	80015ee <GCControllerEmulation_SendControllerState+0xbe>
		gcProcessedButtonStates[GC_C_STICK_DOWN] = RELEASED;
 8001a00:	4b1d      	ldr	r3, [pc, #116]	; (8001a78 <GCControllerEmulation_SendControllerState+0x548>)
 8001a02:	2201      	movs	r2, #1
 8001a04:	745a      	strb	r2, [r3, #17]
		gcProcessedButtonStates[GC_C_STICK_UP] = RELEASED;
 8001a06:	741a      	strb	r2, [r3, #16]
 8001a08:	e5f1      	b.n	80015ee <GCControllerEmulation_SendControllerState+0xbe>
		gcProcessedButtonStates[GC_C_STICK_DOWN] = PUSHED;
 8001a0a:	4b1b      	ldr	r3, [pc, #108]	; (8001a78 <GCControllerEmulation_SendControllerState+0x548>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	745a      	strb	r2, [r3, #17]
		gcProcessedButtonStates[GC_C_STICK_UP] = RELEASED;
 8001a10:	2201      	movs	r2, #1
 8001a12:	741a      	strb	r2, [r3, #16]
 8001a14:	e5eb      	b.n	80015ee <GCControllerEmulation_SendControllerState+0xbe>
	if( (leftButtonState == RELEASED) && (rightButtonState == RELEASED) )
 8001a16:	2e01      	cmp	r6, #1
 8001a18:	d006      	beq.n	8001a28 <GCControllerEmulation_SendControllerState+0x4f8>
	else if( (leftButtonState == RELEASED) && (rightButtonState == PUSHED) )
 8001a1a:	2e00      	cmp	r6, #0
 8001a1c:	f47f ae20 	bne.w	8001660 <GCControllerEmulation_SendControllerState+0x130>
		USART1->DR = (GC_BITS_01_CASE1 & 0xFF);
 8001a20:	4b14      	ldr	r3, [pc, #80]	; (8001a74 <GCControllerEmulation_SendControllerState+0x544>)
 8001a22:	22e8      	movs	r2, #232	; 0xe8
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	e61e      	b.n	8001666 <GCControllerEmulation_SendControllerState+0x136>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001a28:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <GCControllerEmulation_SendControllerState+0x544>)
 8001a2a:	2208      	movs	r2, #8
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	e61a      	b.n	8001666 <GCControllerEmulation_SendControllerState+0x136>
		USART1->DR = (GC_BITS_10_CASE1 & 0xFF);
 8001a30:	4b10      	ldr	r3, [pc, #64]	; (8001a74 <GCControllerEmulation_SendControllerState+0x544>)
 8001a32:	220f      	movs	r2, #15
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	e616      	b.n	8001666 <GCControllerEmulation_SendControllerState+0x136>
	if( (leftButtonState == RELEASED) && (rightButtonState == RELEASED) )
 8001a38:	2d01      	cmp	r5, #1
 8001a3a:	d006      	beq.n	8001a4a <GCControllerEmulation_SendControllerState+0x51a>
	else if( (leftButtonState == RELEASED) && (rightButtonState == PUSHED) )
 8001a3c:	2d00      	cmp	r5, #0
 8001a3e:	f47f ae1e 	bne.w	800167e <GCControllerEmulation_SendControllerState+0x14e>
		USART1->DR = (GC_BITS_01_CASE1 & 0xFF);
 8001a42:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <GCControllerEmulation_SendControllerState+0x544>)
 8001a44:	22e8      	movs	r2, #232	; 0xe8
 8001a46:	605a      	str	r2, [r3, #4]
 8001a48:	e61c      	b.n	8001684 <GCControllerEmulation_SendControllerState+0x154>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001a4a:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <GCControllerEmulation_SendControllerState+0x544>)
 8001a4c:	2208      	movs	r2, #8
 8001a4e:	605a      	str	r2, [r3, #4]
 8001a50:	e618      	b.n	8001684 <GCControllerEmulation_SendControllerState+0x154>
		USART1->DR = (GC_BITS_10_CASE1 & 0xFF);
 8001a52:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <GCControllerEmulation_SendControllerState+0x544>)
 8001a54:	220f      	movs	r2, #15
 8001a56:	605a      	str	r2, [r3, #4]
 8001a58:	e614      	b.n	8001684 <GCControllerEmulation_SendControllerState+0x154>
	if( (leftButtonState == RELEASED) && (rightButtonState == RELEASED) )
 8001a5a:	2801      	cmp	r0, #1
 8001a5c:	d006      	beq.n	8001a6c <GCControllerEmulation_SendControllerState+0x53c>
	else if( (leftButtonState == RELEASED) && (rightButtonState == PUSHED) )
 8001a5e:	2800      	cmp	r0, #0
 8001a60:	f47f ae2c 	bne.w	80016bc <GCControllerEmulation_SendControllerState+0x18c>
		USART1->DR = (GC_BITS_01_CASE1 & 0xFF);
 8001a64:	4b03      	ldr	r3, [pc, #12]	; (8001a74 <GCControllerEmulation_SendControllerState+0x544>)
 8001a66:	22e8      	movs	r2, #232	; 0xe8
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	e62a      	b.n	80016c2 <GCControllerEmulation_SendControllerState+0x192>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001a6c:	4b01      	ldr	r3, [pc, #4]	; (8001a74 <GCControllerEmulation_SendControllerState+0x544>)
 8001a6e:	2208      	movs	r2, #8
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	e626      	b.n	80016c2 <GCControllerEmulation_SendControllerState+0x192>
 8001a74:	40011000 	.word	0x40011000
 8001a78:	20000040 	.word	0x20000040
 8001a7c:	40020400 	.word	0x40020400
 8001a80:	20000028 	.word	0x20000028
		USART1->DR = (GC_BITS_10_CASE1 & 0xFF);
 8001a84:	4b9c      	ldr	r3, [pc, #624]	; (8001cf8 <GCControllerEmulation_SendControllerState+0x7c8>)
 8001a86:	220f      	movs	r2, #15
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	e61a      	b.n	80016c2 <GCControllerEmulation_SendControllerState+0x192>
	if( (leftButtonState == RELEASED) && (rightButtonState == RELEASED) )
 8001a8c:	2801      	cmp	r0, #1
 8001a8e:	d006      	beq.n	8001a9e <GCControllerEmulation_SendControllerState+0x56e>
	else if( (leftButtonState == RELEASED) && (rightButtonState == PUSHED) )
 8001a90:	2800      	cmp	r0, #0
 8001a92:	f47f ae25 	bne.w	80016e0 <GCControllerEmulation_SendControllerState+0x1b0>
		USART1->DR = (GC_BITS_01_CASE1 & 0xFF);
 8001a96:	4b98      	ldr	r3, [pc, #608]	; (8001cf8 <GCControllerEmulation_SendControllerState+0x7c8>)
 8001a98:	22e8      	movs	r2, #232	; 0xe8
 8001a9a:	605a      	str	r2, [r3, #4]
 8001a9c:	e623      	b.n	80016e6 <GCControllerEmulation_SendControllerState+0x1b6>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001a9e:	4b96      	ldr	r3, [pc, #600]	; (8001cf8 <GCControllerEmulation_SendControllerState+0x7c8>)
 8001aa0:	2208      	movs	r2, #8
 8001aa2:	605a      	str	r2, [r3, #4]
 8001aa4:	e61f      	b.n	80016e6 <GCControllerEmulation_SendControllerState+0x1b6>
		USART1->DR = (GC_BITS_10_CASE1 & 0xFF);
 8001aa6:	4b94      	ldr	r3, [pc, #592]	; (8001cf8 <GCControllerEmulation_SendControllerState+0x7c8>)
 8001aa8:	220f      	movs	r2, #15
 8001aaa:	605a      	str	r2, [r3, #4]
 8001aac:	e61b      	b.n	80016e6 <GCControllerEmulation_SendControllerState+0x1b6>
	if( (leftButtonState == RELEASED) && (rightButtonState == RELEASED) )
 8001aae:	2801      	cmp	r0, #1
 8001ab0:	d006      	beq.n	8001ac0 <GCControllerEmulation_SendControllerState+0x590>
	else if( (leftButtonState == RELEASED) && (rightButtonState == PUSHED) )
 8001ab2:	2800      	cmp	r0, #0
 8001ab4:	f47f ae26 	bne.w	8001704 <GCControllerEmulation_SendControllerState+0x1d4>
		USART1->DR = (GC_BITS_01_CASE1 & 0xFF);
 8001ab8:	4b8f      	ldr	r3, [pc, #572]	; (8001cf8 <GCControllerEmulation_SendControllerState+0x7c8>)
 8001aba:	22e8      	movs	r2, #232	; 0xe8
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	e624      	b.n	800170a <GCControllerEmulation_SendControllerState+0x1da>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001ac0:	4b8d      	ldr	r3, [pc, #564]	; (8001cf8 <GCControllerEmulation_SendControllerState+0x7c8>)
 8001ac2:	2208      	movs	r2, #8
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	e620      	b.n	800170a <GCControllerEmulation_SendControllerState+0x1da>
		USART1->DR = (GC_BITS_10_CASE1 & 0xFF);
 8001ac8:	4b8b      	ldr	r3, [pc, #556]	; (8001cf8 <GCControllerEmulation_SendControllerState+0x7c8>)
 8001aca:	220f      	movs	r2, #15
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	e61c      	b.n	800170a <GCControllerEmulation_SendControllerState+0x1da>
	else if(gcProcessedButtonStates[GC_MAIN_STICK_RIGHT] == PUSHED)
 8001ad0:	4b8a      	ldr	r3, [pc, #552]	; (8001cfc <GCControllerEmulation_SendControllerState+0x7cc>)
 8001ad2:	7bdb      	ldrb	r3, [r3, #15]
 8001ad4:	b303      	cbz	r3, 8001b18 <GCControllerEmulation_SendControllerState+0x5e8>
		while(!(USART1->SR & USART_SR_TXE)){};
 8001ad6:	4a88      	ldr	r2, [pc, #544]	; (8001cf8 <GCControllerEmulation_SendControllerState+0x7c8>)
 8001ad8:	6813      	ldr	r3, [r2, #0]
 8001ada:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001ade:	d0fb      	beq.n	8001ad8 <GCControllerEmulation_SendControllerState+0x5a8>
		USART1->DR = (GC_BITS_10_CASE1 & 0xFF);
 8001ae0:	4b85      	ldr	r3, [pc, #532]	; (8001cf8 <GCControllerEmulation_SendControllerState+0x7c8>)
 8001ae2:	220f      	movs	r2, #15
 8001ae4:	605a      	str	r2, [r3, #4]
		while(!(USART1->SR & USART_SR_TXE)){};
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	6813      	ldr	r3, [r2, #0]
 8001aea:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001aee:	d0fb      	beq.n	8001ae8 <GCControllerEmulation_SendControllerState+0x5b8>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001af0:	4b81      	ldr	r3, [pc, #516]	; (8001cf8 <GCControllerEmulation_SendControllerState+0x7c8>)
 8001af2:	2208      	movs	r2, #8
 8001af4:	605a      	str	r2, [r3, #4]
		while(!(USART1->SR & USART_SR_TXE)){};
 8001af6:	461a      	mov	r2, r3
 8001af8:	6813      	ldr	r3, [r2, #0]
 8001afa:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001afe:	d0fb      	beq.n	8001af8 <GCControllerEmulation_SendControllerState+0x5c8>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001b00:	4b7d      	ldr	r3, [pc, #500]	; (8001cf8 <GCControllerEmulation_SendControllerState+0x7c8>)
 8001b02:	2208      	movs	r2, #8
 8001b04:	605a      	str	r2, [r3, #4]
		while(!(USART1->SR & USART_SR_TXE)){};
 8001b06:	461a      	mov	r2, r3
 8001b08:	6813      	ldr	r3, [r2, #0]
 8001b0a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001b0e:	d0fb      	beq.n	8001b08 <GCControllerEmulation_SendControllerState+0x5d8>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001b10:	4b79      	ldr	r3, [pc, #484]	; (8001cf8 <GCControllerEmulation_SendControllerState+0x7c8>)
 8001b12:	2208      	movs	r2, #8
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	e61d      	b.n	8001754 <GCControllerEmulation_SendControllerState+0x224>
		while(!(USART1->SR & USART_SR_TXE)){};
 8001b18:	4a77      	ldr	r2, [pc, #476]	; (8001cf8 <GCControllerEmulation_SendControllerState+0x7c8>)
 8001b1a:	6813      	ldr	r3, [r2, #0]
 8001b1c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001b20:	d0fb      	beq.n	8001b1a <GCControllerEmulation_SendControllerState+0x5ea>
		USART1->DR = (GC_BITS_11_CASE1 & 0xFF);
 8001b22:	4b75      	ldr	r3, [pc, #468]	; (8001cf8 <GCControllerEmulation_SendControllerState+0x7c8>)
 8001b24:	22ef      	movs	r2, #239	; 0xef
 8001b26:	605a      	str	r2, [r3, #4]
		while(!(USART1->SR & USART_SR_TXE)){};
 8001b28:	461a      	mov	r2, r3
 8001b2a:	6813      	ldr	r3, [r2, #0]
 8001b2c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001b30:	d0fb      	beq.n	8001b2a <GCControllerEmulation_SendControllerState+0x5fa>
		USART1->DR = (GC_BITS_11_CASE1 & 0xFF);
 8001b32:	4b71      	ldr	r3, [pc, #452]	; (8001cf8 <GCControllerEmulation_SendControllerState+0x7c8>)
 8001b34:	22ef      	movs	r2, #239	; 0xef
 8001b36:	605a      	str	r2, [r3, #4]
		while(!(USART1->SR & USART_SR_TXE)){};
 8001b38:	461a      	mov	r2, r3
 8001b3a:	6813      	ldr	r3, [r2, #0]
 8001b3c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001b40:	d0fb      	beq.n	8001b3a <GCControllerEmulation_SendControllerState+0x60a>
		USART1->DR = (GC_BITS_11_CASE1 & 0xFF);
 8001b42:	4b6d      	ldr	r3, [pc, #436]	; (8001cf8 <GCControllerEmulation_SendControllerState+0x7c8>)
 8001b44:	22ef      	movs	r2, #239	; 0xef
 8001b46:	605a      	str	r2, [r3, #4]
		while(!(USART1->SR & USART_SR_TXE)){};
 8001b48:	461a      	mov	r2, r3
 8001b4a:	6813      	ldr	r3, [r2, #0]
 8001b4c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001b50:	d0fb      	beq.n	8001b4a <GCControllerEmulation_SendControllerState+0x61a>
		USART1->DR = (GC_BITS_11_CASE1 & 0xFF);
 8001b52:	4b69      	ldr	r3, [pc, #420]	; (8001cf8 <GCControllerEmulation_SendControllerState+0x7c8>)
 8001b54:	22ef      	movs	r2, #239	; 0xef
 8001b56:	605a      	str	r2, [r3, #4]
 8001b58:	e5fc      	b.n	8001754 <GCControllerEmulation_SendControllerState+0x224>
	else if(gcProcessedButtonStates[GC_MAIN_STICK_UP] == PUSHED)
 8001b5a:	4b68      	ldr	r3, [pc, #416]	; (8001cfc <GCControllerEmulation_SendControllerState+0x7cc>)
 8001b5c:	7b1b      	ldrb	r3, [r3, #12]
 8001b5e:	b303      	cbz	r3, 8001ba2 <GCControllerEmulation_SendControllerState+0x672>
		while(!(USART1->SR & USART_SR_TXE)){};
 8001b60:	4a65      	ldr	r2, [pc, #404]	; (8001cf8 <GCControllerEmulation_SendControllerState+0x7c8>)
 8001b62:	6813      	ldr	r3, [r2, #0]
 8001b64:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001b68:	d0fb      	beq.n	8001b62 <GCControllerEmulation_SendControllerState+0x632>
		USART1->DR = (GC_BITS_10_CASE1 & 0xFF);
 8001b6a:	4b63      	ldr	r3, [pc, #396]	; (8001cf8 <GCControllerEmulation_SendControllerState+0x7c8>)
 8001b6c:	220f      	movs	r2, #15
 8001b6e:	605a      	str	r2, [r3, #4]
		while(!(USART1->SR & USART_SR_TXE)){};
 8001b70:	461a      	mov	r2, r3
 8001b72:	6813      	ldr	r3, [r2, #0]
 8001b74:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001b78:	d0fb      	beq.n	8001b72 <GCControllerEmulation_SendControllerState+0x642>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001b7a:	4b5f      	ldr	r3, [pc, #380]	; (8001cf8 <GCControllerEmulation_SendControllerState+0x7c8>)
 8001b7c:	2208      	movs	r2, #8
 8001b7e:	605a      	str	r2, [r3, #4]
		while(!(USART1->SR & USART_SR_TXE)){};
 8001b80:	461a      	mov	r2, r3
 8001b82:	6813      	ldr	r3, [r2, #0]
 8001b84:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001b88:	d0fb      	beq.n	8001b82 <GCControllerEmulation_SendControllerState+0x652>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001b8a:	4b5b      	ldr	r3, [pc, #364]	; (8001cf8 <GCControllerEmulation_SendControllerState+0x7c8>)
 8001b8c:	2208      	movs	r2, #8
 8001b8e:	605a      	str	r2, [r3, #4]
		while(!(USART1->SR & USART_SR_TXE)){};
 8001b90:	461a      	mov	r2, r3
 8001b92:	6813      	ldr	r3, [r2, #0]
 8001b94:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001b98:	d0fb      	beq.n	8001b92 <GCControllerEmulation_SendControllerState+0x662>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001b9a:	4b57      	ldr	r3, [pc, #348]	; (8001cf8 <GCControllerEmulation_SendControllerState+0x7c8>)
 8001b9c:	2208      	movs	r2, #8
 8001b9e:	605a      	str	r2, [r3, #4]
 8001ba0:	e5fd      	b.n	800179e <GCControllerEmulation_SendControllerState+0x26e>
		while(!(USART1->SR & USART_SR_TXE)){};
 8001ba2:	4a55      	ldr	r2, [pc, #340]	; (8001cf8 <GCControllerEmulation_SendControllerState+0x7c8>)
 8001ba4:	6813      	ldr	r3, [r2, #0]
 8001ba6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001baa:	d0fb      	beq.n	8001ba4 <GCControllerEmulation_SendControllerState+0x674>
		USART1->DR = (GC_BITS_10_CASE1 & 0xFF);
 8001bac:	4b52      	ldr	r3, [pc, #328]	; (8001cf8 <GCControllerEmulation_SendControllerState+0x7c8>)
 8001bae:	220f      	movs	r2, #15
 8001bb0:	605a      	str	r2, [r3, #4]
		while(!(USART1->SR & USART_SR_TXE)){};
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	6813      	ldr	r3, [r2, #0]
 8001bb6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001bba:	d0fb      	beq.n	8001bb4 <GCControllerEmulation_SendControllerState+0x684>
		USART1->DR = (GC_BITS_11_CASE1 & 0xFF);
 8001bbc:	4b4e      	ldr	r3, [pc, #312]	; (8001cf8 <GCControllerEmulation_SendControllerState+0x7c8>)
 8001bbe:	22ef      	movs	r2, #239	; 0xef
 8001bc0:	605a      	str	r2, [r3, #4]
		while(!(USART1->SR & USART_SR_TXE)){};
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	6813      	ldr	r3, [r2, #0]
 8001bc6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001bca:	d0fb      	beq.n	8001bc4 <GCControllerEmulation_SendControllerState+0x694>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001bcc:	4b4a      	ldr	r3, [pc, #296]	; (8001cf8 <GCControllerEmulation_SendControllerState+0x7c8>)
 8001bce:	2208      	movs	r2, #8
 8001bd0:	605a      	str	r2, [r3, #4]
		while(!(USART1->SR & USART_SR_TXE)){};
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	6813      	ldr	r3, [r2, #0]
 8001bd6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001bda:	d0fb      	beq.n	8001bd4 <GCControllerEmulation_SendControllerState+0x6a4>
		USART1->DR = (GC_BITS_01_CASE1 & 0xFF);
 8001bdc:	4b46      	ldr	r3, [pc, #280]	; (8001cf8 <GCControllerEmulation_SendControllerState+0x7c8>)
 8001bde:	22e8      	movs	r2, #232	; 0xe8
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	e5dc      	b.n	800179e <GCControllerEmulation_SendControllerState+0x26e>
	else if(gcProcessedButtonStates[GC_C_STICK_RIGHT] == PUSHED)
 8001be4:	4b45      	ldr	r3, [pc, #276]	; (8001cfc <GCControllerEmulation_SendControllerState+0x7cc>)
 8001be6:	7cdb      	ldrb	r3, [r3, #19]
 8001be8:	b303      	cbz	r3, 8001c2c <GCControllerEmulation_SendControllerState+0x6fc>
		while(!(USART1->SR & USART_SR_TXE)){};
 8001bea:	4a43      	ldr	r2, [pc, #268]	; (8001cf8 <GCControllerEmulation_SendControllerState+0x7c8>)
 8001bec:	6813      	ldr	r3, [r2, #0]
 8001bee:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001bf2:	d0fb      	beq.n	8001bec <GCControllerEmulation_SendControllerState+0x6bc>
		USART1->DR = (GC_BITS_10_CASE1 & 0xFF);
 8001bf4:	4b40      	ldr	r3, [pc, #256]	; (8001cf8 <GCControllerEmulation_SendControllerState+0x7c8>)
 8001bf6:	220f      	movs	r2, #15
 8001bf8:	605a      	str	r2, [r3, #4]
		while(!(USART1->SR & USART_SR_TXE)){};
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	6813      	ldr	r3, [r2, #0]
 8001bfe:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001c02:	d0fb      	beq.n	8001bfc <GCControllerEmulation_SendControllerState+0x6cc>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001c04:	4b3c      	ldr	r3, [pc, #240]	; (8001cf8 <GCControllerEmulation_SendControllerState+0x7c8>)
 8001c06:	2208      	movs	r2, #8
 8001c08:	605a      	str	r2, [r3, #4]
		while(!(USART1->SR & USART_SR_TXE)){};
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	6813      	ldr	r3, [r2, #0]
 8001c0e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001c12:	d0fb      	beq.n	8001c0c <GCControllerEmulation_SendControllerState+0x6dc>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001c14:	4b38      	ldr	r3, [pc, #224]	; (8001cf8 <GCControllerEmulation_SendControllerState+0x7c8>)
 8001c16:	2208      	movs	r2, #8
 8001c18:	605a      	str	r2, [r3, #4]
		while(!(USART1->SR & USART_SR_TXE)){};
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	6813      	ldr	r3, [r2, #0]
 8001c1e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001c22:	d0fb      	beq.n	8001c1c <GCControllerEmulation_SendControllerState+0x6ec>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001c24:	4b34      	ldr	r3, [pc, #208]	; (8001cf8 <GCControllerEmulation_SendControllerState+0x7c8>)
 8001c26:	2208      	movs	r2, #8
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	e5e4      	b.n	80017f6 <GCControllerEmulation_SendControllerState+0x2c6>
		while(!(USART1->SR & USART_SR_TXE)){};
 8001c2c:	4a32      	ldr	r2, [pc, #200]	; (8001cf8 <GCControllerEmulation_SendControllerState+0x7c8>)
 8001c2e:	6813      	ldr	r3, [r2, #0]
 8001c30:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001c34:	d0fb      	beq.n	8001c2e <GCControllerEmulation_SendControllerState+0x6fe>
		USART1->DR = (GC_BITS_11_CASE1 & 0xFF);
 8001c36:	4b30      	ldr	r3, [pc, #192]	; (8001cf8 <GCControllerEmulation_SendControllerState+0x7c8>)
 8001c38:	22ef      	movs	r2, #239	; 0xef
 8001c3a:	605a      	str	r2, [r3, #4]
		while(!(USART1->SR & USART_SR_TXE)){};
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	6813      	ldr	r3, [r2, #0]
 8001c40:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001c44:	d0fb      	beq.n	8001c3e <GCControllerEmulation_SendControllerState+0x70e>
		USART1->DR = (GC_BITS_11_CASE1 & 0xFF);
 8001c46:	4b2c      	ldr	r3, [pc, #176]	; (8001cf8 <GCControllerEmulation_SendControllerState+0x7c8>)
 8001c48:	22ef      	movs	r2, #239	; 0xef
 8001c4a:	605a      	str	r2, [r3, #4]
		while(!(USART1->SR & USART_SR_TXE)){};
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	6813      	ldr	r3, [r2, #0]
 8001c50:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001c54:	d0fb      	beq.n	8001c4e <GCControllerEmulation_SendControllerState+0x71e>
		USART1->DR = (GC_BITS_11_CASE1 & 0xFF);
 8001c56:	4b28      	ldr	r3, [pc, #160]	; (8001cf8 <GCControllerEmulation_SendControllerState+0x7c8>)
 8001c58:	22ef      	movs	r2, #239	; 0xef
 8001c5a:	605a      	str	r2, [r3, #4]
		while(!(USART1->SR & USART_SR_TXE)){};
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	6813      	ldr	r3, [r2, #0]
 8001c60:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001c64:	d0fb      	beq.n	8001c5e <GCControllerEmulation_SendControllerState+0x72e>
		USART1->DR = (GC_BITS_11_CASE1 & 0xFF);
 8001c66:	4b24      	ldr	r3, [pc, #144]	; (8001cf8 <GCControllerEmulation_SendControllerState+0x7c8>)
 8001c68:	22ef      	movs	r2, #239	; 0xef
 8001c6a:	605a      	str	r2, [r3, #4]
 8001c6c:	e5c3      	b.n	80017f6 <GCControllerEmulation_SendControllerState+0x2c6>
	else if(gcProcessedButtonStates[GC_C_STICK_UP] == PUSHED)
 8001c6e:	4b23      	ldr	r3, [pc, #140]	; (8001cfc <GCControllerEmulation_SendControllerState+0x7cc>)
 8001c70:	7c1b      	ldrb	r3, [r3, #16]
 8001c72:	b303      	cbz	r3, 8001cb6 <GCControllerEmulation_SendControllerState+0x786>
		while(!(USART1->SR & USART_SR_TXE)){};
 8001c74:	4a20      	ldr	r2, [pc, #128]	; (8001cf8 <GCControllerEmulation_SendControllerState+0x7c8>)
 8001c76:	6813      	ldr	r3, [r2, #0]
 8001c78:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001c7c:	d0fb      	beq.n	8001c76 <GCControllerEmulation_SendControllerState+0x746>
		USART1->DR = (GC_BITS_10_CASE1 & 0xFF);
 8001c7e:	4b1e      	ldr	r3, [pc, #120]	; (8001cf8 <GCControllerEmulation_SendControllerState+0x7c8>)
 8001c80:	220f      	movs	r2, #15
 8001c82:	605a      	str	r2, [r3, #4]
		while(!(USART1->SR & USART_SR_TXE)){};
 8001c84:	461a      	mov	r2, r3
 8001c86:	6813      	ldr	r3, [r2, #0]
 8001c88:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001c8c:	d0fb      	beq.n	8001c86 <GCControllerEmulation_SendControllerState+0x756>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001c8e:	4b1a      	ldr	r3, [pc, #104]	; (8001cf8 <GCControllerEmulation_SendControllerState+0x7c8>)
 8001c90:	2208      	movs	r2, #8
 8001c92:	605a      	str	r2, [r3, #4]
		while(!(USART1->SR & USART_SR_TXE)){};
 8001c94:	461a      	mov	r2, r3
 8001c96:	6813      	ldr	r3, [r2, #0]
 8001c98:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001c9c:	d0fb      	beq.n	8001c96 <GCControllerEmulation_SendControllerState+0x766>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001c9e:	4b16      	ldr	r3, [pc, #88]	; (8001cf8 <GCControllerEmulation_SendControllerState+0x7c8>)
 8001ca0:	2208      	movs	r2, #8
 8001ca2:	605a      	str	r2, [r3, #4]
		while(!(USART1->SR & USART_SR_TXE)){};
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	6813      	ldr	r3, [r2, #0]
 8001ca8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001cac:	d0fb      	beq.n	8001ca6 <GCControllerEmulation_SendControllerState+0x776>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001cae:	4b12      	ldr	r3, [pc, #72]	; (8001cf8 <GCControllerEmulation_SendControllerState+0x7c8>)
 8001cb0:	2208      	movs	r2, #8
 8001cb2:	605a      	str	r2, [r3, #4]
 8001cb4:	e5c4      	b.n	8001840 <GCControllerEmulation_SendControllerState+0x310>
		while(!(USART1->SR & USART_SR_TXE)){};
 8001cb6:	4a10      	ldr	r2, [pc, #64]	; (8001cf8 <GCControllerEmulation_SendControllerState+0x7c8>)
 8001cb8:	6813      	ldr	r3, [r2, #0]
 8001cba:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001cbe:	d0fb      	beq.n	8001cb8 <GCControllerEmulation_SendControllerState+0x788>
		USART1->DR = (GC_BITS_10_CASE1 & 0xFF);
 8001cc0:	4b0d      	ldr	r3, [pc, #52]	; (8001cf8 <GCControllerEmulation_SendControllerState+0x7c8>)
 8001cc2:	220f      	movs	r2, #15
 8001cc4:	605a      	str	r2, [r3, #4]
		while(!(USART1->SR & USART_SR_TXE)){};
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	6813      	ldr	r3, [r2, #0]
 8001cca:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001cce:	d0fb      	beq.n	8001cc8 <GCControllerEmulation_SendControllerState+0x798>
		USART1->DR = (GC_BITS_11_CASE1 & 0xFF);
 8001cd0:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <GCControllerEmulation_SendControllerState+0x7c8>)
 8001cd2:	22ef      	movs	r2, #239	; 0xef
 8001cd4:	605a      	str	r2, [r3, #4]
		while(!(USART1->SR & USART_SR_TXE)){};
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	6813      	ldr	r3, [r2, #0]
 8001cda:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001cde:	d0fb      	beq.n	8001cd8 <GCControllerEmulation_SendControllerState+0x7a8>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001ce0:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <GCControllerEmulation_SendControllerState+0x7c8>)
 8001ce2:	2208      	movs	r2, #8
 8001ce4:	605a      	str	r2, [r3, #4]
		while(!(USART1->SR & USART_SR_TXE)){};
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	6813      	ldr	r3, [r2, #0]
 8001cea:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001cee:	d0fb      	beq.n	8001ce8 <GCControllerEmulation_SendControllerState+0x7b8>
		USART1->DR = (GC_BITS_01_CASE1 & 0xFF);
 8001cf0:	4b01      	ldr	r3, [pc, #4]	; (8001cf8 <GCControllerEmulation_SendControllerState+0x7c8>)
 8001cf2:	22e8      	movs	r2, #232	; 0xe8
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	e5a3      	b.n	8001840 <GCControllerEmulation_SendControllerState+0x310>
 8001cf8:	40011000 	.word	0x40011000
 8001cfc:	20000040 	.word	0x20000040
		while(!(USART1->SR & USART_SR_TXE)){};
 8001d00:	461a      	mov	r2, r3
 8001d02:	6813      	ldr	r3, [r2, #0]
 8001d04:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001d08:	d0fb      	beq.n	8001d02 <GCControllerEmulation_SendControllerState+0x7d2>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001d0a:	4b1e      	ldr	r3, [pc, #120]	; (8001d84 <GCControllerEmulation_SendControllerState+0x854>)
 8001d0c:	2208      	movs	r2, #8
 8001d0e:	605a      	str	r2, [r3, #4]
		while(!(USART1->SR & USART_SR_TXE)){};
 8001d10:	461a      	mov	r2, r3
 8001d12:	6813      	ldr	r3, [r2, #0]
 8001d14:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001d18:	d0fb      	beq.n	8001d12 <GCControllerEmulation_SendControllerState+0x7e2>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001d1a:	4b1a      	ldr	r3, [pc, #104]	; (8001d84 <GCControllerEmulation_SendControllerState+0x854>)
 8001d1c:	2208      	movs	r2, #8
 8001d1e:	605a      	str	r2, [r3, #4]
		while(!(USART1->SR & USART_SR_TXE)){};
 8001d20:	461a      	mov	r2, r3
 8001d22:	6813      	ldr	r3, [r2, #0]
 8001d24:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001d28:	d0fb      	beq.n	8001d22 <GCControllerEmulation_SendControllerState+0x7f2>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001d2a:	4b16      	ldr	r3, [pc, #88]	; (8001d84 <GCControllerEmulation_SendControllerState+0x854>)
 8001d2c:	2208      	movs	r2, #8
 8001d2e:	605a      	str	r2, [r3, #4]
		while(!(USART1->SR & USART_SR_TXE)){};
 8001d30:	461a      	mov	r2, r3
 8001d32:	6813      	ldr	r3, [r2, #0]
 8001d34:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001d38:	d0fb      	beq.n	8001d32 <GCControllerEmulation_SendControllerState+0x802>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001d3a:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <GCControllerEmulation_SendControllerState+0x854>)
 8001d3c:	2208      	movs	r2, #8
 8001d3e:	605a      	str	r2, [r3, #4]
		while(!(USART1->SR & USART_SR_TXE)){};
 8001d40:	461a      	mov	r2, r3
 8001d42:	6813      	ldr	r3, [r2, #0]
 8001d44:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001d48:	d0fb      	beq.n	8001d42 <GCControllerEmulation_SendControllerState+0x812>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001d4a:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <GCControllerEmulation_SendControllerState+0x854>)
 8001d4c:	2208      	movs	r2, #8
 8001d4e:	605a      	str	r2, [r3, #4]
		while(!(USART1->SR & USART_SR_TXE)){};
 8001d50:	461a      	mov	r2, r3
 8001d52:	6813      	ldr	r3, [r2, #0]
 8001d54:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001d58:	d0fb      	beq.n	8001d52 <GCControllerEmulation_SendControllerState+0x822>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001d5a:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <GCControllerEmulation_SendControllerState+0x854>)
 8001d5c:	2208      	movs	r2, #8
 8001d5e:	605a      	str	r2, [r3, #4]
		while(!(USART1->SR & USART_SR_TXE)){};
 8001d60:	461a      	mov	r2, r3
 8001d62:	6813      	ldr	r3, [r2, #0]
 8001d64:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001d68:	d0fb      	beq.n	8001d62 <GCControllerEmulation_SendControllerState+0x832>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001d6a:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <GCControllerEmulation_SendControllerState+0x854>)
 8001d6c:	2208      	movs	r2, #8
 8001d6e:	605a      	str	r2, [r3, #4]
		while(!(USART1->SR & USART_SR_TXE)){};
 8001d70:	461a      	mov	r2, r3
 8001d72:	6813      	ldr	r3, [r2, #0]
 8001d74:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001d78:	d0fb      	beq.n	8001d72 <GCControllerEmulation_SendControllerState+0x842>
		USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001d7a:	4b02      	ldr	r3, [pc, #8]	; (8001d84 <GCControllerEmulation_SendControllerState+0x854>)
 8001d7c:	2208      	movs	r2, #8
 8001d7e:	605a      	str	r2, [r3, #4]
 8001d80:	e5a1      	b.n	80018c6 <GCControllerEmulation_SendControllerState+0x396>
 8001d82:	bf00      	nop
 8001d84:	40011000 	.word	0x40011000

08001d88 <GCControllerEmulation_Run>:
{
 8001d88:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001d8c:	b083      	sub	sp, #12
	USART1->CR1 |= USART_CR1_RE;
 8001d8e:	4cb3      	ldr	r4, [pc, #716]	; (800205c <GCControllerEmulation_Run+0x2d4>)
 8001d90:	e0e8      	b.n	8001f64 <GCControllerEmulation_Run+0x1dc>
		if( ( (gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT7_BIT6] == GC_BITS_00_CASE1) || (gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT7_BIT6] == GC_BITS_00_CASE2) ) &&
 8001d92:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 8001d96:	2b08      	cmp	r3, #8
 8001d98:	d007      	beq.n	8001daa <GCControllerEmulation_Run+0x22>
		else if( ( (gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT7_BIT6] == GC_BITS_01_CASE1) || (gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT7_BIT6] == GC_BITS_01_CASE2) ) &&
 8001d9a:	2ae8      	cmp	r2, #232	; 0xe8
 8001d9c:	d115      	bne.n	8001dca <GCControllerEmulation_Run+0x42>
 8001d9e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8001da2:	2908      	cmp	r1, #8
 8001da4:	d01b      	beq.n	8001dde <GCControllerEmulation_Run+0x56>
			command = GC_COMMAND_UNKNOWN;
 8001da6:	2304      	movs	r3, #4
 8001da8:	e004      	b.n	8001db4 <GCControllerEmulation_Run+0x2c>
		if( ( (gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT7_BIT6] == GC_BITS_00_CASE1) || (gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT7_BIT6] == GC_BITS_00_CASE2) ) &&
 8001daa:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8001dae:	2b08      	cmp	r3, #8
 8001db0:	d005      	beq.n	8001dbe <GCControllerEmulation_Run+0x36>
			command = GC_COMMAND_UNKNOWN;
 8001db2:	2304      	movs	r3, #4
		USART1->CR1 &= ~USART_CR1_RE;
 8001db4:	68e2      	ldr	r2, [r4, #12]
 8001db6:	f022 0204 	bic.w	r2, r2, #4
 8001dba:	60e2      	str	r2, [r4, #12]
 8001dbc:	e12f      	b.n	800201e <GCControllerEmulation_Run+0x296>
			( (gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT5_BIT4] == GC_BITS_00_CASE1) || (gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT5_BIT4] == GC_BITS_00_CASE2) ) &&
 8001dbe:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 8001dc2:	2b08      	cmp	r3, #8
 8001dc4:	d005      	beq.n	8001dd2 <GCControllerEmulation_Run+0x4a>
		else if( ( (gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT7_BIT6] == GC_BITS_01_CASE1) || (gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT7_BIT6] == GC_BITS_01_CASE2) ) &&
 8001dc6:	2ae8      	cmp	r2, #232	; 0xe8
 8001dc8:	d009      	beq.n	8001dde <GCControllerEmulation_Run+0x56>
 8001dca:	2ac8      	cmp	r2, #200	; 0xc8
 8001dcc:	d0e7      	beq.n	8001d9e <GCControllerEmulation_Run+0x16>
			command = GC_COMMAND_UNKNOWN;
 8001dce:	2304      	movs	r3, #4
 8001dd0:	e7f0      	b.n	8001db4 <GCControllerEmulation_Run+0x2c>
			( (gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT3_BIT2] == GC_BITS_00_CASE1) || (gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT3_BIT2] == GC_BITS_00_CASE2) ) &&
 8001dd2:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8001dd6:	2b08      	cmp	r3, #8
 8001dd8:	d1f5      	bne.n	8001dc6 <GCControllerEmulation_Run+0x3e>
			command = GC_COMMAND_PROBE;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	e7ea      	b.n	8001db4 <GCControllerEmulation_Run+0x2c>
				 ( (gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT5_BIT4] == GC_BITS_00_CASE1) || (gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT5_BIT4] == GC_BITS_00_CASE2) ) &&
 8001dde:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001de2:	2808      	cmp	r0, #8
 8001de4:	d001      	beq.n	8001dea <GCControllerEmulation_Run+0x62>
			command = GC_COMMAND_UNKNOWN;
 8001de6:	2304      	movs	r3, #4
 8001de8:	e7e4      	b.n	8001db4 <GCControllerEmulation_Run+0x2c>
				 ( (gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT1_BIT0] == GC_BITS_01_CASE1) || (gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT1_BIT0] == GC_BITS_01_CASE2) )    )
 8001dea:	f005 05df 	and.w	r5, r5, #223	; 0xdf
			command = GC_COMMAND_PROBE_ORIGIN;
 8001dee:	2dc8      	cmp	r5, #200	; 0xc8
 8001df0:	bf14      	ite	ne
 8001df2:	2304      	movne	r3, #4
 8001df4:	2301      	moveq	r3, #1
 8001df6:	e7dd      	b.n	8001db4 <GCControllerEmulation_Run+0x2c>
	if( ( (gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT7_BIT6] == GC_BITS_01_CASE1) || (gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT7_BIT6] == GC_BITS_01_CASE2) ) &&
 8001df8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8001dfc:	2908      	cmp	r1, #8
 8001dfe:	d001      	beq.n	8001e04 <GCControllerEmulation_Run+0x7c>
		command = GC_COMMAND_UNKNOWN;
 8001e00:	2304      	movs	r3, #4
 8001e02:	e108      	b.n	8002016 <GCControllerEmulation_Run+0x28e>
		( (gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT5_BIT4] == GC_BITS_00_CASE1) || (gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT5_BIT4] == GC_BITS_00_CASE2) ) &&
 8001e04:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001e08:	2808      	cmp	r0, #8
 8001e0a:	d001      	beq.n	8001e10 <GCControllerEmulation_Run+0x88>
		command = GC_COMMAND_UNKNOWN;
 8001e0c:	2304      	movs	r3, #4
 8001e0e:	e102      	b.n	8002016 <GCControllerEmulation_Run+0x28e>
		( (gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT3_BIT2] == GC_BITS_00_CASE1) || (gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT3_BIT2] == GC_BITS_00_CASE2) ) &&
 8001e10:	f005 057f 	and.w	r5, r5, #127	; 0x7f
 8001e14:	2d08      	cmp	r5, #8
 8001e16:	d001      	beq.n	8001e1c <GCControllerEmulation_Run+0x94>
		command = GC_COMMAND_UNKNOWN;
 8001e18:	2304      	movs	r3, #4
 8001e1a:	e0fc      	b.n	8002016 <GCControllerEmulation_Run+0x28e>
		if( ( (gcConsoleResponse[GC_CONSOLE_BYTE_1_BIT7_BIT6] == GC_BITS_00_CASE1) || (gcConsoleResponse[GC_CONSOLE_BYTE_1_BIT7_BIT6] == GC_BITS_00_CASE2) ) &&
 8001e1c:	f006 067f 	and.w	r6, r6, #127	; 0x7f
 8001e20:	2e08      	cmp	r6, #8
 8001e22:	d001      	beq.n	8001e28 <GCControllerEmulation_Run+0xa0>
			command = GC_COMMAND_UNKNOWN;
 8001e24:	2304      	movs	r3, #4
 8001e26:	e0f6      	b.n	8002016 <GCControllerEmulation_Run+0x28e>
		if( ( (gcConsoleResponse[GC_CONSOLE_BYTE_1_BIT7_BIT6] == GC_BITS_00_CASE1) || (gcConsoleResponse[GC_CONSOLE_BYTE_1_BIT7_BIT6] == GC_BITS_00_CASE2) ) &&
 8001e28:	f007 077f 	and.w	r7, r7, #127	; 0x7f
 8001e2c:	2f08      	cmp	r7, #8
 8001e2e:	d001      	beq.n	8001e34 <GCControllerEmulation_Run+0xac>
			command = GC_COMMAND_UNKNOWN;
 8001e30:	2304      	movs	r3, #4
 8001e32:	e0f0      	b.n	8002016 <GCControllerEmulation_Run+0x28e>
		    ( (gcConsoleResponse[GC_CONSOLE_BYTE_1_BIT5_BIT4] == GC_BITS_00_CASE1) || (gcConsoleResponse[GC_CONSOLE_BYTE_1_BIT5_BIT4] == GC_BITS_00_CASE2) ) &&
 8001e34:	f00c 0c7f 	and.w	ip, ip, #127	; 0x7f
 8001e38:	f1bc 0f08 	cmp.w	ip, #8
 8001e3c:	d001      	beq.n	8001e42 <GCControllerEmulation_Run+0xba>
			command = GC_COMMAND_UNKNOWN;
 8001e3e:	2304      	movs	r3, #4
 8001e40:	e0e9      	b.n	8002016 <GCControllerEmulation_Run+0x28e>
		    ( (gcConsoleResponse[GC_CONSOLE_BYTE_1_BIT1_BIT0] == GC_BITS_11_CASE1) || (gcConsoleResponse[GC_CONSOLE_BYTE_1_BIT1_BIT0] == GC_BITS_11_CASE2) )    )
 8001e42:	f00e 0edf 	and.w	lr, lr, #223	; 0xdf
 8001e46:	f1be 0fcf 	cmp.w	lr, #207	; 0xcf
 8001e4a:	d001      	beq.n	8001e50 <GCControllerEmulation_Run+0xc8>
			command = GC_COMMAND_UNKNOWN;
 8001e4c:	2304      	movs	r3, #4
 8001e4e:	e0e2      	b.n	8002016 <GCControllerEmulation_Run+0x28e>
	gcConsoleResponse[GC_CONSOLE_BYTE_2_BIT7_BIT6] = USART1->DR;
 8001e50:	fa5f f888 	uxtb.w	r8, r8
			if( ( (gcConsoleResponse[GC_CONSOLE_BYTE_2_BIT7_BIT6] == GC_BITS_00_CASE1) || (gcConsoleResponse[GC_CONSOLE_BYTE_2_BIT7_BIT6] == GC_BITS_00_CASE2) ) &&
 8001e54:	f008 037f 	and.w	r3, r8, #127	; 0x7f
 8001e58:	2b08      	cmp	r3, #8
 8001e5a:	d001      	beq.n	8001e60 <GCControllerEmulation_Run+0xd8>
				command = GC_COMMAND_UNKNOWN;
 8001e5c:	2304      	movs	r3, #4
 8001e5e:	e0da      	b.n	8002016 <GCControllerEmulation_Run+0x28e>
	gcConsoleResponse[GC_CONSOLE_BYTE_2_BIT3_BIT2] = USART1->DR;
 8001e60:	fa5f fa8a 	uxtb.w	sl, sl
	gcConsoleResponse[GC_CONSOLE_BYTE_2_BIT1_BIT0] = USART1->DR;
 8001e64:	fa5f fb8b 	uxtb.w	fp, fp
			if( ( (gcConsoleResponse[GC_CONSOLE_BYTE_2_BIT7_BIT6] == GC_BITS_00_CASE1) || (gcConsoleResponse[GC_CONSOLE_BYTE_2_BIT7_BIT6] == GC_BITS_00_CASE2) ) &&
 8001e68:	f009 097f 	and.w	r9, r9, #127	; 0x7f
 8001e6c:	f1b9 0f08 	cmp.w	r9, #8
 8001e70:	d001      	beq.n	8001e76 <GCControllerEmulation_Run+0xee>
				command = GC_COMMAND_UNKNOWN;
 8001e72:	2304      	movs	r3, #4
 8001e74:	e0cf      	b.n	8002016 <GCControllerEmulation_Run+0x28e>
				( (gcConsoleResponse[GC_CONSOLE_BYTE_2_BIT5_BIT4] == GC_BITS_00_CASE1) || (gcConsoleResponse[GC_CONSOLE_BYTE_2_BIT5_BIT4] == GC_BITS_00_CASE2) ) &&
 8001e76:	f00a 037f 	and.w	r3, sl, #127	; 0x7f
 8001e7a:	2b08      	cmp	r3, #8
 8001e7c:	d00a      	beq.n	8001e94 <GCControllerEmulation_Run+0x10c>
			else if( ( (gcConsoleResponse[GC_CONSOLE_BYTE_2_BIT7_BIT6] == GC_BITS_00_CASE1) || (gcConsoleResponse[GC_CONSOLE_BYTE_2_BIT7_BIT6] == GC_BITS_00_CASE2) ) &&
 8001e7e:	f1b8 0f08 	cmp.w	r8, #8
 8001e82:	f040 80e5 	bne.w	8002050 <GCControllerEmulation_Run+0x2c8>
					( (gcConsoleResponse[GC_CONSOLE_BYTE_2_BIT5_BIT4] == GC_BITS_00_CASE1) || (gcConsoleResponse[GC_CONSOLE_BYTE_2_BIT5_BIT4] == GC_BITS_00_CASE2) ) &&
 8001e86:	f00a 0a7f 	and.w	sl, sl, #127	; 0x7f
 8001e8a:	f1ba 0f08 	cmp.w	sl, #8
 8001e8e:	d007      	beq.n	8001ea0 <GCControllerEmulation_Run+0x118>
				command = GC_COMMAND_UNKNOWN;
 8001e90:	2304      	movs	r3, #4
 8001e92:	e0c0      	b.n	8002016 <GCControllerEmulation_Run+0x28e>
				( (gcConsoleResponse[GC_CONSOLE_BYTE_2_BIT3_BIT2] == GC_BITS_00_CASE1) || (gcConsoleResponse[GC_CONSOLE_BYTE_2_BIT3_BIT2] == GC_BITS_00_CASE2) ) &&
 8001e94:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
 8001e98:	2b08      	cmp	r3, #8
 8001e9a:	d1f0      	bne.n	8001e7e <GCControllerEmulation_Run+0xf6>
				command = GC_COMMAND_POLL_AND_TURN_RUMBLE_OFF;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	e0ba      	b.n	8002016 <GCControllerEmulation_Run+0x28e>
					( (gcConsoleResponse[GC_CONSOLE_BYTE_2_BIT1_BIT0] == GC_BITS_01_CASE1) || (gcConsoleResponse[GC_CONSOLE_BYTE_2_BIT1_BIT0] == GC_BITS_01_CASE2) )    )
 8001ea0:	f00b 0bdf 	and.w	fp, fp, #223	; 0xdf
				command = GC_COMMAND_POLL_AND_TURN_RUMBLE_ON;
 8001ea4:	f1bb 0fc8 	cmp.w	fp, #200	; 0xc8
 8001ea8:	bf14      	ite	ne
 8001eaa:	2304      	movne	r3, #4
 8001eac:	2303      	moveq	r3, #3
 8001eae:	e0b2      	b.n	8002016 <GCControllerEmulation_Run+0x28e>
	while(!(USART1->SR & USART_SR_TXE)){};
 8001eb0:	6823      	ldr	r3, [r4, #0]
 8001eb2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001eb6:	d0fb      	beq.n	8001eb0 <GCControllerEmulation_Run+0x128>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001eb8:	2308      	movs	r3, #8
 8001eba:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001ebc:	6823      	ldr	r3, [r4, #0]
 8001ebe:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001ec2:	d0fb      	beq.n	8001ebc <GCControllerEmulation_Run+0x134>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001ec4:	2308      	movs	r3, #8
 8001ec6:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001ec8:	6823      	ldr	r3, [r4, #0]
 8001eca:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001ece:	d0fb      	beq.n	8001ec8 <GCControllerEmulation_Run+0x140>
	USART1->DR = (GC_BITS_10_CASE1 & 0xFF);
 8001ed0:	230f      	movs	r3, #15
 8001ed2:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001ed4:	6823      	ldr	r3, [r4, #0]
 8001ed6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001eda:	d0fb      	beq.n	8001ed4 <GCControllerEmulation_Run+0x14c>
	USART1->DR = (GC_BITS_01_CASE1 & 0xFF);
 8001edc:	23e8      	movs	r3, #232	; 0xe8
 8001ede:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001ee0:	6823      	ldr	r3, [r4, #0]
 8001ee2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001ee6:	d0fb      	beq.n	8001ee0 <GCControllerEmulation_Run+0x158>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001ee8:	2308      	movs	r3, #8
 8001eea:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001eec:	6823      	ldr	r3, [r4, #0]
 8001eee:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001ef2:	d0fb      	beq.n	8001eec <GCControllerEmulation_Run+0x164>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001ef4:	2308      	movs	r3, #8
 8001ef6:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001ef8:	6823      	ldr	r3, [r4, #0]
 8001efa:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001efe:	d0fb      	beq.n	8001ef8 <GCControllerEmulation_Run+0x170>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001f00:	2308      	movs	r3, #8
 8001f02:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001f04:	6823      	ldr	r3, [r4, #0]
 8001f06:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001f0a:	d0fb      	beq.n	8001f04 <GCControllerEmulation_Run+0x17c>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001f0c:	2308      	movs	r3, #8
 8001f0e:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001f10:	6823      	ldr	r3, [r4, #0]
 8001f12:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001f16:	d0fb      	beq.n	8001f10 <GCControllerEmulation_Run+0x188>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001f18:	2308      	movs	r3, #8
 8001f1a:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001f1c:	6823      	ldr	r3, [r4, #0]
 8001f1e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001f22:	d0fb      	beq.n	8001f1c <GCControllerEmulation_Run+0x194>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001f24:	2308      	movs	r3, #8
 8001f26:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001f28:	6823      	ldr	r3, [r4, #0]
 8001f2a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001f2e:	d0fb      	beq.n	8001f28 <GCControllerEmulation_Run+0x1a0>
	USART1->DR = (GC_BITS_00_CASE1 & 0xFF);
 8001f30:	2308      	movs	r3, #8
 8001f32:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TXE)){};
 8001f34:	6823      	ldr	r3, [r4, #0]
 8001f36:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001f3a:	d0fb      	beq.n	8001f34 <GCControllerEmulation_Run+0x1ac>
	USART1->DR = (GC_BITS_11_CASE1 & 0xFF);
 8001f3c:	23ef      	movs	r3, #239	; 0xef
 8001f3e:	6063      	str	r3, [r4, #4]
	while(!(USART1->SR & USART_SR_TC)){};
 8001f40:	6823      	ldr	r3, [r4, #0]
 8001f42:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001f46:	d0fb      	beq.n	8001f40 <GCControllerEmulation_Run+0x1b8>
	GC_STOP_PORT->BSRR = GC_STOP_CLEAR;
 8001f48:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f4c:	4a44      	ldr	r2, [pc, #272]	; (8002060 <GCControllerEmulation_Run+0x2d8>)
 8001f4e:	6193      	str	r3, [r2, #24]
	volatile uint32_t counter = 17;
 8001f50:	2311      	movs	r3, #17
 8001f52:	9301      	str	r3, [sp, #4]
	while(counter--);
 8001f54:	9b01      	ldr	r3, [sp, #4]
 8001f56:	1e5a      	subs	r2, r3, #1
 8001f58:	9201      	str	r2, [sp, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1fa      	bne.n	8001f54 <GCControllerEmulation_Run+0x1cc>
	GC_STOP_PORT->BSRR = GC_STOP_SET;
 8001f5e:	2320      	movs	r3, #32
 8001f60:	4a3f      	ldr	r2, [pc, #252]	; (8002060 <GCControllerEmulation_Run+0x2d8>)
 8001f62:	6193      	str	r3, [r2, #24]
	USART1->CR1 |= USART_CR1_RE;
 8001f64:	68e3      	ldr	r3, [r4, #12]
 8001f66:	f043 0304 	orr.w	r3, r3, #4
 8001f6a:	60e3      	str	r3, [r4, #12]
	while(!(USART1->SR & USART_SR_RXNE)){};
 8001f6c:	6823      	ldr	r3, [r4, #0]
 8001f6e:	f013 0f20 	tst.w	r3, #32
 8001f72:	d0fb      	beq.n	8001f6c <GCControllerEmulation_Run+0x1e4>
	gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT7_BIT6] = USART1->DR;
 8001f74:	6862      	ldr	r2, [r4, #4]
 8001f76:	b2d2      	uxtb	r2, r2
	while(!(USART1->SR & USART_SR_RXNE)){};
 8001f78:	6823      	ldr	r3, [r4, #0]
 8001f7a:	f013 0f20 	tst.w	r3, #32
 8001f7e:	d0fb      	beq.n	8001f78 <GCControllerEmulation_Run+0x1f0>
	gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT5_BIT4] = USART1->DR;
 8001f80:	6861      	ldr	r1, [r4, #4]
 8001f82:	b2c9      	uxtb	r1, r1
	while(!(USART1->SR & USART_SR_RXNE)){};
 8001f84:	6823      	ldr	r3, [r4, #0]
 8001f86:	f013 0f20 	tst.w	r3, #32
 8001f8a:	d0fb      	beq.n	8001f84 <GCControllerEmulation_Run+0x1fc>
	gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT3_BIT2] = USART1->DR;
 8001f8c:	6860      	ldr	r0, [r4, #4]
 8001f8e:	b2c0      	uxtb	r0, r0
	while(!(USART1->SR & USART_SR_RXNE)){};
 8001f90:	6823      	ldr	r3, [r4, #0]
 8001f92:	f013 0f20 	tst.w	r3, #32
 8001f96:	d0fb      	beq.n	8001f90 <GCControllerEmulation_Run+0x208>
	gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT1_BIT0] = USART1->DR;
 8001f98:	6865      	ldr	r5, [r4, #4]
 8001f9a:	b2ed      	uxtb	r5, r5
	while(!(USART1->SR & USART_SR_RXNE)){};
 8001f9c:	6823      	ldr	r3, [r4, #0]
 8001f9e:	f013 0f20 	tst.w	r3, #32
 8001fa2:	d0fb      	beq.n	8001f9c <GCControllerEmulation_Run+0x214>
	gcConsoleResponse[GC_CONSOLE_TEMP_BITS] = USART1->DR;
 8001fa4:	6866      	ldr	r6, [r4, #4]
 8001fa6:	b2f6      	uxtb	r6, r6
	if(gcConsoleResponse[GC_CONSOLE_TEMP_BITS] == GC_BITS_STOP_BIT)
 8001fa8:	2eff      	cmp	r6, #255	; 0xff
 8001faa:	f43f aef2 	beq.w	8001d92 <GCControllerEmulation_Run+0xa>
	while(!(USART1->SR & USART_SR_RXNE)){};
 8001fae:	6823      	ldr	r3, [r4, #0]
 8001fb0:	f013 0f20 	tst.w	r3, #32
 8001fb4:	d0fb      	beq.n	8001fae <GCControllerEmulation_Run+0x226>
	gcConsoleResponse[GC_CONSOLE_BYTE_1_BIT5_BIT4] = USART1->DR;
 8001fb6:	6867      	ldr	r7, [r4, #4]
	while(!(USART1->SR & USART_SR_RXNE)){};
 8001fb8:	6823      	ldr	r3, [r4, #0]
 8001fba:	f013 0f20 	tst.w	r3, #32
 8001fbe:	d0fb      	beq.n	8001fb8 <GCControllerEmulation_Run+0x230>
	gcConsoleResponse[GC_CONSOLE_BYTE_1_BIT3_BIT2] = USART1->DR;
 8001fc0:	f8d4 c004 	ldr.w	ip, [r4, #4]
	while(!(USART1->SR & USART_SR_RXNE)){};
 8001fc4:	6823      	ldr	r3, [r4, #0]
 8001fc6:	f013 0f20 	tst.w	r3, #32
 8001fca:	d0fb      	beq.n	8001fc4 <GCControllerEmulation_Run+0x23c>
	gcConsoleResponse[GC_CONSOLE_BYTE_1_BIT1_BIT0] = USART1->DR;
 8001fcc:	f8d4 e004 	ldr.w	lr, [r4, #4]
	while(!(USART1->SR & USART_SR_RXNE)){};
 8001fd0:	6823      	ldr	r3, [r4, #0]
 8001fd2:	f013 0f20 	tst.w	r3, #32
 8001fd6:	d0fb      	beq.n	8001fd0 <GCControllerEmulation_Run+0x248>
	gcConsoleResponse[GC_CONSOLE_BYTE_2_BIT7_BIT6] = USART1->DR;
 8001fd8:	f8d4 8004 	ldr.w	r8, [r4, #4]
	while(!(USART1->SR & USART_SR_RXNE)){};
 8001fdc:	6823      	ldr	r3, [r4, #0]
 8001fde:	f013 0f20 	tst.w	r3, #32
 8001fe2:	d0fb      	beq.n	8001fdc <GCControllerEmulation_Run+0x254>
	gcConsoleResponse[GC_CONSOLE_BYTE_2_BIT5_BIT4] = USART1->DR;
 8001fe4:	f8d4 9004 	ldr.w	r9, [r4, #4]
	while(!(USART1->SR & USART_SR_RXNE)){};
 8001fe8:	6823      	ldr	r3, [r4, #0]
 8001fea:	f013 0f20 	tst.w	r3, #32
 8001fee:	d0fb      	beq.n	8001fe8 <GCControllerEmulation_Run+0x260>
	gcConsoleResponse[GC_CONSOLE_BYTE_2_BIT3_BIT2] = USART1->DR;
 8001ff0:	f8d4 a004 	ldr.w	sl, [r4, #4]
	while(!(USART1->SR & USART_SR_RXNE)){};
 8001ff4:	6823      	ldr	r3, [r4, #0]
 8001ff6:	f013 0f20 	tst.w	r3, #32
 8001ffa:	d0fb      	beq.n	8001ff4 <GCControllerEmulation_Run+0x26c>
	gcConsoleResponse[GC_CONSOLE_BYTE_2_BIT1_BIT0] = USART1->DR;
 8001ffc:	f8d4 b004 	ldr.w	fp, [r4, #4]
	while(!(USART1->SR & USART_SR_RXNE)){};
 8002000:	6823      	ldr	r3, [r4, #0]
 8002002:	f013 0f20 	tst.w	r3, #32
 8002006:	d0fb      	beq.n	8002000 <GCControllerEmulation_Run+0x278>
	gcConsoleResponse[GC_CONSOLE_TEMP_BITS] = USART1->DR;
 8002008:	6863      	ldr	r3, [r4, #4]
	if( ( (gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT7_BIT6] == GC_BITS_01_CASE1) || (gcConsoleResponse[GC_CONSOLE_BYTE_0_BIT7_BIT6] == GC_BITS_01_CASE2) ) &&
 800200a:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800200e:	2ac8      	cmp	r2, #200	; 0xc8
 8002010:	f43f aef2 	beq.w	8001df8 <GCControllerEmulation_Run+0x70>
		command = GC_COMMAND_UNKNOWN;
 8002014:	2304      	movs	r3, #4
	USART1->CR1 &= ~USART_CR1_RE;
 8002016:	68e2      	ldr	r2, [r4, #12]
 8002018:	f022 0204 	bic.w	r2, r2, #4
 800201c:	60e2      	str	r2, [r4, #12]
		switch(command)
 800201e:	2b03      	cmp	r3, #3
 8002020:	d8a0      	bhi.n	8001f64 <GCControllerEmulation_Run+0x1dc>
 8002022:	a201      	add	r2, pc, #4	; (adr r2, 8002028 <GCControllerEmulation_Run+0x2a0>)
 8002024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002028:	08001eb1 	.word	0x08001eb1
 800202c:	08002039 	.word	0x08002039
 8002030:	08002041 	.word	0x08002041
 8002034:	08002049 	.word	0x08002049
				GCControllerEmulation_SendControllerState(GC_COMMAND_PROBE_ORIGIN);
 8002038:	2001      	movs	r0, #1
 800203a:	f7ff fa79 	bl	8001530 <GCControllerEmulation_SendControllerState>
				break;
 800203e:	e791      	b.n	8001f64 <GCControllerEmulation_Run+0x1dc>
				GCControllerEmulation_SendControllerState(GC_COMMAND_POLL_AND_TURN_RUMBLE_OFF);
 8002040:	2002      	movs	r0, #2
 8002042:	f7ff fa75 	bl	8001530 <GCControllerEmulation_SendControllerState>
				break;
 8002046:	e78d      	b.n	8001f64 <GCControllerEmulation_Run+0x1dc>
				GCControllerEmulation_SendControllerState(GC_COMMAND_POLL_AND_TURN_RUMBLE_ON);
 8002048:	2003      	movs	r0, #3
 800204a:	f7ff fa71 	bl	8001530 <GCControllerEmulation_SendControllerState>
				break;
 800204e:	e789      	b.n	8001f64 <GCControllerEmulation_Run+0x1dc>
			else if( ( (gcConsoleResponse[GC_CONSOLE_BYTE_2_BIT7_BIT6] == GC_BITS_00_CASE1) || (gcConsoleResponse[GC_CONSOLE_BYTE_2_BIT7_BIT6] == GC_BITS_00_CASE2) ) &&
 8002050:	f1b8 0f88 	cmp.w	r8, #136	; 0x88
 8002054:	f43f af17 	beq.w	8001e86 <GCControllerEmulation_Run+0xfe>
				command = GC_COMMAND_UNKNOWN;
 8002058:	2304      	movs	r3, #4
 800205a:	e7dc      	b.n	8002016 <GCControllerEmulation_Run+0x28e>
 800205c:	40011000 	.word	0x40011000
 8002060:	40020400 	.word	0x40020400

08002064 <Main_Init>:
	}
}

/* Main Functions */
void Main_Init()
{
 8002064:	b500      	push	{lr}
 8002066:	b087      	sub	sp, #28
	/* Initialize the blue led */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002068:	2300      	movs	r3, #0
 800206a:	9300      	str	r3, [sp, #0]
 800206c:	4a0c      	ldr	r2, [pc, #48]	; (80020a0 <Main_Init+0x3c>)
 800206e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002070:	f041 0104 	orr.w	r1, r1, #4
 8002074:	6311      	str	r1, [r2, #48]	; 0x30
 8002076:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002078:	f002 0204 	and.w	r2, r2, #4
 800207c:	9200      	str	r2, [sp, #0]
 800207e:	9a00      	ldr	r2, [sp, #0]

	GPIO_InitTypeDef GPIO_InitStruct_Main = {0};
 8002080:	9303      	str	r3, [sp, #12]
 8002082:	9304      	str	r3, [sp, #16]
 8002084:	9305      	str	r3, [sp, #20]

	GPIO_InitStruct_Main.Pin = BLUE_LED_PIN_HAL;
 8002086:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800208a:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct_Main.Mode = GPIO_MODE_OUTPUT_PP;
 800208c:	2301      	movs	r3, #1
 800208e:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct_Main.Pull = GPIO_NOPULL;
	GPIO_InitStruct_Main.Speed = GPIO_SPEED_FREQ_LOW;

	HAL_GPIO_Init(BLUE_LED_PORT, &GPIO_InitStruct_Main);
 8002090:	a901      	add	r1, sp, #4
 8002092:	4804      	ldr	r0, [pc, #16]	; (80020a4 <Main_Init+0x40>)
 8002094:	f7fe face 	bl	8000634 <HAL_GPIO_Init>

	/* Blue LED off by default */
	//Main_SetBlueLed(LED_OFF);
}
 8002098:	b007      	add	sp, #28
 800209a:	f85d fb04 	ldr.w	pc, [sp], #4
 800209e:	bf00      	nop
 80020a0:	40023800 	.word	0x40023800
 80020a4:	40020800 	.word	0x40020800

080020a8 <SysTick_Handler>:
//			break;
//	}
//}

void SysTick_Handler(void)
{
 80020a8:	b508      	push	{r3, lr}
	HAL_IncTick();
 80020aa:	f7fe fa57 	bl	800055c <HAL_IncTick>
}
 80020ae:	bd08      	pop	{r3, pc}

080020b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020b0:	b570      	push	{r4, r5, r6, lr}
 80020b2:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020b4:	2230      	movs	r2, #48	; 0x30
 80020b6:	2100      	movs	r1, #0
 80020b8:	a808      	add	r0, sp, #32
 80020ba:	f000 f8a5 	bl	8002208 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020be:	2400      	movs	r4, #0
 80020c0:	9403      	str	r4, [sp, #12]
 80020c2:	9404      	str	r4, [sp, #16]
 80020c4:	9405      	str	r4, [sp, #20]
 80020c6:	9406      	str	r4, [sp, #24]
 80020c8:	9407      	str	r4, [sp, #28]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020ca:	9401      	str	r4, [sp, #4]
 80020cc:	4b1f      	ldr	r3, [pc, #124]	; (800214c <SystemClock_Config+0x9c>)
 80020ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020d0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80020d4:	641a      	str	r2, [r3, #64]	; 0x40
 80020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020dc:	9301      	str	r3, [sp, #4]
 80020de:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020e0:	9402      	str	r4, [sp, #8]
 80020e2:	4b1b      	ldr	r3, [pc, #108]	; (8002150 <SystemClock_Config+0xa0>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80020f2:	9302      	str	r3, [sp, #8]
 80020f4:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80020f6:	2603      	movs	r6, #3
 80020f8:	9608      	str	r6, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020fe:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002100:	2301      	movs	r3, #1
 8002102:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002104:	2310      	movs	r3, #16
 8002106:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002108:	2502      	movs	r5, #2
 800210a:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800210c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002110:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8002112:	230c      	movs	r3, #12
 8002114:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002116:	2360      	movs	r3, #96	; 0x60
 8002118:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800211a:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800211c:	2304      	movs	r3, #4
 800211e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002120:	a808      	add	r0, sp, #32
 8002122:	f7fe fb7d 	bl	8000820 <HAL_RCC_OscConfig>
  {
    //Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002126:	230f      	movs	r3, #15
 8002128:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800212a:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800212c:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800212e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002132:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002134:	9407      	str	r4, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002136:	4631      	mov	r1, r6
 8002138:	a803      	add	r0, sp, #12
 800213a:	f7fe fe11 	bl	8000d60 <HAL_RCC_ClockConfig>
  {
    //Error_Handler();
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800213e:	4622      	mov	r2, r4
 8002140:	4621      	mov	r1, r4
 8002142:	4620      	mov	r0, r4
 8002144:	f7fe fd6a 	bl	8000c1c <HAL_RCC_MCOConfig>
}
 8002148:	b014      	add	sp, #80	; 0x50
 800214a:	bd70      	pop	{r4, r5, r6, pc}
 800214c:	40023800 	.word	0x40023800
 8002150:	40007000 	.word	0x40007000

08002154 <main>:
{
 8002154:	b508      	push	{r3, lr}
	HAL_Init();
 8002156:	f7fe f9e7 	bl	8000528 <HAL_Init>
	SystemClock_Config();
 800215a:	f7ff ffa9 	bl	80020b0 <SystemClock_Config>
	Main_Init();
 800215e:	f7ff ff81 	bl	8002064 <Main_Init>
	GCControllerEmulation_Init();
 8002162:	f7fe ff95 	bl	8001090 <GCControllerEmulation_Init>
		GCControllerEmulation_Run();
 8002166:	f7ff fe0f 	bl	8001d88 <GCControllerEmulation_Run>
 800216a:	e7fc      	b.n	8002166 <main+0x12>

0800216c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800216c:	480d      	ldr	r0, [pc, #52]	; (80021a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800216e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002170:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002174:	480c      	ldr	r0, [pc, #48]	; (80021a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002176:	490d      	ldr	r1, [pc, #52]	; (80021ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8002178:	4a0d      	ldr	r2, [pc, #52]	; (80021b0 <LoopForever+0xe>)
  movs r3, #0
 800217a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800217c:	e002      	b.n	8002184 <LoopCopyDataInit>

0800217e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800217e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002180:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002182:	3304      	adds	r3, #4

08002184 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002184:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002186:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002188:	d3f9      	bcc.n	800217e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800218a:	4a0a      	ldr	r2, [pc, #40]	; (80021b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800218c:	4c0a      	ldr	r4, [pc, #40]	; (80021b8 <LoopForever+0x16>)
  movs r3, #0
 800218e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002190:	e001      	b.n	8002196 <LoopFillZerobss>

08002192 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002192:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002194:	3204      	adds	r2, #4

08002196 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002196:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002198:	d3fb      	bcc.n	8002192 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800219a:	f000 f811 	bl	80021c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800219e:	f7ff ffd9 	bl	8002154 <main>

080021a2 <LoopForever>:

LoopForever:
    b LoopForever
 80021a2:	e7fe      	b.n	80021a2 <LoopForever>
  ldr   r0, =_estack
 80021a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80021b0:	08002258 	.word	0x08002258
  ldr r2, =_sbss
 80021b4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80021b8:	200000a0 	.word	0x200000a0

080021bc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021bc:	e7fe      	b.n	80021bc <ADC_IRQHandler>
	...

080021c0 <__libc_init_array>:
 80021c0:	b570      	push	{r4, r5, r6, lr}
 80021c2:	4e0d      	ldr	r6, [pc, #52]	; (80021f8 <__libc_init_array+0x38>)
 80021c4:	4c0d      	ldr	r4, [pc, #52]	; (80021fc <__libc_init_array+0x3c>)
 80021c6:	1ba4      	subs	r4, r4, r6
 80021c8:	10a4      	asrs	r4, r4, #2
 80021ca:	2500      	movs	r5, #0
 80021cc:	42a5      	cmp	r5, r4
 80021ce:	d109      	bne.n	80021e4 <__libc_init_array+0x24>
 80021d0:	4e0b      	ldr	r6, [pc, #44]	; (8002200 <__libc_init_array+0x40>)
 80021d2:	4c0c      	ldr	r4, [pc, #48]	; (8002204 <__libc_init_array+0x44>)
 80021d4:	f000 f820 	bl	8002218 <_init>
 80021d8:	1ba4      	subs	r4, r4, r6
 80021da:	10a4      	asrs	r4, r4, #2
 80021dc:	2500      	movs	r5, #0
 80021de:	42a5      	cmp	r5, r4
 80021e0:	d105      	bne.n	80021ee <__libc_init_array+0x2e>
 80021e2:	bd70      	pop	{r4, r5, r6, pc}
 80021e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021e8:	4798      	blx	r3
 80021ea:	3501      	adds	r5, #1
 80021ec:	e7ee      	b.n	80021cc <__libc_init_array+0xc>
 80021ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021f2:	4798      	blx	r3
 80021f4:	3501      	adds	r5, #1
 80021f6:	e7f2      	b.n	80021de <__libc_init_array+0x1e>
 80021f8:	08002250 	.word	0x08002250
 80021fc:	08002250 	.word	0x08002250
 8002200:	08002250 	.word	0x08002250
 8002204:	08002254 	.word	0x08002254

08002208 <memset>:
 8002208:	4402      	add	r2, r0
 800220a:	4603      	mov	r3, r0
 800220c:	4293      	cmp	r3, r2
 800220e:	d100      	bne.n	8002212 <memset+0xa>
 8002210:	4770      	bx	lr
 8002212:	f803 1b01 	strb.w	r1, [r3], #1
 8002216:	e7f9      	b.n	800220c <memset+0x4>

08002218 <_init>:
 8002218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800221a:	bf00      	nop
 800221c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800221e:	bc08      	pop	{r3}
 8002220:	469e      	mov	lr, r3
 8002222:	4770      	bx	lr

08002224 <_fini>:
 8002224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002226:	bf00      	nop
 8002228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800222a:	bc08      	pop	{r3}
 800222c:	469e      	mov	lr, r3
 800222e:	4770      	bx	lr
